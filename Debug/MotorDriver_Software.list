
MotorDriver_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800525c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001214  20000004  08005260  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001218  08005260  00021218  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000253d8  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e4f  00000000  00000000  00045404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b4ff  00000000  00000000  00049253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cf8  00000000  00000000  00054758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001318  00000000  00000000  00055450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008cfa  00000000  00000000  00056768  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000046c9  00000000  00000000  0005f462  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00063b2b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b4c  00000000  00000000  00063ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005140 	.word	0x08005140

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08005140 	.word	0x08005140

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cdrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	1c10      	adds	r0, r2, #0
 800024c:	4662      	mov	r2, ip
 800024e:	468c      	mov	ip, r1
 8000250:	1c19      	adds	r1, r3, #0
 8000252:	4663      	mov	r3, ip
 8000254:	e000      	b.n	8000258 <__aeabi_cdcmpeq>
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cdcmpeq>:
 8000258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800025a:	f001 fb81 	bl	8001960 <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	d401      	bmi.n	8000266 <__aeabi_cdcmpeq+0xe>
 8000262:	2100      	movs	r1, #0
 8000264:	42c8      	cmn	r0, r1
 8000266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000268 <__aeabi_dcmpeq>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f001 fadb 	bl	8001824 <__eqdf2>
 800026e:	4240      	negs	r0, r0
 8000270:	3001      	adds	r0, #1
 8000272:	bd10      	pop	{r4, pc}

08000274 <__aeabi_dcmplt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fb73 	bl	8001960 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	db01      	blt.n	8000282 <__aeabi_dcmplt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmple>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fb69 	bl	8001960 <__ledf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dd01      	ble.n	8000296 <__aeabi_dcmple+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpgt>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fafb 	bl	8001898 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dc01      	bgt.n	80002aa <__aeabi_dcmpgt+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dcmpge>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f001 faf1 	bl	8001898 <__gedf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	da01      	bge.n	80002be <__aeabi_dcmpge+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__aeabi_cfrcmple>:
 80002c4:	4684      	mov	ip, r0
 80002c6:	1c08      	adds	r0, r1, #0
 80002c8:	4661      	mov	r1, ip
 80002ca:	e7ff      	b.n	80002cc <__aeabi_cfcmpeq>

080002cc <__aeabi_cfcmpeq>:
 80002cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ce:	f000 f8b1 	bl	8000434 <__lesf2>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d401      	bmi.n	80002da <__aeabi_cfcmpeq+0xe>
 80002d6:	2100      	movs	r1, #0
 80002d8:	42c8      	cmn	r0, r1
 80002da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002dc <__aeabi_fcmpeq>:
 80002dc:	b510      	push	{r4, lr}
 80002de:	f000 f843 	bl	8000368 <__eqsf2>
 80002e2:	4240      	negs	r0, r0
 80002e4:	3001      	adds	r0, #1
 80002e6:	bd10      	pop	{r4, pc}

080002e8 <__aeabi_fcmplt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f8a3 	bl	8000434 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	db01      	blt.n	80002f6 <__aeabi_fcmplt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmple>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f899 	bl	8000434 <__lesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dd01      	ble.n	800030a <__aeabi_fcmple+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpgt>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 f84f 	bl	80003b4 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	dc01      	bgt.n	800031e <__aeabi_fcmpgt+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_fcmpge>:
 8000324:	b510      	push	{r4, lr}
 8000326:	f000 f845 	bl	80003b4 <__gesf2>
 800032a:	2800      	cmp	r0, #0
 800032c:	da01      	bge.n	8000332 <__aeabi_fcmpge+0xe>
 800032e:	2000      	movs	r0, #0
 8000330:	bd10      	pop	{r4, pc}
 8000332:	2001      	movs	r0, #1
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			; (mov r8, r8)

08000338 <__aeabi_f2uiz>:
 8000338:	219e      	movs	r1, #158	; 0x9e
 800033a:	b510      	push	{r4, lr}
 800033c:	05c9      	lsls	r1, r1, #23
 800033e:	1c04      	adds	r4, r0, #0
 8000340:	f7ff fff0 	bl	8000324 <__aeabi_fcmpge>
 8000344:	2800      	cmp	r0, #0
 8000346:	d103      	bne.n	8000350 <__aeabi_f2uiz+0x18>
 8000348:	1c20      	adds	r0, r4, #0
 800034a:	f000 fb71 	bl	8000a30 <__aeabi_f2iz>
 800034e:	bd10      	pop	{r4, pc}
 8000350:	219e      	movs	r1, #158	; 0x9e
 8000352:	1c20      	adds	r0, r4, #0
 8000354:	05c9      	lsls	r1, r1, #23
 8000356:	f000 f9cf 	bl	80006f8 <__aeabi_fsub>
 800035a:	f000 fb69 	bl	8000a30 <__aeabi_f2iz>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	061b      	lsls	r3, r3, #24
 8000362:	469c      	mov	ip, r3
 8000364:	4460      	add	r0, ip
 8000366:	e7f2      	b.n	800034e <__aeabi_f2uiz+0x16>

08000368 <__eqsf2>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	0042      	lsls	r2, r0, #1
 800036c:	0245      	lsls	r5, r0, #9
 800036e:	024e      	lsls	r6, r1, #9
 8000370:	004c      	lsls	r4, r1, #1
 8000372:	0fc3      	lsrs	r3, r0, #31
 8000374:	0a6d      	lsrs	r5, r5, #9
 8000376:	0e12      	lsrs	r2, r2, #24
 8000378:	0a76      	lsrs	r6, r6, #9
 800037a:	0e24      	lsrs	r4, r4, #24
 800037c:	0fc9      	lsrs	r1, r1, #31
 800037e:	2001      	movs	r0, #1
 8000380:	2aff      	cmp	r2, #255	; 0xff
 8000382:	d006      	beq.n	8000392 <__eqsf2+0x2a>
 8000384:	2cff      	cmp	r4, #255	; 0xff
 8000386:	d003      	beq.n	8000390 <__eqsf2+0x28>
 8000388:	42a2      	cmp	r2, r4
 800038a:	d101      	bne.n	8000390 <__eqsf2+0x28>
 800038c:	42b5      	cmp	r5, r6
 800038e:	d006      	beq.n	800039e <__eqsf2+0x36>
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	2d00      	cmp	r5, #0
 8000394:	d1fc      	bne.n	8000390 <__eqsf2+0x28>
 8000396:	2cff      	cmp	r4, #255	; 0xff
 8000398:	d1fa      	bne.n	8000390 <__eqsf2+0x28>
 800039a:	2e00      	cmp	r6, #0
 800039c:	d1f8      	bne.n	8000390 <__eqsf2+0x28>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d006      	beq.n	80003b0 <__eqsf2+0x48>
 80003a2:	2001      	movs	r0, #1
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	d1f3      	bne.n	8000390 <__eqsf2+0x28>
 80003a8:	0028      	movs	r0, r5
 80003aa:	1e45      	subs	r5, r0, #1
 80003ac:	41a8      	sbcs	r0, r5
 80003ae:	e7ef      	b.n	8000390 <__eqsf2+0x28>
 80003b0:	2000      	movs	r0, #0
 80003b2:	e7ed      	b.n	8000390 <__eqsf2+0x28>

080003b4 <__gesf2>:
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	0042      	lsls	r2, r0, #1
 80003b8:	0245      	lsls	r5, r0, #9
 80003ba:	024c      	lsls	r4, r1, #9
 80003bc:	0fc3      	lsrs	r3, r0, #31
 80003be:	0048      	lsls	r0, r1, #1
 80003c0:	0a6d      	lsrs	r5, r5, #9
 80003c2:	0e12      	lsrs	r2, r2, #24
 80003c4:	0a64      	lsrs	r4, r4, #9
 80003c6:	0e00      	lsrs	r0, r0, #24
 80003c8:	0fc9      	lsrs	r1, r1, #31
 80003ca:	2aff      	cmp	r2, #255	; 0xff
 80003cc:	d01e      	beq.n	800040c <__gesf2+0x58>
 80003ce:	28ff      	cmp	r0, #255	; 0xff
 80003d0:	d021      	beq.n	8000416 <__gesf2+0x62>
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d10a      	bne.n	80003ec <__gesf2+0x38>
 80003d6:	426e      	negs	r6, r5
 80003d8:	416e      	adcs	r6, r5
 80003da:	b2f6      	uxtb	r6, r6
 80003dc:	2800      	cmp	r0, #0
 80003de:	d10f      	bne.n	8000400 <__gesf2+0x4c>
 80003e0:	2c00      	cmp	r4, #0
 80003e2:	d10d      	bne.n	8000400 <__gesf2+0x4c>
 80003e4:	2000      	movs	r0, #0
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d009      	beq.n	80003fe <__gesf2+0x4a>
 80003ea:	e005      	b.n	80003f8 <__gesf2+0x44>
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d101      	bne.n	80003f4 <__gesf2+0x40>
 80003f0:	2c00      	cmp	r4, #0
 80003f2:	d001      	beq.n	80003f8 <__gesf2+0x44>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d011      	beq.n	800041c <__gesf2+0x68>
 80003f8:	2101      	movs	r1, #1
 80003fa:	4258      	negs	r0, r3
 80003fc:	4308      	orrs	r0, r1
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2e00      	cmp	r6, #0
 8000402:	d0f7      	beq.n	80003f4 <__gesf2+0x40>
 8000404:	2001      	movs	r0, #1
 8000406:	3901      	subs	r1, #1
 8000408:	4308      	orrs	r0, r1
 800040a:	e7f8      	b.n	80003fe <__gesf2+0x4a>
 800040c:	2d00      	cmp	r5, #0
 800040e:	d0de      	beq.n	80003ce <__gesf2+0x1a>
 8000410:	2002      	movs	r0, #2
 8000412:	4240      	negs	r0, r0
 8000414:	e7f3      	b.n	80003fe <__gesf2+0x4a>
 8000416:	2c00      	cmp	r4, #0
 8000418:	d0db      	beq.n	80003d2 <__gesf2+0x1e>
 800041a:	e7f9      	b.n	8000410 <__gesf2+0x5c>
 800041c:	4282      	cmp	r2, r0
 800041e:	dceb      	bgt.n	80003f8 <__gesf2+0x44>
 8000420:	db04      	blt.n	800042c <__gesf2+0x78>
 8000422:	42a5      	cmp	r5, r4
 8000424:	d8e8      	bhi.n	80003f8 <__gesf2+0x44>
 8000426:	2000      	movs	r0, #0
 8000428:	42a5      	cmp	r5, r4
 800042a:	d2e8      	bcs.n	80003fe <__gesf2+0x4a>
 800042c:	2101      	movs	r1, #1
 800042e:	1e58      	subs	r0, r3, #1
 8000430:	4308      	orrs	r0, r1
 8000432:	e7e4      	b.n	80003fe <__gesf2+0x4a>

08000434 <__lesf2>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0042      	lsls	r2, r0, #1
 8000438:	024d      	lsls	r5, r1, #9
 800043a:	004c      	lsls	r4, r1, #1
 800043c:	0246      	lsls	r6, r0, #9
 800043e:	0a76      	lsrs	r6, r6, #9
 8000440:	0e12      	lsrs	r2, r2, #24
 8000442:	0fc3      	lsrs	r3, r0, #31
 8000444:	0a6d      	lsrs	r5, r5, #9
 8000446:	0e24      	lsrs	r4, r4, #24
 8000448:	0fc9      	lsrs	r1, r1, #31
 800044a:	2aff      	cmp	r2, #255	; 0xff
 800044c:	d016      	beq.n	800047c <__lesf2+0x48>
 800044e:	2cff      	cmp	r4, #255	; 0xff
 8000450:	d018      	beq.n	8000484 <__lesf2+0x50>
 8000452:	2a00      	cmp	r2, #0
 8000454:	d10a      	bne.n	800046c <__lesf2+0x38>
 8000456:	4270      	negs	r0, r6
 8000458:	4170      	adcs	r0, r6
 800045a:	b2c0      	uxtb	r0, r0
 800045c:	2c00      	cmp	r4, #0
 800045e:	d015      	beq.n	800048c <__lesf2+0x58>
 8000460:	2800      	cmp	r0, #0
 8000462:	d005      	beq.n	8000470 <__lesf2+0x3c>
 8000464:	2001      	movs	r0, #1
 8000466:	3901      	subs	r1, #1
 8000468:	4308      	orrs	r0, r1
 800046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046c:	2c00      	cmp	r4, #0
 800046e:	d013      	beq.n	8000498 <__lesf2+0x64>
 8000470:	4299      	cmp	r1, r3
 8000472:	d014      	beq.n	800049e <__lesf2+0x6a>
 8000474:	2001      	movs	r0, #1
 8000476:	425b      	negs	r3, r3
 8000478:	4318      	orrs	r0, r3
 800047a:	e7f6      	b.n	800046a <__lesf2+0x36>
 800047c:	2002      	movs	r0, #2
 800047e:	2e00      	cmp	r6, #0
 8000480:	d1f3      	bne.n	800046a <__lesf2+0x36>
 8000482:	e7e4      	b.n	800044e <__lesf2+0x1a>
 8000484:	2002      	movs	r0, #2
 8000486:	2d00      	cmp	r5, #0
 8000488:	d1ef      	bne.n	800046a <__lesf2+0x36>
 800048a:	e7e2      	b.n	8000452 <__lesf2+0x1e>
 800048c:	2d00      	cmp	r5, #0
 800048e:	d1e7      	bne.n	8000460 <__lesf2+0x2c>
 8000490:	2000      	movs	r0, #0
 8000492:	2e00      	cmp	r6, #0
 8000494:	d0e9      	beq.n	800046a <__lesf2+0x36>
 8000496:	e7ed      	b.n	8000474 <__lesf2+0x40>
 8000498:	2d00      	cmp	r5, #0
 800049a:	d1e9      	bne.n	8000470 <__lesf2+0x3c>
 800049c:	e7ea      	b.n	8000474 <__lesf2+0x40>
 800049e:	42a2      	cmp	r2, r4
 80004a0:	dc06      	bgt.n	80004b0 <__lesf2+0x7c>
 80004a2:	dbdf      	blt.n	8000464 <__lesf2+0x30>
 80004a4:	42ae      	cmp	r6, r5
 80004a6:	d803      	bhi.n	80004b0 <__lesf2+0x7c>
 80004a8:	2000      	movs	r0, #0
 80004aa:	42ae      	cmp	r6, r5
 80004ac:	d3da      	bcc.n	8000464 <__lesf2+0x30>
 80004ae:	e7dc      	b.n	800046a <__lesf2+0x36>
 80004b0:	2001      	movs	r0, #1
 80004b2:	4249      	negs	r1, r1
 80004b4:	4308      	orrs	r0, r1
 80004b6:	e7d8      	b.n	800046a <__lesf2+0x36>

080004b8 <__aeabi_fmul>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	4657      	mov	r7, sl
 80004bc:	464e      	mov	r6, r9
 80004be:	4645      	mov	r5, r8
 80004c0:	46de      	mov	lr, fp
 80004c2:	b5e0      	push	{r5, r6, r7, lr}
 80004c4:	0247      	lsls	r7, r0, #9
 80004c6:	0046      	lsls	r6, r0, #1
 80004c8:	4688      	mov	r8, r1
 80004ca:	0a7f      	lsrs	r7, r7, #9
 80004cc:	0e36      	lsrs	r6, r6, #24
 80004ce:	0fc4      	lsrs	r4, r0, #31
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d047      	beq.n	8000564 <__aeabi_fmul+0xac>
 80004d4:	2eff      	cmp	r6, #255	; 0xff
 80004d6:	d024      	beq.n	8000522 <__aeabi_fmul+0x6a>
 80004d8:	00fb      	lsls	r3, r7, #3
 80004da:	2780      	movs	r7, #128	; 0x80
 80004dc:	04ff      	lsls	r7, r7, #19
 80004de:	431f      	orrs	r7, r3
 80004e0:	2300      	movs	r3, #0
 80004e2:	4699      	mov	r9, r3
 80004e4:	469a      	mov	sl, r3
 80004e6:	3e7f      	subs	r6, #127	; 0x7f
 80004e8:	4643      	mov	r3, r8
 80004ea:	025d      	lsls	r5, r3, #9
 80004ec:	0058      	lsls	r0, r3, #1
 80004ee:	0fdb      	lsrs	r3, r3, #31
 80004f0:	0a6d      	lsrs	r5, r5, #9
 80004f2:	0e00      	lsrs	r0, r0, #24
 80004f4:	4698      	mov	r8, r3
 80004f6:	d043      	beq.n	8000580 <__aeabi_fmul+0xc8>
 80004f8:	28ff      	cmp	r0, #255	; 0xff
 80004fa:	d03b      	beq.n	8000574 <__aeabi_fmul+0xbc>
 80004fc:	00eb      	lsls	r3, r5, #3
 80004fe:	2580      	movs	r5, #128	; 0x80
 8000500:	2200      	movs	r2, #0
 8000502:	04ed      	lsls	r5, r5, #19
 8000504:	431d      	orrs	r5, r3
 8000506:	387f      	subs	r0, #127	; 0x7f
 8000508:	1836      	adds	r6, r6, r0
 800050a:	1c73      	adds	r3, r6, #1
 800050c:	4641      	mov	r1, r8
 800050e:	469b      	mov	fp, r3
 8000510:	464b      	mov	r3, r9
 8000512:	4061      	eors	r1, r4
 8000514:	4313      	orrs	r3, r2
 8000516:	2b0f      	cmp	r3, #15
 8000518:	d864      	bhi.n	80005e4 <__aeabi_fmul+0x12c>
 800051a:	4875      	ldr	r0, [pc, #468]	; (80006f0 <__aeabi_fmul+0x238>)
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	58c3      	ldr	r3, [r0, r3]
 8000520:	469f      	mov	pc, r3
 8000522:	2f00      	cmp	r7, #0
 8000524:	d142      	bne.n	80005ac <__aeabi_fmul+0xf4>
 8000526:	2308      	movs	r3, #8
 8000528:	4699      	mov	r9, r3
 800052a:	3b06      	subs	r3, #6
 800052c:	26ff      	movs	r6, #255	; 0xff
 800052e:	469a      	mov	sl, r3
 8000530:	e7da      	b.n	80004e8 <__aeabi_fmul+0x30>
 8000532:	4641      	mov	r1, r8
 8000534:	2a02      	cmp	r2, #2
 8000536:	d028      	beq.n	800058a <__aeabi_fmul+0xd2>
 8000538:	2a03      	cmp	r2, #3
 800053a:	d100      	bne.n	800053e <__aeabi_fmul+0x86>
 800053c:	e0ce      	b.n	80006dc <__aeabi_fmul+0x224>
 800053e:	2a01      	cmp	r2, #1
 8000540:	d000      	beq.n	8000544 <__aeabi_fmul+0x8c>
 8000542:	e0ac      	b.n	800069e <__aeabi_fmul+0x1e6>
 8000544:	4011      	ands	r1, r2
 8000546:	2000      	movs	r0, #0
 8000548:	2200      	movs	r2, #0
 800054a:	b2cc      	uxtb	r4, r1
 800054c:	0240      	lsls	r0, r0, #9
 800054e:	05d2      	lsls	r2, r2, #23
 8000550:	0a40      	lsrs	r0, r0, #9
 8000552:	07e4      	lsls	r4, r4, #31
 8000554:	4310      	orrs	r0, r2
 8000556:	4320      	orrs	r0, r4
 8000558:	bc3c      	pop	{r2, r3, r4, r5}
 800055a:	4690      	mov	r8, r2
 800055c:	4699      	mov	r9, r3
 800055e:	46a2      	mov	sl, r4
 8000560:	46ab      	mov	fp, r5
 8000562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000564:	2f00      	cmp	r7, #0
 8000566:	d115      	bne.n	8000594 <__aeabi_fmul+0xdc>
 8000568:	2304      	movs	r3, #4
 800056a:	4699      	mov	r9, r3
 800056c:	3b03      	subs	r3, #3
 800056e:	2600      	movs	r6, #0
 8000570:	469a      	mov	sl, r3
 8000572:	e7b9      	b.n	80004e8 <__aeabi_fmul+0x30>
 8000574:	20ff      	movs	r0, #255	; 0xff
 8000576:	2202      	movs	r2, #2
 8000578:	2d00      	cmp	r5, #0
 800057a:	d0c5      	beq.n	8000508 <__aeabi_fmul+0x50>
 800057c:	2203      	movs	r2, #3
 800057e:	e7c3      	b.n	8000508 <__aeabi_fmul+0x50>
 8000580:	2d00      	cmp	r5, #0
 8000582:	d119      	bne.n	80005b8 <__aeabi_fmul+0x100>
 8000584:	2000      	movs	r0, #0
 8000586:	2201      	movs	r2, #1
 8000588:	e7be      	b.n	8000508 <__aeabi_fmul+0x50>
 800058a:	2401      	movs	r4, #1
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	400c      	ands	r4, r1
 8000590:	2000      	movs	r0, #0
 8000592:	e7db      	b.n	800054c <__aeabi_fmul+0x94>
 8000594:	0038      	movs	r0, r7
 8000596:	f002 f8b7 	bl	8002708 <__clzsi2>
 800059a:	2676      	movs	r6, #118	; 0x76
 800059c:	1f43      	subs	r3, r0, #5
 800059e:	409f      	lsls	r7, r3
 80005a0:	2300      	movs	r3, #0
 80005a2:	4276      	negs	r6, r6
 80005a4:	1a36      	subs	r6, r6, r0
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	e79d      	b.n	80004e8 <__aeabi_fmul+0x30>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	26ff      	movs	r6, #255	; 0xff
 80005b4:	469a      	mov	sl, r3
 80005b6:	e797      	b.n	80004e8 <__aeabi_fmul+0x30>
 80005b8:	0028      	movs	r0, r5
 80005ba:	f002 f8a5 	bl	8002708 <__clzsi2>
 80005be:	1f43      	subs	r3, r0, #5
 80005c0:	409d      	lsls	r5, r3
 80005c2:	2376      	movs	r3, #118	; 0x76
 80005c4:	425b      	negs	r3, r3
 80005c6:	1a18      	subs	r0, r3, r0
 80005c8:	2200      	movs	r2, #0
 80005ca:	e79d      	b.n	8000508 <__aeabi_fmul+0x50>
 80005cc:	2080      	movs	r0, #128	; 0x80
 80005ce:	2400      	movs	r4, #0
 80005d0:	03c0      	lsls	r0, r0, #15
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	e7ba      	b.n	800054c <__aeabi_fmul+0x94>
 80005d6:	003d      	movs	r5, r7
 80005d8:	4652      	mov	r2, sl
 80005da:	e7ab      	b.n	8000534 <__aeabi_fmul+0x7c>
 80005dc:	003d      	movs	r5, r7
 80005de:	0021      	movs	r1, r4
 80005e0:	4652      	mov	r2, sl
 80005e2:	e7a7      	b.n	8000534 <__aeabi_fmul+0x7c>
 80005e4:	0c3b      	lsrs	r3, r7, #16
 80005e6:	469c      	mov	ip, r3
 80005e8:	042a      	lsls	r2, r5, #16
 80005ea:	0c12      	lsrs	r2, r2, #16
 80005ec:	0c2b      	lsrs	r3, r5, #16
 80005ee:	0014      	movs	r4, r2
 80005f0:	4660      	mov	r0, ip
 80005f2:	4665      	mov	r5, ip
 80005f4:	043f      	lsls	r7, r7, #16
 80005f6:	0c3f      	lsrs	r7, r7, #16
 80005f8:	437c      	muls	r4, r7
 80005fa:	4342      	muls	r2, r0
 80005fc:	435d      	muls	r5, r3
 80005fe:	437b      	muls	r3, r7
 8000600:	0c27      	lsrs	r7, r4, #16
 8000602:	189b      	adds	r3, r3, r2
 8000604:	18ff      	adds	r7, r7, r3
 8000606:	42ba      	cmp	r2, r7
 8000608:	d903      	bls.n	8000612 <__aeabi_fmul+0x15a>
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	469c      	mov	ip, r3
 8000610:	4465      	add	r5, ip
 8000612:	0424      	lsls	r4, r4, #16
 8000614:	043a      	lsls	r2, r7, #16
 8000616:	0c24      	lsrs	r4, r4, #16
 8000618:	1912      	adds	r2, r2, r4
 800061a:	0193      	lsls	r3, r2, #6
 800061c:	1e5c      	subs	r4, r3, #1
 800061e:	41a3      	sbcs	r3, r4
 8000620:	0c3f      	lsrs	r7, r7, #16
 8000622:	0e92      	lsrs	r2, r2, #26
 8000624:	197d      	adds	r5, r7, r5
 8000626:	431a      	orrs	r2, r3
 8000628:	01ad      	lsls	r5, r5, #6
 800062a:	4315      	orrs	r5, r2
 800062c:	012b      	lsls	r3, r5, #4
 800062e:	d504      	bpl.n	800063a <__aeabi_fmul+0x182>
 8000630:	2301      	movs	r3, #1
 8000632:	465e      	mov	r6, fp
 8000634:	086a      	lsrs	r2, r5, #1
 8000636:	401d      	ands	r5, r3
 8000638:	4315      	orrs	r5, r2
 800063a:	0032      	movs	r2, r6
 800063c:	327f      	adds	r2, #127	; 0x7f
 800063e:	2a00      	cmp	r2, #0
 8000640:	dd25      	ble.n	800068e <__aeabi_fmul+0x1d6>
 8000642:	076b      	lsls	r3, r5, #29
 8000644:	d004      	beq.n	8000650 <__aeabi_fmul+0x198>
 8000646:	230f      	movs	r3, #15
 8000648:	402b      	ands	r3, r5
 800064a:	2b04      	cmp	r3, #4
 800064c:	d000      	beq.n	8000650 <__aeabi_fmul+0x198>
 800064e:	3504      	adds	r5, #4
 8000650:	012b      	lsls	r3, r5, #4
 8000652:	d503      	bpl.n	800065c <__aeabi_fmul+0x1a4>
 8000654:	0032      	movs	r2, r6
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <__aeabi_fmul+0x23c>)
 8000658:	3280      	adds	r2, #128	; 0x80
 800065a:	401d      	ands	r5, r3
 800065c:	2afe      	cmp	r2, #254	; 0xfe
 800065e:	dc94      	bgt.n	800058a <__aeabi_fmul+0xd2>
 8000660:	2401      	movs	r4, #1
 8000662:	01a8      	lsls	r0, r5, #6
 8000664:	0a40      	lsrs	r0, r0, #9
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	400c      	ands	r4, r1
 800066a:	e76f      	b.n	800054c <__aeabi_fmul+0x94>
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	03c0      	lsls	r0, r0, #15
 8000670:	4207      	tst	r7, r0
 8000672:	d007      	beq.n	8000684 <__aeabi_fmul+0x1cc>
 8000674:	4205      	tst	r5, r0
 8000676:	d105      	bne.n	8000684 <__aeabi_fmul+0x1cc>
 8000678:	4328      	orrs	r0, r5
 800067a:	0240      	lsls	r0, r0, #9
 800067c:	0a40      	lsrs	r0, r0, #9
 800067e:	4644      	mov	r4, r8
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	e763      	b.n	800054c <__aeabi_fmul+0x94>
 8000684:	4338      	orrs	r0, r7
 8000686:	0240      	lsls	r0, r0, #9
 8000688:	0a40      	lsrs	r0, r0, #9
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	e75e      	b.n	800054c <__aeabi_fmul+0x94>
 800068e:	2401      	movs	r4, #1
 8000690:	1aa3      	subs	r3, r4, r2
 8000692:	2b1b      	cmp	r3, #27
 8000694:	dd05      	ble.n	80006a2 <__aeabi_fmul+0x1ea>
 8000696:	400c      	ands	r4, r1
 8000698:	2200      	movs	r2, #0
 800069a:	2000      	movs	r0, #0
 800069c:	e756      	b.n	800054c <__aeabi_fmul+0x94>
 800069e:	465e      	mov	r6, fp
 80006a0:	e7cb      	b.n	800063a <__aeabi_fmul+0x182>
 80006a2:	002a      	movs	r2, r5
 80006a4:	2020      	movs	r0, #32
 80006a6:	40da      	lsrs	r2, r3
 80006a8:	1ac3      	subs	r3, r0, r3
 80006aa:	409d      	lsls	r5, r3
 80006ac:	002b      	movs	r3, r5
 80006ae:	1e5d      	subs	r5, r3, #1
 80006b0:	41ab      	sbcs	r3, r5
 80006b2:	4313      	orrs	r3, r2
 80006b4:	075a      	lsls	r2, r3, #29
 80006b6:	d004      	beq.n	80006c2 <__aeabi_fmul+0x20a>
 80006b8:	220f      	movs	r2, #15
 80006ba:	401a      	ands	r2, r3
 80006bc:	2a04      	cmp	r2, #4
 80006be:	d000      	beq.n	80006c2 <__aeabi_fmul+0x20a>
 80006c0:	3304      	adds	r3, #4
 80006c2:	015a      	lsls	r2, r3, #5
 80006c4:	d504      	bpl.n	80006d0 <__aeabi_fmul+0x218>
 80006c6:	2401      	movs	r4, #1
 80006c8:	2201      	movs	r2, #1
 80006ca:	400c      	ands	r4, r1
 80006cc:	2000      	movs	r0, #0
 80006ce:	e73d      	b.n	800054c <__aeabi_fmul+0x94>
 80006d0:	2401      	movs	r4, #1
 80006d2:	019b      	lsls	r3, r3, #6
 80006d4:	0a58      	lsrs	r0, r3, #9
 80006d6:	400c      	ands	r4, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	e737      	b.n	800054c <__aeabi_fmul+0x94>
 80006dc:	2080      	movs	r0, #128	; 0x80
 80006de:	2401      	movs	r4, #1
 80006e0:	03c0      	lsls	r0, r0, #15
 80006e2:	4328      	orrs	r0, r5
 80006e4:	0240      	lsls	r0, r0, #9
 80006e6:	0a40      	lsrs	r0, r0, #9
 80006e8:	400c      	ands	r4, r1
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	e72e      	b.n	800054c <__aeabi_fmul+0x94>
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	08005178 	.word	0x08005178
 80006f4:	f7ffffff 	.word	0xf7ffffff

080006f8 <__aeabi_fsub>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	464f      	mov	r7, r9
 80006fc:	46d6      	mov	lr, sl
 80006fe:	4646      	mov	r6, r8
 8000700:	0044      	lsls	r4, r0, #1
 8000702:	b5c0      	push	{r6, r7, lr}
 8000704:	0fc2      	lsrs	r2, r0, #31
 8000706:	0247      	lsls	r7, r0, #9
 8000708:	0248      	lsls	r0, r1, #9
 800070a:	0a40      	lsrs	r0, r0, #9
 800070c:	4684      	mov	ip, r0
 800070e:	4666      	mov	r6, ip
 8000710:	0a7b      	lsrs	r3, r7, #9
 8000712:	0048      	lsls	r0, r1, #1
 8000714:	0fc9      	lsrs	r1, r1, #31
 8000716:	469a      	mov	sl, r3
 8000718:	0e24      	lsrs	r4, r4, #24
 800071a:	0015      	movs	r5, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	0e00      	lsrs	r0, r0, #24
 8000720:	4689      	mov	r9, r1
 8000722:	00f6      	lsls	r6, r6, #3
 8000724:	28ff      	cmp	r0, #255	; 0xff
 8000726:	d100      	bne.n	800072a <__aeabi_fsub+0x32>
 8000728:	e08f      	b.n	800084a <__aeabi_fsub+0x152>
 800072a:	2101      	movs	r1, #1
 800072c:	464f      	mov	r7, r9
 800072e:	404f      	eors	r7, r1
 8000730:	0039      	movs	r1, r7
 8000732:	4291      	cmp	r1, r2
 8000734:	d066      	beq.n	8000804 <__aeabi_fsub+0x10c>
 8000736:	1a22      	subs	r2, r4, r0
 8000738:	2a00      	cmp	r2, #0
 800073a:	dc00      	bgt.n	800073e <__aeabi_fsub+0x46>
 800073c:	e09d      	b.n	800087a <__aeabi_fsub+0x182>
 800073e:	2800      	cmp	r0, #0
 8000740:	d13d      	bne.n	80007be <__aeabi_fsub+0xc6>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fsub+0x50>
 8000746:	e08b      	b.n	8000860 <__aeabi_fsub+0x168>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2900      	cmp	r1, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fsub+0x58>
 800074e:	e0b5      	b.n	80008bc <__aeabi_fsub+0x1c4>
 8000750:	2401      	movs	r4, #1
 8000752:	1b9b      	subs	r3, r3, r6
 8000754:	015a      	lsls	r2, r3, #5
 8000756:	d544      	bpl.n	80007e2 <__aeabi_fsub+0xea>
 8000758:	019b      	lsls	r3, r3, #6
 800075a:	099f      	lsrs	r7, r3, #6
 800075c:	0038      	movs	r0, r7
 800075e:	f001 ffd3 	bl	8002708 <__clzsi2>
 8000762:	3805      	subs	r0, #5
 8000764:	4087      	lsls	r7, r0
 8000766:	4284      	cmp	r4, r0
 8000768:	dd00      	ble.n	800076c <__aeabi_fsub+0x74>
 800076a:	e096      	b.n	800089a <__aeabi_fsub+0x1a2>
 800076c:	1b04      	subs	r4, r0, r4
 800076e:	003a      	movs	r2, r7
 8000770:	2020      	movs	r0, #32
 8000772:	3401      	adds	r4, #1
 8000774:	40e2      	lsrs	r2, r4
 8000776:	1b04      	subs	r4, r0, r4
 8000778:	40a7      	lsls	r7, r4
 800077a:	003b      	movs	r3, r7
 800077c:	1e5f      	subs	r7, r3, #1
 800077e:	41bb      	sbcs	r3, r7
 8000780:	2400      	movs	r4, #0
 8000782:	4313      	orrs	r3, r2
 8000784:	075a      	lsls	r2, r3, #29
 8000786:	d004      	beq.n	8000792 <__aeabi_fsub+0x9a>
 8000788:	220f      	movs	r2, #15
 800078a:	401a      	ands	r2, r3
 800078c:	2a04      	cmp	r2, #4
 800078e:	d000      	beq.n	8000792 <__aeabi_fsub+0x9a>
 8000790:	3304      	adds	r3, #4
 8000792:	015a      	lsls	r2, r3, #5
 8000794:	d527      	bpl.n	80007e6 <__aeabi_fsub+0xee>
 8000796:	3401      	adds	r4, #1
 8000798:	2cff      	cmp	r4, #255	; 0xff
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0xa6>
 800079c:	e079      	b.n	8000892 <__aeabi_fsub+0x19a>
 800079e:	2201      	movs	r2, #1
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	0a5b      	lsrs	r3, r3, #9
 80007a4:	b2e4      	uxtb	r4, r4
 80007a6:	402a      	ands	r2, r5
 80007a8:	025b      	lsls	r3, r3, #9
 80007aa:	05e4      	lsls	r4, r4, #23
 80007ac:	0a58      	lsrs	r0, r3, #9
 80007ae:	07d2      	lsls	r2, r2, #31
 80007b0:	4320      	orrs	r0, r4
 80007b2:	4310      	orrs	r0, r2
 80007b4:	bc1c      	pop	{r2, r3, r4}
 80007b6:	4690      	mov	r8, r2
 80007b8:	4699      	mov	r9, r3
 80007ba:	46a2      	mov	sl, r4
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007be:	2cff      	cmp	r4, #255	; 0xff
 80007c0:	d0e0      	beq.n	8000784 <__aeabi_fsub+0x8c>
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	04c9      	lsls	r1, r1, #19
 80007c6:	430e      	orrs	r6, r1
 80007c8:	2a1b      	cmp	r2, #27
 80007ca:	dc7b      	bgt.n	80008c4 <__aeabi_fsub+0x1cc>
 80007cc:	0031      	movs	r1, r6
 80007ce:	2020      	movs	r0, #32
 80007d0:	40d1      	lsrs	r1, r2
 80007d2:	1a82      	subs	r2, r0, r2
 80007d4:	4096      	lsls	r6, r2
 80007d6:	1e72      	subs	r2, r6, #1
 80007d8:	4196      	sbcs	r6, r2
 80007da:	430e      	orrs	r6, r1
 80007dc:	1b9b      	subs	r3, r3, r6
 80007de:	015a      	lsls	r2, r3, #5
 80007e0:	d4ba      	bmi.n	8000758 <__aeabi_fsub+0x60>
 80007e2:	075a      	lsls	r2, r3, #29
 80007e4:	d1d0      	bne.n	8000788 <__aeabi_fsub+0x90>
 80007e6:	2201      	movs	r2, #1
 80007e8:	08df      	lsrs	r7, r3, #3
 80007ea:	402a      	ands	r2, r5
 80007ec:	2cff      	cmp	r4, #255	; 0xff
 80007ee:	d133      	bne.n	8000858 <__aeabi_fsub+0x160>
 80007f0:	2f00      	cmp	r7, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0xfe>
 80007f4:	e0a8      	b.n	8000948 <__aeabi_fsub+0x250>
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	03db      	lsls	r3, r3, #15
 80007fa:	433b      	orrs	r3, r7
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	0a5b      	lsrs	r3, r3, #9
 8000800:	24ff      	movs	r4, #255	; 0xff
 8000802:	e7d1      	b.n	80007a8 <__aeabi_fsub+0xb0>
 8000804:	1a21      	subs	r1, r4, r0
 8000806:	2900      	cmp	r1, #0
 8000808:	dd4c      	ble.n	80008a4 <__aeabi_fsub+0x1ac>
 800080a:	2800      	cmp	r0, #0
 800080c:	d02a      	beq.n	8000864 <__aeabi_fsub+0x16c>
 800080e:	2cff      	cmp	r4, #255	; 0xff
 8000810:	d0b8      	beq.n	8000784 <__aeabi_fsub+0x8c>
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	04c0      	lsls	r0, r0, #19
 8000816:	4306      	orrs	r6, r0
 8000818:	291b      	cmp	r1, #27
 800081a:	dd00      	ble.n	800081e <__aeabi_fsub+0x126>
 800081c:	e0af      	b.n	800097e <__aeabi_fsub+0x286>
 800081e:	0030      	movs	r0, r6
 8000820:	2720      	movs	r7, #32
 8000822:	40c8      	lsrs	r0, r1
 8000824:	1a79      	subs	r1, r7, r1
 8000826:	408e      	lsls	r6, r1
 8000828:	1e71      	subs	r1, r6, #1
 800082a:	418e      	sbcs	r6, r1
 800082c:	4306      	orrs	r6, r0
 800082e:	199b      	adds	r3, r3, r6
 8000830:	0159      	lsls	r1, r3, #5
 8000832:	d5d6      	bpl.n	80007e2 <__aeabi_fsub+0xea>
 8000834:	3401      	adds	r4, #1
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d100      	bne.n	800083c <__aeabi_fsub+0x144>
 800083a:	e085      	b.n	8000948 <__aeabi_fsub+0x250>
 800083c:	2201      	movs	r2, #1
 800083e:	497a      	ldr	r1, [pc, #488]	; (8000a28 <__aeabi_fsub+0x330>)
 8000840:	401a      	ands	r2, r3
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	400b      	ands	r3, r1
 8000846:	4313      	orrs	r3, r2
 8000848:	e79c      	b.n	8000784 <__aeabi_fsub+0x8c>
 800084a:	2e00      	cmp	r6, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x158>
 800084e:	e770      	b.n	8000732 <__aeabi_fsub+0x3a>
 8000850:	e76b      	b.n	800072a <__aeabi_fsub+0x32>
 8000852:	1e3b      	subs	r3, r7, #0
 8000854:	d1c5      	bne.n	80007e2 <__aeabi_fsub+0xea>
 8000856:	2200      	movs	r2, #0
 8000858:	027b      	lsls	r3, r7, #9
 800085a:	0a5b      	lsrs	r3, r3, #9
 800085c:	b2e4      	uxtb	r4, r4
 800085e:	e7a3      	b.n	80007a8 <__aeabi_fsub+0xb0>
 8000860:	0014      	movs	r4, r2
 8000862:	e78f      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d04d      	beq.n	8000904 <__aeabi_fsub+0x20c>
 8000868:	1e48      	subs	r0, r1, #1
 800086a:	2800      	cmp	r0, #0
 800086c:	d157      	bne.n	800091e <__aeabi_fsub+0x226>
 800086e:	199b      	adds	r3, r3, r6
 8000870:	2401      	movs	r4, #1
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d5b5      	bpl.n	80007e2 <__aeabi_fsub+0xea>
 8000876:	2402      	movs	r4, #2
 8000878:	e7e0      	b.n	800083c <__aeabi_fsub+0x144>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d125      	bne.n	80008ca <__aeabi_fsub+0x1d2>
 800087e:	1c62      	adds	r2, r4, #1
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	2a01      	cmp	r2, #1
 8000884:	dd72      	ble.n	800096c <__aeabi_fsub+0x274>
 8000886:	1b9f      	subs	r7, r3, r6
 8000888:	017a      	lsls	r2, r7, #5
 800088a:	d535      	bpl.n	80008f8 <__aeabi_fsub+0x200>
 800088c:	1af7      	subs	r7, r6, r3
 800088e:	000d      	movs	r5, r1
 8000890:	e764      	b.n	800075c <__aeabi_fsub+0x64>
 8000892:	2201      	movs	r2, #1
 8000894:	2300      	movs	r3, #0
 8000896:	402a      	ands	r2, r5
 8000898:	e786      	b.n	80007a8 <__aeabi_fsub+0xb0>
 800089a:	003b      	movs	r3, r7
 800089c:	4a63      	ldr	r2, [pc, #396]	; (8000a2c <__aeabi_fsub+0x334>)
 800089e:	1a24      	subs	r4, r4, r0
 80008a0:	4013      	ands	r3, r2
 80008a2:	e76f      	b.n	8000784 <__aeabi_fsub+0x8c>
 80008a4:	2900      	cmp	r1, #0
 80008a6:	d16c      	bne.n	8000982 <__aeabi_fsub+0x28a>
 80008a8:	1c61      	adds	r1, r4, #1
 80008aa:	b2c8      	uxtb	r0, r1
 80008ac:	2801      	cmp	r0, #1
 80008ae:	dd4e      	ble.n	800094e <__aeabi_fsub+0x256>
 80008b0:	29ff      	cmp	r1, #255	; 0xff
 80008b2:	d049      	beq.n	8000948 <__aeabi_fsub+0x250>
 80008b4:	199b      	adds	r3, r3, r6
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	000c      	movs	r4, r1
 80008ba:	e763      	b.n	8000784 <__aeabi_fsub+0x8c>
 80008bc:	2aff      	cmp	r2, #255	; 0xff
 80008be:	d041      	beq.n	8000944 <__aeabi_fsub+0x24c>
 80008c0:	000a      	movs	r2, r1
 80008c2:	e781      	b.n	80007c8 <__aeabi_fsub+0xd0>
 80008c4:	2601      	movs	r6, #1
 80008c6:	1b9b      	subs	r3, r3, r6
 80008c8:	e789      	b.n	80007de <__aeabi_fsub+0xe6>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d01c      	beq.n	8000908 <__aeabi_fsub+0x210>
 80008ce:	28ff      	cmp	r0, #255	; 0xff
 80008d0:	d021      	beq.n	8000916 <__aeabi_fsub+0x21e>
 80008d2:	2480      	movs	r4, #128	; 0x80
 80008d4:	04e4      	lsls	r4, r4, #19
 80008d6:	4252      	negs	r2, r2
 80008d8:	4323      	orrs	r3, r4
 80008da:	2a1b      	cmp	r2, #27
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_fsub+0x1e8>
 80008de:	e096      	b.n	8000a0e <__aeabi_fsub+0x316>
 80008e0:	001c      	movs	r4, r3
 80008e2:	2520      	movs	r5, #32
 80008e4:	40d4      	lsrs	r4, r2
 80008e6:	1aaa      	subs	r2, r5, r2
 80008e8:	4093      	lsls	r3, r2
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4193      	sbcs	r3, r2
 80008ee:	4323      	orrs	r3, r4
 80008f0:	1af3      	subs	r3, r6, r3
 80008f2:	0004      	movs	r4, r0
 80008f4:	000d      	movs	r5, r1
 80008f6:	e72d      	b.n	8000754 <__aeabi_fsub+0x5c>
 80008f8:	2f00      	cmp	r7, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_fsub+0x206>
 80008fc:	e72e      	b.n	800075c <__aeabi_fsub+0x64>
 80008fe:	2200      	movs	r2, #0
 8000900:	2400      	movs	r4, #0
 8000902:	e7a9      	b.n	8000858 <__aeabi_fsub+0x160>
 8000904:	000c      	movs	r4, r1
 8000906:	e73d      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d058      	beq.n	80009be <__aeabi_fsub+0x2c6>
 800090c:	43d2      	mvns	r2, r2
 800090e:	2a00      	cmp	r2, #0
 8000910:	d0ee      	beq.n	80008f0 <__aeabi_fsub+0x1f8>
 8000912:	28ff      	cmp	r0, #255	; 0xff
 8000914:	d1e1      	bne.n	80008da <__aeabi_fsub+0x1e2>
 8000916:	0033      	movs	r3, r6
 8000918:	24ff      	movs	r4, #255	; 0xff
 800091a:	000d      	movs	r5, r1
 800091c:	e732      	b.n	8000784 <__aeabi_fsub+0x8c>
 800091e:	29ff      	cmp	r1, #255	; 0xff
 8000920:	d010      	beq.n	8000944 <__aeabi_fsub+0x24c>
 8000922:	0001      	movs	r1, r0
 8000924:	e778      	b.n	8000818 <__aeabi_fsub+0x120>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d06e      	beq.n	8000a08 <__aeabi_fsub+0x310>
 800092a:	24ff      	movs	r4, #255	; 0xff
 800092c:	2e00      	cmp	r6, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fsub+0x23a>
 8000930:	e728      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	4651      	mov	r1, sl
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	4211      	tst	r1, r2
 800093a:	d003      	beq.n	8000944 <__aeabi_fsub+0x24c>
 800093c:	4661      	mov	r1, ip
 800093e:	4211      	tst	r1, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_fsub+0x24c>
 8000942:	0033      	movs	r3, r6
 8000944:	24ff      	movs	r4, #255	; 0xff
 8000946:	e71d      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000948:	24ff      	movs	r4, #255	; 0xff
 800094a:	2300      	movs	r3, #0
 800094c:	e72c      	b.n	80007a8 <__aeabi_fsub+0xb0>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d1e9      	bne.n	8000926 <__aeabi_fsub+0x22e>
 8000952:	2b00      	cmp	r3, #0
 8000954:	d063      	beq.n	8000a1e <__aeabi_fsub+0x326>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x264>
 800095a:	e713      	b.n	8000784 <__aeabi_fsub+0x8c>
 800095c:	199b      	adds	r3, r3, r6
 800095e:	015a      	lsls	r2, r3, #5
 8000960:	d400      	bmi.n	8000964 <__aeabi_fsub+0x26c>
 8000962:	e73e      	b.n	80007e2 <__aeabi_fsub+0xea>
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <__aeabi_fsub+0x334>)
 8000966:	000c      	movs	r4, r1
 8000968:	4013      	ands	r3, r2
 800096a:	e70b      	b.n	8000784 <__aeabi_fsub+0x8c>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d11e      	bne.n	80009ae <__aeabi_fsub+0x2b6>
 8000970:	2b00      	cmp	r3, #0
 8000972:	d12f      	bne.n	80009d4 <__aeabi_fsub+0x2dc>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d04f      	beq.n	8000a18 <__aeabi_fsub+0x320>
 8000978:	0033      	movs	r3, r6
 800097a:	000d      	movs	r5, r1
 800097c:	e702      	b.n	8000784 <__aeabi_fsub+0x8c>
 800097e:	2601      	movs	r6, #1
 8000980:	e755      	b.n	800082e <__aeabi_fsub+0x136>
 8000982:	2c00      	cmp	r4, #0
 8000984:	d11f      	bne.n	80009c6 <__aeabi_fsub+0x2ce>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d043      	beq.n	8000a12 <__aeabi_fsub+0x31a>
 800098a:	43c9      	mvns	r1, r1
 800098c:	2900      	cmp	r1, #0
 800098e:	d00b      	beq.n	80009a8 <__aeabi_fsub+0x2b0>
 8000990:	28ff      	cmp	r0, #255	; 0xff
 8000992:	d039      	beq.n	8000a08 <__aeabi_fsub+0x310>
 8000994:	291b      	cmp	r1, #27
 8000996:	dc44      	bgt.n	8000a22 <__aeabi_fsub+0x32a>
 8000998:	001c      	movs	r4, r3
 800099a:	2720      	movs	r7, #32
 800099c:	40cc      	lsrs	r4, r1
 800099e:	1a79      	subs	r1, r7, r1
 80009a0:	408b      	lsls	r3, r1
 80009a2:	1e59      	subs	r1, r3, #1
 80009a4:	418b      	sbcs	r3, r1
 80009a6:	4323      	orrs	r3, r4
 80009a8:	199b      	adds	r3, r3, r6
 80009aa:	0004      	movs	r4, r0
 80009ac:	e740      	b.n	8000830 <__aeabi_fsub+0x138>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d11a      	bne.n	80009e8 <__aeabi_fsub+0x2f0>
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d124      	bne.n	8000a00 <__aeabi_fsub+0x308>
 80009b6:	2780      	movs	r7, #128	; 0x80
 80009b8:	2200      	movs	r2, #0
 80009ba:	03ff      	lsls	r7, r7, #15
 80009bc:	e71b      	b.n	80007f6 <__aeabi_fsub+0xfe>
 80009be:	0033      	movs	r3, r6
 80009c0:	0004      	movs	r4, r0
 80009c2:	000d      	movs	r5, r1
 80009c4:	e6de      	b.n	8000784 <__aeabi_fsub+0x8c>
 80009c6:	28ff      	cmp	r0, #255	; 0xff
 80009c8:	d01e      	beq.n	8000a08 <__aeabi_fsub+0x310>
 80009ca:	2480      	movs	r4, #128	; 0x80
 80009cc:	04e4      	lsls	r4, r4, #19
 80009ce:	4249      	negs	r1, r1
 80009d0:	4323      	orrs	r3, r4
 80009d2:	e7df      	b.n	8000994 <__aeabi_fsub+0x29c>
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x2e2>
 80009d8:	e6d4      	b.n	8000784 <__aeabi_fsub+0x8c>
 80009da:	1b9f      	subs	r7, r3, r6
 80009dc:	017a      	lsls	r2, r7, #5
 80009de:	d400      	bmi.n	80009e2 <__aeabi_fsub+0x2ea>
 80009e0:	e737      	b.n	8000852 <__aeabi_fsub+0x15a>
 80009e2:	1af3      	subs	r3, r6, r3
 80009e4:	000d      	movs	r5, r1
 80009e6:	e6cd      	b.n	8000784 <__aeabi_fsub+0x8c>
 80009e8:	24ff      	movs	r4, #255	; 0xff
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fsub+0x2f8>
 80009ee:	e6c9      	b.n	8000784 <__aeabi_fsub+0x8c>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4650      	mov	r0, sl
 80009f4:	03d2      	lsls	r2, r2, #15
 80009f6:	4210      	tst	r0, r2
 80009f8:	d0a4      	beq.n	8000944 <__aeabi_fsub+0x24c>
 80009fa:	4660      	mov	r0, ip
 80009fc:	4210      	tst	r0, r2
 80009fe:	d1a1      	bne.n	8000944 <__aeabi_fsub+0x24c>
 8000a00:	0033      	movs	r3, r6
 8000a02:	000d      	movs	r5, r1
 8000a04:	24ff      	movs	r4, #255	; 0xff
 8000a06:	e6bd      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000a08:	0033      	movs	r3, r6
 8000a0a:	24ff      	movs	r4, #255	; 0xff
 8000a0c:	e6ba      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e76e      	b.n	80008f0 <__aeabi_fsub+0x1f8>
 8000a12:	0033      	movs	r3, r6
 8000a14:	0004      	movs	r4, r0
 8000a16:	e6b5      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000a18:	2700      	movs	r7, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e71c      	b.n	8000858 <__aeabi_fsub+0x160>
 8000a1e:	0033      	movs	r3, r6
 8000a20:	e6b0      	b.n	8000784 <__aeabi_fsub+0x8c>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e7c0      	b.n	80009a8 <__aeabi_fsub+0x2b0>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	7dffffff 	.word	0x7dffffff
 8000a2c:	fbffffff 	.word	0xfbffffff

08000a30 <__aeabi_f2iz>:
 8000a30:	0241      	lsls	r1, r0, #9
 8000a32:	0043      	lsls	r3, r0, #1
 8000a34:	0fc2      	lsrs	r2, r0, #31
 8000a36:	0a49      	lsrs	r1, r1, #9
 8000a38:	0e1b      	lsrs	r3, r3, #24
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	2b7e      	cmp	r3, #126	; 0x7e
 8000a3e:	dd0d      	ble.n	8000a5c <__aeabi_f2iz+0x2c>
 8000a40:	2b9d      	cmp	r3, #157	; 0x9d
 8000a42:	dc0c      	bgt.n	8000a5e <__aeabi_f2iz+0x2e>
 8000a44:	2080      	movs	r0, #128	; 0x80
 8000a46:	0400      	lsls	r0, r0, #16
 8000a48:	4301      	orrs	r1, r0
 8000a4a:	2b95      	cmp	r3, #149	; 0x95
 8000a4c:	dc0a      	bgt.n	8000a64 <__aeabi_f2iz+0x34>
 8000a4e:	2096      	movs	r0, #150	; 0x96
 8000a50:	1ac3      	subs	r3, r0, r3
 8000a52:	40d9      	lsrs	r1, r3
 8000a54:	4248      	negs	r0, r1
 8000a56:	2a00      	cmp	r2, #0
 8000a58:	d100      	bne.n	8000a5c <__aeabi_f2iz+0x2c>
 8000a5a:	0008      	movs	r0, r1
 8000a5c:	4770      	bx	lr
 8000a5e:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <__aeabi_f2iz+0x3c>)
 8000a60:	18d0      	adds	r0, r2, r3
 8000a62:	e7fb      	b.n	8000a5c <__aeabi_f2iz+0x2c>
 8000a64:	3b96      	subs	r3, #150	; 0x96
 8000a66:	4099      	lsls	r1, r3
 8000a68:	e7f4      	b.n	8000a54 <__aeabi_f2iz+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	7fffffff 	.word	0x7fffffff

08000a70 <__aeabi_i2f>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d030      	beq.n	8000ad8 <__aeabi_i2f+0x68>
 8000a76:	17c3      	asrs	r3, r0, #31
 8000a78:	18c4      	adds	r4, r0, r3
 8000a7a:	405c      	eors	r4, r3
 8000a7c:	0fc5      	lsrs	r5, r0, #31
 8000a7e:	0020      	movs	r0, r4
 8000a80:	f001 fe42 	bl	8002708 <__clzsi2>
 8000a84:	239e      	movs	r3, #158	; 0x9e
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	2b96      	cmp	r3, #150	; 0x96
 8000a8a:	dc0d      	bgt.n	8000aa8 <__aeabi_i2f+0x38>
 8000a8c:	2296      	movs	r2, #150	; 0x96
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4094      	lsls	r4, r2
 8000a92:	002a      	movs	r2, r5
 8000a94:	0264      	lsls	r4, r4, #9
 8000a96:	0a64      	lsrs	r4, r4, #9
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	0264      	lsls	r4, r4, #9
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	0a60      	lsrs	r0, r4, #9
 8000aa0:	07d2      	lsls	r2, r2, #31
 8000aa2:	4318      	orrs	r0, r3
 8000aa4:	4310      	orrs	r0, r2
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2b99      	cmp	r3, #153	; 0x99
 8000aaa:	dc19      	bgt.n	8000ae0 <__aeabi_i2f+0x70>
 8000aac:	2299      	movs	r2, #153	; 0x99
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	dd29      	ble.n	8000b08 <__aeabi_i2f+0x98>
 8000ab4:	4094      	lsls	r4, r2
 8000ab6:	0022      	movs	r2, r4
 8000ab8:	4c14      	ldr	r4, [pc, #80]	; (8000b0c <__aeabi_i2f+0x9c>)
 8000aba:	4014      	ands	r4, r2
 8000abc:	0751      	lsls	r1, r2, #29
 8000abe:	d004      	beq.n	8000aca <__aeabi_i2f+0x5a>
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	2a04      	cmp	r2, #4
 8000ac6:	d000      	beq.n	8000aca <__aeabi_i2f+0x5a>
 8000ac8:	3404      	adds	r4, #4
 8000aca:	0162      	lsls	r2, r4, #5
 8000acc:	d413      	bmi.n	8000af6 <__aeabi_i2f+0x86>
 8000ace:	01a4      	lsls	r4, r4, #6
 8000ad0:	0a64      	lsrs	r4, r4, #9
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	002a      	movs	r2, r5
 8000ad6:	e7e0      	b.n	8000a9a <__aeabi_i2f+0x2a>
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2300      	movs	r3, #0
 8000adc:	2400      	movs	r4, #0
 8000ade:	e7dc      	b.n	8000a9a <__aeabi_i2f+0x2a>
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	1a12      	subs	r2, r2, r0
 8000ae6:	40d1      	lsrs	r1, r2
 8000ae8:	22b9      	movs	r2, #185	; 0xb9
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	4094      	lsls	r4, r2
 8000aee:	1e62      	subs	r2, r4, #1
 8000af0:	4194      	sbcs	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	e7da      	b.n	8000aac <__aeabi_i2f+0x3c>
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <__aeabi_i2f+0x9c>)
 8000af8:	002a      	movs	r2, r5
 8000afa:	401c      	ands	r4, r3
 8000afc:	239f      	movs	r3, #159	; 0x9f
 8000afe:	01a4      	lsls	r4, r4, #6
 8000b00:	1a1b      	subs	r3, r3, r0
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	e7c8      	b.n	8000a9a <__aeabi_i2f+0x2a>
 8000b08:	0022      	movs	r2, r4
 8000b0a:	e7d5      	b.n	8000ab8 <__aeabi_i2f+0x48>
 8000b0c:	fbffffff 	.word	0xfbffffff

08000b10 <__aeabi_ui2f>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	1e04      	subs	r4, r0, #0
 8000b14:	d027      	beq.n	8000b66 <__aeabi_ui2f+0x56>
 8000b16:	f001 fdf7 	bl	8002708 <__clzsi2>
 8000b1a:	239e      	movs	r3, #158	; 0x9e
 8000b1c:	1a1b      	subs	r3, r3, r0
 8000b1e:	2b96      	cmp	r3, #150	; 0x96
 8000b20:	dc0a      	bgt.n	8000b38 <__aeabi_ui2f+0x28>
 8000b22:	2296      	movs	r2, #150	; 0x96
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	4094      	lsls	r4, r2
 8000b28:	0264      	lsls	r4, r4, #9
 8000b2a:	0a64      	lsrs	r4, r4, #9
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	0264      	lsls	r4, r4, #9
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	0a60      	lsrs	r0, r4, #9
 8000b34:	4318      	orrs	r0, r3
 8000b36:	bd10      	pop	{r4, pc}
 8000b38:	2b99      	cmp	r3, #153	; 0x99
 8000b3a:	dc17      	bgt.n	8000b6c <__aeabi_ui2f+0x5c>
 8000b3c:	2299      	movs	r2, #153	; 0x99
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	dd27      	ble.n	8000b94 <__aeabi_ui2f+0x84>
 8000b44:	4094      	lsls	r4, r2
 8000b46:	0022      	movs	r2, r4
 8000b48:	4c13      	ldr	r4, [pc, #76]	; (8000b98 <__aeabi_ui2f+0x88>)
 8000b4a:	4014      	ands	r4, r2
 8000b4c:	0751      	lsls	r1, r2, #29
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_ui2f+0x4a>
 8000b50:	210f      	movs	r1, #15
 8000b52:	400a      	ands	r2, r1
 8000b54:	2a04      	cmp	r2, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_ui2f+0x4a>
 8000b58:	3404      	adds	r4, #4
 8000b5a:	0162      	lsls	r2, r4, #5
 8000b5c:	d412      	bmi.n	8000b84 <__aeabi_ui2f+0x74>
 8000b5e:	01a4      	lsls	r4, r4, #6
 8000b60:	0a64      	lsrs	r4, r4, #9
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	e7e3      	b.n	8000b2e <__aeabi_ui2f+0x1e>
 8000b66:	2300      	movs	r3, #0
 8000b68:	2400      	movs	r4, #0
 8000b6a:	e7e0      	b.n	8000b2e <__aeabi_ui2f+0x1e>
 8000b6c:	22b9      	movs	r2, #185	; 0xb9
 8000b6e:	0021      	movs	r1, r4
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	418a      	sbcs	r2, r1
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	1a09      	subs	r1, r1, r0
 8000b7e:	40cc      	lsrs	r4, r1
 8000b80:	4314      	orrs	r4, r2
 8000b82:	e7db      	b.n	8000b3c <__aeabi_ui2f+0x2c>
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__aeabi_ui2f+0x88>)
 8000b86:	401c      	ands	r4, r3
 8000b88:	239f      	movs	r3, #159	; 0x9f
 8000b8a:	01a4      	lsls	r4, r4, #6
 8000b8c:	1a1b      	subs	r3, r3, r0
 8000b8e:	0a64      	lsrs	r4, r4, #9
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	e7cc      	b.n	8000b2e <__aeabi_ui2f+0x1e>
 8000b94:	0022      	movs	r2, r4
 8000b96:	e7d7      	b.n	8000b48 <__aeabi_ui2f+0x38>
 8000b98:	fbffffff 	.word	0xfbffffff

08000b9c <__aeabi_dadd>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	46de      	mov	lr, fp
 8000ba2:	4657      	mov	r7, sl
 8000ba4:	464e      	mov	r6, r9
 8000ba6:	030c      	lsls	r4, r1, #12
 8000ba8:	b5e0      	push	{r5, r6, r7, lr}
 8000baa:	004e      	lsls	r6, r1, #1
 8000bac:	0fc9      	lsrs	r1, r1, #31
 8000bae:	4688      	mov	r8, r1
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	0a61      	lsrs	r1, r4, #9
 8000bb4:	0f44      	lsrs	r4, r0, #29
 8000bb6:	430c      	orrs	r4, r1
 8000bb8:	00c7      	lsls	r7, r0, #3
 8000bba:	0319      	lsls	r1, r3, #12
 8000bbc:	0058      	lsls	r0, r3, #1
 8000bbe:	0fdb      	lsrs	r3, r3, #31
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	0a4b      	lsrs	r3, r1, #9
 8000bc4:	0f51      	lsrs	r1, r2, #29
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	0d76      	lsrs	r6, r6, #21
 8000bca:	0d40      	lsrs	r0, r0, #21
 8000bcc:	0019      	movs	r1, r3
 8000bce:	00d2      	lsls	r2, r2, #3
 8000bd0:	45d8      	cmp	r8, fp
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x3a>
 8000bd4:	e0ae      	b.n	8000d34 <__aeabi_dadd+0x198>
 8000bd6:	1a35      	subs	r5, r6, r0
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	dc00      	bgt.n	8000bde <__aeabi_dadd+0x42>
 8000bdc:	e0f6      	b.n	8000dcc <__aeabi_dadd+0x230>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d10f      	bne.n	8000c02 <__aeabi_dadd+0x66>
 8000be2:	4313      	orrs	r3, r2
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x4c>
 8000be6:	e0db      	b.n	8000da0 <__aeabi_dadd+0x204>
 8000be8:	1e6b      	subs	r3, r5, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dadd+0x54>
 8000bee:	e137      	b.n	8000e60 <__aeabi_dadd+0x2c4>
 8000bf0:	1aba      	subs	r2, r7, r2
 8000bf2:	4297      	cmp	r7, r2
 8000bf4:	41bf      	sbcs	r7, r7
 8000bf6:	1a64      	subs	r4, r4, r1
 8000bf8:	427f      	negs	r7, r7
 8000bfa:	1be4      	subs	r4, r4, r7
 8000bfc:	2601      	movs	r6, #1
 8000bfe:	0017      	movs	r7, r2
 8000c00:	e024      	b.n	8000c4c <__aeabi_dadd+0xb0>
 8000c02:	4bc6      	ldr	r3, [pc, #792]	; (8000f1c <__aeabi_dadd+0x380>)
 8000c04:	429e      	cmp	r6, r3
 8000c06:	d04d      	beq.n	8000ca4 <__aeabi_dadd+0x108>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	041b      	lsls	r3, r3, #16
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	2d38      	cmp	r5, #56	; 0x38
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dadd+0x78>
 8000c12:	e107      	b.n	8000e24 <__aeabi_dadd+0x288>
 8000c14:	2d1f      	cmp	r5, #31
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dadd+0x7e>
 8000c18:	e138      	b.n	8000e8c <__aeabi_dadd+0x2f0>
 8000c1a:	2020      	movs	r0, #32
 8000c1c:	1b43      	subs	r3, r0, r5
 8000c1e:	469a      	mov	sl, r3
 8000c20:	000b      	movs	r3, r1
 8000c22:	4650      	mov	r0, sl
 8000c24:	4083      	lsls	r3, r0
 8000c26:	4699      	mov	r9, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	40eb      	lsrs	r3, r5
 8000c2e:	4318      	orrs	r0, r3
 8000c30:	0003      	movs	r3, r0
 8000c32:	4650      	mov	r0, sl
 8000c34:	4082      	lsls	r2, r0
 8000c36:	1e50      	subs	r0, r2, #1
 8000c38:	4182      	sbcs	r2, r0
 8000c3a:	40e9      	lsrs	r1, r5
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	1aba      	subs	r2, r7, r2
 8000c40:	1a61      	subs	r1, r4, r1
 8000c42:	4297      	cmp	r7, r2
 8000c44:	41a4      	sbcs	r4, r4
 8000c46:	0017      	movs	r7, r2
 8000c48:	4264      	negs	r4, r4
 8000c4a:	1b0c      	subs	r4, r1, r4
 8000c4c:	0223      	lsls	r3, r4, #8
 8000c4e:	d562      	bpl.n	8000d16 <__aeabi_dadd+0x17a>
 8000c50:	0264      	lsls	r4, r4, #9
 8000c52:	0a65      	lsrs	r5, r4, #9
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0xbe>
 8000c58:	e0df      	b.n	8000e1a <__aeabi_dadd+0x27e>
 8000c5a:	0028      	movs	r0, r5
 8000c5c:	f001 fd54 	bl	8002708 <__clzsi2>
 8000c60:	0003      	movs	r3, r0
 8000c62:	3b08      	subs	r3, #8
 8000c64:	2b1f      	cmp	r3, #31
 8000c66:	dd00      	ble.n	8000c6a <__aeabi_dadd+0xce>
 8000c68:	e0d2      	b.n	8000e10 <__aeabi_dadd+0x274>
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	003c      	movs	r4, r7
 8000c6e:	1ad2      	subs	r2, r2, r3
 8000c70:	409d      	lsls	r5, r3
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	409f      	lsls	r7, r3
 8000c76:	4325      	orrs	r5, r4
 8000c78:	429e      	cmp	r6, r3
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0xe2>
 8000c7c:	e0c4      	b.n	8000e08 <__aeabi_dadd+0x26c>
 8000c7e:	1b9e      	subs	r6, r3, r6
 8000c80:	1c73      	adds	r3, r6, #1
 8000c82:	2b1f      	cmp	r3, #31
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_dadd+0xec>
 8000c86:	e0f1      	b.n	8000e6c <__aeabi_dadd+0x2d0>
 8000c88:	2220      	movs	r2, #32
 8000c8a:	0038      	movs	r0, r7
 8000c8c:	0029      	movs	r1, r5
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	40d8      	lsrs	r0, r3
 8000c92:	4091      	lsls	r1, r2
 8000c94:	4097      	lsls	r7, r2
 8000c96:	002c      	movs	r4, r5
 8000c98:	4301      	orrs	r1, r0
 8000c9a:	1e78      	subs	r0, r7, #1
 8000c9c:	4187      	sbcs	r7, r0
 8000c9e:	40dc      	lsrs	r4, r3
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	430f      	orrs	r7, r1
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	d009      	beq.n	8000cbc <__aeabi_dadd+0x120>
 8000ca8:	230f      	movs	r3, #15
 8000caa:	403b      	ands	r3, r7
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d005      	beq.n	8000cbc <__aeabi_dadd+0x120>
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	42bb      	cmp	r3, r7
 8000cb4:	41bf      	sbcs	r7, r7
 8000cb6:	427f      	negs	r7, r7
 8000cb8:	19e4      	adds	r4, r4, r7
 8000cba:	001f      	movs	r7, r3
 8000cbc:	0223      	lsls	r3, r4, #8
 8000cbe:	d52c      	bpl.n	8000d1a <__aeabi_dadd+0x17e>
 8000cc0:	4b96      	ldr	r3, [pc, #600]	; (8000f1c <__aeabi_dadd+0x380>)
 8000cc2:	3601      	adds	r6, #1
 8000cc4:	429e      	cmp	r6, r3
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x12e>
 8000cc8:	e09a      	b.n	8000e00 <__aeabi_dadd+0x264>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <__aeabi_dadd+0x384>)
 8000cce:	08ff      	lsrs	r7, r7, #3
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	0760      	lsls	r0, r4, #29
 8000cd4:	0576      	lsls	r6, r6, #21
 8000cd6:	0264      	lsls	r4, r4, #9
 8000cd8:	4307      	orrs	r7, r0
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	0d76      	lsrs	r6, r6, #21
 8000cde:	2100      	movs	r1, #0
 8000ce0:	0324      	lsls	r4, r4, #12
 8000ce2:	0b23      	lsrs	r3, r4, #12
 8000ce4:	0d0c      	lsrs	r4, r1, #20
 8000ce6:	4a8f      	ldr	r2, [pc, #572]	; (8000f24 <__aeabi_dadd+0x388>)
 8000ce8:	0524      	lsls	r4, r4, #20
 8000cea:	431c      	orrs	r4, r3
 8000cec:	4014      	ands	r4, r2
 8000cee:	0533      	lsls	r3, r6, #20
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	07ed      	lsls	r5, r5, #31
 8000cf6:	085b      	lsrs	r3, r3, #1
 8000cf8:	432b      	orrs	r3, r5
 8000cfa:	0038      	movs	r0, r7
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	bc3c      	pop	{r2, r3, r4, r5}
 8000d00:	4690      	mov	r8, r2
 8000d02:	4699      	mov	r9, r3
 8000d04:	46a2      	mov	sl, r4
 8000d06:	46ab      	mov	fp, r5
 8000d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d0a:	4664      	mov	r4, ip
 8000d0c:	4304      	orrs	r4, r0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x176>
 8000d10:	e211      	b.n	8001136 <__aeabi_dadd+0x59a>
 8000d12:	0004      	movs	r4, r0
 8000d14:	4667      	mov	r7, ip
 8000d16:	077b      	lsls	r3, r7, #29
 8000d18:	d1c6      	bne.n	8000ca8 <__aeabi_dadd+0x10c>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	0760      	lsls	r0, r4, #29
 8000d1e:	08ff      	lsrs	r7, r7, #3
 8000d20:	4307      	orrs	r7, r0
 8000d22:	08e4      	lsrs	r4, r4, #3
 8000d24:	4b7d      	ldr	r3, [pc, #500]	; (8000f1c <__aeabi_dadd+0x380>)
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d030      	beq.n	8000d8c <__aeabi_dadd+0x1f0>
 8000d2a:	0324      	lsls	r4, r4, #12
 8000d2c:	0576      	lsls	r6, r6, #21
 8000d2e:	0b24      	lsrs	r4, r4, #12
 8000d30:	0d76      	lsrs	r6, r6, #21
 8000d32:	e7d4      	b.n	8000cde <__aeabi_dadd+0x142>
 8000d34:	1a33      	subs	r3, r6, r0
 8000d36:	469a      	mov	sl, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dd78      	ble.n	8000e2e <__aeabi_dadd+0x292>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d031      	beq.n	8000da4 <__aeabi_dadd+0x208>
 8000d40:	4876      	ldr	r0, [pc, #472]	; (8000f1c <__aeabi_dadd+0x380>)
 8000d42:	4286      	cmp	r6, r0
 8000d44:	d0ae      	beq.n	8000ca4 <__aeabi_dadd+0x108>
 8000d46:	2080      	movs	r0, #128	; 0x80
 8000d48:	0400      	lsls	r0, r0, #16
 8000d4a:	4301      	orrs	r1, r0
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	2b38      	cmp	r3, #56	; 0x38
 8000d50:	dc00      	bgt.n	8000d54 <__aeabi_dadd+0x1b8>
 8000d52:	e0e9      	b.n	8000f28 <__aeabi_dadd+0x38c>
 8000d54:	430a      	orrs	r2, r1
 8000d56:	1e51      	subs	r1, r2, #1
 8000d58:	418a      	sbcs	r2, r1
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	19d2      	adds	r2, r2, r7
 8000d5e:	42ba      	cmp	r2, r7
 8000d60:	41bf      	sbcs	r7, r7
 8000d62:	1909      	adds	r1, r1, r4
 8000d64:	427c      	negs	r4, r7
 8000d66:	0017      	movs	r7, r2
 8000d68:	190c      	adds	r4, r1, r4
 8000d6a:	0223      	lsls	r3, r4, #8
 8000d6c:	d5d3      	bpl.n	8000d16 <__aeabi_dadd+0x17a>
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <__aeabi_dadd+0x380>)
 8000d70:	3601      	adds	r6, #1
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x1dc>
 8000d76:	e13a      	b.n	8000fee <__aeabi_dadd+0x452>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4b69      	ldr	r3, [pc, #420]	; (8000f20 <__aeabi_dadd+0x384>)
 8000d7c:	401c      	ands	r4, r3
 8000d7e:	087b      	lsrs	r3, r7, #1
 8000d80:	4007      	ands	r7, r0
 8000d82:	431f      	orrs	r7, r3
 8000d84:	07e0      	lsls	r0, r4, #31
 8000d86:	4307      	orrs	r7, r0
 8000d88:	0864      	lsrs	r4, r4, #1
 8000d8a:	e78b      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000d8c:	0023      	movs	r3, r4
 8000d8e:	433b      	orrs	r3, r7
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x1f8>
 8000d92:	e1cb      	b.n	800112c <__aeabi_dadd+0x590>
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	0312      	lsls	r2, r2, #12
 8000d98:	4314      	orrs	r4, r2
 8000d9a:	0324      	lsls	r4, r4, #12
 8000d9c:	0b24      	lsrs	r4, r4, #12
 8000d9e:	e79e      	b.n	8000cde <__aeabi_dadd+0x142>
 8000da0:	002e      	movs	r6, r5
 8000da2:	e77f      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000da4:	0008      	movs	r0, r1
 8000da6:	4310      	orrs	r0, r2
 8000da8:	d100      	bne.n	8000dac <__aeabi_dadd+0x210>
 8000daa:	e0b4      	b.n	8000f16 <__aeabi_dadd+0x37a>
 8000dac:	1e58      	subs	r0, r3, #1
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dadd+0x218>
 8000db2:	e0de      	b.n	8000f72 <__aeabi_dadd+0x3d6>
 8000db4:	18ba      	adds	r2, r7, r2
 8000db6:	42ba      	cmp	r2, r7
 8000db8:	419b      	sbcs	r3, r3
 8000dba:	1864      	adds	r4, r4, r1
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	18e4      	adds	r4, r4, r3
 8000dc0:	0017      	movs	r7, r2
 8000dc2:	2601      	movs	r6, #1
 8000dc4:	0223      	lsls	r3, r4, #8
 8000dc6:	d5a6      	bpl.n	8000d16 <__aeabi_dadd+0x17a>
 8000dc8:	2602      	movs	r6, #2
 8000dca:	e7d5      	b.n	8000d78 <__aeabi_dadd+0x1dc>
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d16e      	bne.n	8000eae <__aeabi_dadd+0x312>
 8000dd0:	1c70      	adds	r0, r6, #1
 8000dd2:	0540      	lsls	r0, r0, #21
 8000dd4:	0d40      	lsrs	r0, r0, #21
 8000dd6:	2801      	cmp	r0, #1
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_dadd+0x240>
 8000dda:	e0f9      	b.n	8000fd0 <__aeabi_dadd+0x434>
 8000ddc:	1ab8      	subs	r0, r7, r2
 8000dde:	4684      	mov	ip, r0
 8000de0:	4287      	cmp	r7, r0
 8000de2:	4180      	sbcs	r0, r0
 8000de4:	1ae5      	subs	r5, r4, r3
 8000de6:	4240      	negs	r0, r0
 8000de8:	1a2d      	subs	r5, r5, r0
 8000dea:	0228      	lsls	r0, r5, #8
 8000dec:	d400      	bmi.n	8000df0 <__aeabi_dadd+0x254>
 8000dee:	e089      	b.n	8000f04 <__aeabi_dadd+0x368>
 8000df0:	1bd7      	subs	r7, r2, r7
 8000df2:	42ba      	cmp	r2, r7
 8000df4:	4192      	sbcs	r2, r2
 8000df6:	1b1c      	subs	r4, r3, r4
 8000df8:	4252      	negs	r2, r2
 8000dfa:	1aa5      	subs	r5, r4, r2
 8000dfc:	46d8      	mov	r8, fp
 8000dfe:	e729      	b.n	8000c54 <__aeabi_dadd+0xb8>
 8000e00:	4645      	mov	r5, r8
 8000e02:	2400      	movs	r4, #0
 8000e04:	2700      	movs	r7, #0
 8000e06:	e76a      	b.n	8000cde <__aeabi_dadd+0x142>
 8000e08:	4c45      	ldr	r4, [pc, #276]	; (8000f20 <__aeabi_dadd+0x384>)
 8000e0a:	1af6      	subs	r6, r6, r3
 8000e0c:	402c      	ands	r4, r5
 8000e0e:	e749      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000e10:	003d      	movs	r5, r7
 8000e12:	3828      	subs	r0, #40	; 0x28
 8000e14:	4085      	lsls	r5, r0
 8000e16:	2700      	movs	r7, #0
 8000e18:	e72e      	b.n	8000c78 <__aeabi_dadd+0xdc>
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	f001 fc74 	bl	8002708 <__clzsi2>
 8000e20:	3020      	adds	r0, #32
 8000e22:	e71d      	b.n	8000c60 <__aeabi_dadd+0xc4>
 8000e24:	430a      	orrs	r2, r1
 8000e26:	1e51      	subs	r1, r2, #1
 8000e28:	418a      	sbcs	r2, r1
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e707      	b.n	8000c3e <__aeabi_dadd+0xa2>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dadd+0x298>
 8000e32:	e0f3      	b.n	800101c <__aeabi_dadd+0x480>
 8000e34:	1c70      	adds	r0, r6, #1
 8000e36:	0543      	lsls	r3, r0, #21
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	dc00      	bgt.n	8000e40 <__aeabi_dadd+0x2a4>
 8000e3e:	e0ad      	b.n	8000f9c <__aeabi_dadd+0x400>
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <__aeabi_dadd+0x380>)
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ac>
 8000e46:	e0d1      	b.n	8000fec <__aeabi_dadd+0x450>
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	42ba      	cmp	r2, r7
 8000e4c:	41bf      	sbcs	r7, r7
 8000e4e:	1864      	adds	r4, r4, r1
 8000e50:	427f      	negs	r7, r7
 8000e52:	19e4      	adds	r4, r4, r7
 8000e54:	07e7      	lsls	r7, r4, #31
 8000e56:	0852      	lsrs	r2, r2, #1
 8000e58:	4317      	orrs	r7, r2
 8000e5a:	0864      	lsrs	r4, r4, #1
 8000e5c:	0006      	movs	r6, r0
 8000e5e:	e721      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <__aeabi_dadd+0x380>)
 8000e62:	4285      	cmp	r5, r0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x2cc>
 8000e66:	e093      	b.n	8000f90 <__aeabi_dadd+0x3f4>
 8000e68:	001d      	movs	r5, r3
 8000e6a:	e6d0      	b.n	8000c0e <__aeabi_dadd+0x72>
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	3e1f      	subs	r6, #31
 8000e70:	40f1      	lsrs	r1, r6
 8000e72:	2b20      	cmp	r3, #32
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x2dc>
 8000e76:	e08d      	b.n	8000f94 <__aeabi_dadd+0x3f8>
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	409d      	lsls	r5, r3
 8000e7e:	432f      	orrs	r7, r5
 8000e80:	1e7d      	subs	r5, r7, #1
 8000e82:	41af      	sbcs	r7, r5
 8000e84:	2400      	movs	r4, #0
 8000e86:	430f      	orrs	r7, r1
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e744      	b.n	8000d16 <__aeabi_dadd+0x17a>
 8000e8c:	002b      	movs	r3, r5
 8000e8e:	0008      	movs	r0, r1
 8000e90:	3b20      	subs	r3, #32
 8000e92:	40d8      	lsrs	r0, r3
 8000e94:	0003      	movs	r3, r0
 8000e96:	2d20      	cmp	r5, #32
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x300>
 8000e9a:	e07d      	b.n	8000f98 <__aeabi_dadd+0x3fc>
 8000e9c:	2040      	movs	r0, #64	; 0x40
 8000e9e:	1b45      	subs	r5, r0, r5
 8000ea0:	40a9      	lsls	r1, r5
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	1e51      	subs	r1, r2, #1
 8000ea6:	418a      	sbcs	r2, r1
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	e6c7      	b.n	8000c3e <__aeabi_dadd+0xa2>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	d050      	beq.n	8000f54 <__aeabi_dadd+0x3b8>
 8000eb2:	4e1a      	ldr	r6, [pc, #104]	; (8000f1c <__aeabi_dadd+0x380>)
 8000eb4:	42b0      	cmp	r0, r6
 8000eb6:	d057      	beq.n	8000f68 <__aeabi_dadd+0x3cc>
 8000eb8:	2680      	movs	r6, #128	; 0x80
 8000eba:	426b      	negs	r3, r5
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	0436      	lsls	r6, r6, #16
 8000ec0:	4334      	orrs	r4, r6
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	2b38      	cmp	r3, #56	; 0x38
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_dadd+0x32e>
 8000ec8:	e0d6      	b.n	8001078 <__aeabi_dadd+0x4dc>
 8000eca:	2b1f      	cmp	r3, #31
 8000ecc:	dd00      	ble.n	8000ed0 <__aeabi_dadd+0x334>
 8000ece:	e135      	b.n	800113c <__aeabi_dadd+0x5a0>
 8000ed0:	2620      	movs	r6, #32
 8000ed2:	1af5      	subs	r5, r6, r3
 8000ed4:	0026      	movs	r6, r4
 8000ed6:	40ae      	lsls	r6, r5
 8000ed8:	46b2      	mov	sl, r6
 8000eda:	003e      	movs	r6, r7
 8000edc:	40de      	lsrs	r6, r3
 8000ede:	46ac      	mov	ip, r5
 8000ee0:	0035      	movs	r5, r6
 8000ee2:	4656      	mov	r6, sl
 8000ee4:	432e      	orrs	r6, r5
 8000ee6:	4665      	mov	r5, ip
 8000ee8:	40af      	lsls	r7, r5
 8000eea:	1e7d      	subs	r5, r7, #1
 8000eec:	41af      	sbcs	r7, r5
 8000eee:	40dc      	lsrs	r4, r3
 8000ef0:	4337      	orrs	r7, r6
 8000ef2:	1bd7      	subs	r7, r2, r7
 8000ef4:	42ba      	cmp	r2, r7
 8000ef6:	4192      	sbcs	r2, r2
 8000ef8:	1b0c      	subs	r4, r1, r4
 8000efa:	4252      	negs	r2, r2
 8000efc:	1aa4      	subs	r4, r4, r2
 8000efe:	0006      	movs	r6, r0
 8000f00:	46d8      	mov	r8, fp
 8000f02:	e6a3      	b.n	8000c4c <__aeabi_dadd+0xb0>
 8000f04:	4664      	mov	r4, ip
 8000f06:	4667      	mov	r7, ip
 8000f08:	432c      	orrs	r4, r5
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_dadd+0x372>
 8000f0c:	e6a2      	b.n	8000c54 <__aeabi_dadd+0xb8>
 8000f0e:	2500      	movs	r5, #0
 8000f10:	2600      	movs	r6, #0
 8000f12:	2700      	movs	r7, #0
 8000f14:	e706      	b.n	8000d24 <__aeabi_dadd+0x188>
 8000f16:	001e      	movs	r6, r3
 8000f18:	e6c4      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	000007ff 	.word	0x000007ff
 8000f20:	ff7fffff 	.word	0xff7fffff
 8000f24:	800fffff 	.word	0x800fffff
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	dc63      	bgt.n	8000ff4 <__aeabi_dadd+0x458>
 8000f2c:	2020      	movs	r0, #32
 8000f2e:	1ac3      	subs	r3, r0, r3
 8000f30:	0008      	movs	r0, r1
 8000f32:	4098      	lsls	r0, r3
 8000f34:	469c      	mov	ip, r3
 8000f36:	4683      	mov	fp, r0
 8000f38:	4653      	mov	r3, sl
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	40d8      	lsrs	r0, r3
 8000f3e:	0003      	movs	r3, r0
 8000f40:	4658      	mov	r0, fp
 8000f42:	4318      	orrs	r0, r3
 8000f44:	4663      	mov	r3, ip
 8000f46:	409a      	lsls	r2, r3
 8000f48:	1e53      	subs	r3, r2, #1
 8000f4a:	419a      	sbcs	r2, r3
 8000f4c:	4653      	mov	r3, sl
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	40d9      	lsrs	r1, r3
 8000f52:	e703      	b.n	8000d5c <__aeabi_dadd+0x1c0>
 8000f54:	0026      	movs	r6, r4
 8000f56:	433e      	orrs	r6, r7
 8000f58:	d006      	beq.n	8000f68 <__aeabi_dadd+0x3cc>
 8000f5a:	43eb      	mvns	r3, r5
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0c7      	beq.n	8000ef2 <__aeabi_dadd+0x356>
 8000f62:	4e94      	ldr	r6, [pc, #592]	; (80011b4 <__aeabi_dadd+0x618>)
 8000f64:	42b0      	cmp	r0, r6
 8000f66:	d1ac      	bne.n	8000ec2 <__aeabi_dadd+0x326>
 8000f68:	000c      	movs	r4, r1
 8000f6a:	0017      	movs	r7, r2
 8000f6c:	0006      	movs	r6, r0
 8000f6e:	46d8      	mov	r8, fp
 8000f70:	e698      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000f72:	4b90      	ldr	r3, [pc, #576]	; (80011b4 <__aeabi_dadd+0x618>)
 8000f74:	459a      	cmp	sl, r3
 8000f76:	d00b      	beq.n	8000f90 <__aeabi_dadd+0x3f4>
 8000f78:	4682      	mov	sl, r0
 8000f7a:	e6e7      	b.n	8000d4c <__aeabi_dadd+0x1b0>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_dadd+0x3e6>
 8000f80:	e09e      	b.n	80010c0 <__aeabi_dadd+0x524>
 8000f82:	0018      	movs	r0, r3
 8000f84:	4310      	orrs	r0, r2
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x3ee>
 8000f88:	e0e9      	b.n	800115e <__aeabi_dadd+0x5c2>
 8000f8a:	001c      	movs	r4, r3
 8000f8c:	0017      	movs	r7, r2
 8000f8e:	46d8      	mov	r8, fp
 8000f90:	4e88      	ldr	r6, [pc, #544]	; (80011b4 <__aeabi_dadd+0x618>)
 8000f92:	e687      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000f94:	2500      	movs	r5, #0
 8000f96:	e772      	b.n	8000e7e <__aeabi_dadd+0x2e2>
 8000f98:	2100      	movs	r1, #0
 8000f9a:	e782      	b.n	8000ea2 <__aeabi_dadd+0x306>
 8000f9c:	0023      	movs	r3, r4
 8000f9e:	433b      	orrs	r3, r7
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x40a>
 8000fa4:	e0ab      	b.n	80010fe <__aeabi_dadd+0x562>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x410>
 8000faa:	e0e7      	b.n	800117c <__aeabi_dadd+0x5e0>
 8000fac:	000b      	movs	r3, r1
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x418>
 8000fb2:	e677      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	42ba      	cmp	r2, r7
 8000fb8:	41bf      	sbcs	r7, r7
 8000fba:	1864      	adds	r4, r4, r1
 8000fbc:	427f      	negs	r7, r7
 8000fbe:	19e4      	adds	r4, r4, r7
 8000fc0:	0223      	lsls	r3, r4, #8
 8000fc2:	d400      	bmi.n	8000fc6 <__aeabi_dadd+0x42a>
 8000fc4:	e0f2      	b.n	80011ac <__aeabi_dadd+0x610>
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <__aeabi_dadd+0x61c>)
 8000fc8:	0017      	movs	r7, r2
 8000fca:	401c      	ands	r4, r3
 8000fcc:	0006      	movs	r6, r0
 8000fce:	e669      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	4338      	orrs	r0, r7
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d1d1      	bne.n	8000f7c <__aeabi_dadd+0x3e0>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d15b      	bne.n	8001094 <__aeabi_dadd+0x4f8>
 8000fdc:	001c      	movs	r4, r3
 8000fde:	4314      	orrs	r4, r2
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x448>
 8000fe2:	e0a8      	b.n	8001136 <__aeabi_dadd+0x59a>
 8000fe4:	001c      	movs	r4, r3
 8000fe6:	0017      	movs	r7, r2
 8000fe8:	46d8      	mov	r8, fp
 8000fea:	e65b      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8000fec:	0006      	movs	r6, r0
 8000fee:	2400      	movs	r4, #0
 8000ff0:	2700      	movs	r7, #0
 8000ff2:	e697      	b.n	8000d24 <__aeabi_dadd+0x188>
 8000ff4:	4650      	mov	r0, sl
 8000ff6:	000b      	movs	r3, r1
 8000ff8:	3820      	subs	r0, #32
 8000ffa:	40c3      	lsrs	r3, r0
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	4653      	mov	r3, sl
 8001000:	2b20      	cmp	r3, #32
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x46a>
 8001004:	e095      	b.n	8001132 <__aeabi_dadd+0x596>
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	4650      	mov	r0, sl
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	4099      	lsls	r1, r3
 800100e:	430a      	orrs	r2, r1
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	418a      	sbcs	r2, r1
 8001014:	464b      	mov	r3, r9
 8001016:	2100      	movs	r1, #0
 8001018:	431a      	orrs	r2, r3
 800101a:	e69f      	b.n	8000d5c <__aeabi_dadd+0x1c0>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d130      	bne.n	8001082 <__aeabi_dadd+0x4e6>
 8001020:	0026      	movs	r6, r4
 8001022:	433e      	orrs	r6, r7
 8001024:	d067      	beq.n	80010f6 <__aeabi_dadd+0x55a>
 8001026:	43db      	mvns	r3, r3
 8001028:	469a      	mov	sl, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01c      	beq.n	8001068 <__aeabi_dadd+0x4cc>
 800102e:	4e61      	ldr	r6, [pc, #388]	; (80011b4 <__aeabi_dadd+0x618>)
 8001030:	42b0      	cmp	r0, r6
 8001032:	d060      	beq.n	80010f6 <__aeabi_dadd+0x55a>
 8001034:	4653      	mov	r3, sl
 8001036:	2b38      	cmp	r3, #56	; 0x38
 8001038:	dd00      	ble.n	800103c <__aeabi_dadd+0x4a0>
 800103a:	e096      	b.n	800116a <__aeabi_dadd+0x5ce>
 800103c:	2b1f      	cmp	r3, #31
 800103e:	dd00      	ble.n	8001042 <__aeabi_dadd+0x4a6>
 8001040:	e09f      	b.n	8001182 <__aeabi_dadd+0x5e6>
 8001042:	2620      	movs	r6, #32
 8001044:	1af3      	subs	r3, r6, r3
 8001046:	0026      	movs	r6, r4
 8001048:	409e      	lsls	r6, r3
 800104a:	469c      	mov	ip, r3
 800104c:	46b3      	mov	fp, r6
 800104e:	4653      	mov	r3, sl
 8001050:	003e      	movs	r6, r7
 8001052:	40de      	lsrs	r6, r3
 8001054:	0033      	movs	r3, r6
 8001056:	465e      	mov	r6, fp
 8001058:	431e      	orrs	r6, r3
 800105a:	4663      	mov	r3, ip
 800105c:	409f      	lsls	r7, r3
 800105e:	1e7b      	subs	r3, r7, #1
 8001060:	419f      	sbcs	r7, r3
 8001062:	4653      	mov	r3, sl
 8001064:	40dc      	lsrs	r4, r3
 8001066:	4337      	orrs	r7, r6
 8001068:	18bf      	adds	r7, r7, r2
 800106a:	4297      	cmp	r7, r2
 800106c:	4192      	sbcs	r2, r2
 800106e:	1864      	adds	r4, r4, r1
 8001070:	4252      	negs	r2, r2
 8001072:	18a4      	adds	r4, r4, r2
 8001074:	0006      	movs	r6, r0
 8001076:	e678      	b.n	8000d6a <__aeabi_dadd+0x1ce>
 8001078:	4327      	orrs	r7, r4
 800107a:	1e7c      	subs	r4, r7, #1
 800107c:	41a7      	sbcs	r7, r4
 800107e:	2400      	movs	r4, #0
 8001080:	e737      	b.n	8000ef2 <__aeabi_dadd+0x356>
 8001082:	4e4c      	ldr	r6, [pc, #304]	; (80011b4 <__aeabi_dadd+0x618>)
 8001084:	42b0      	cmp	r0, r6
 8001086:	d036      	beq.n	80010f6 <__aeabi_dadd+0x55a>
 8001088:	2680      	movs	r6, #128	; 0x80
 800108a:	425b      	negs	r3, r3
 800108c:	0436      	lsls	r6, r6, #16
 800108e:	469a      	mov	sl, r3
 8001090:	4334      	orrs	r4, r6
 8001092:	e7cf      	b.n	8001034 <__aeabi_dadd+0x498>
 8001094:	0018      	movs	r0, r3
 8001096:	4310      	orrs	r0, r2
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x500>
 800109a:	e603      	b.n	8000ca4 <__aeabi_dadd+0x108>
 800109c:	1ab8      	subs	r0, r7, r2
 800109e:	4684      	mov	ip, r0
 80010a0:	4567      	cmp	r7, ip
 80010a2:	41ad      	sbcs	r5, r5
 80010a4:	1ae0      	subs	r0, r4, r3
 80010a6:	426d      	negs	r5, r5
 80010a8:	1b40      	subs	r0, r0, r5
 80010aa:	0205      	lsls	r5, r0, #8
 80010ac:	d400      	bmi.n	80010b0 <__aeabi_dadd+0x514>
 80010ae:	e62c      	b.n	8000d0a <__aeabi_dadd+0x16e>
 80010b0:	1bd7      	subs	r7, r2, r7
 80010b2:	42ba      	cmp	r2, r7
 80010b4:	4192      	sbcs	r2, r2
 80010b6:	1b1c      	subs	r4, r3, r4
 80010b8:	4252      	negs	r2, r2
 80010ba:	1aa4      	subs	r4, r4, r2
 80010bc:	46d8      	mov	r8, fp
 80010be:	e5f1      	b.n	8000ca4 <__aeabi_dadd+0x108>
 80010c0:	0018      	movs	r0, r3
 80010c2:	4310      	orrs	r0, r2
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x52c>
 80010c6:	e763      	b.n	8000f90 <__aeabi_dadd+0x3f4>
 80010c8:	08f8      	lsrs	r0, r7, #3
 80010ca:	0767      	lsls	r7, r4, #29
 80010cc:	4307      	orrs	r7, r0
 80010ce:	2080      	movs	r0, #128	; 0x80
 80010d0:	08e4      	lsrs	r4, r4, #3
 80010d2:	0300      	lsls	r0, r0, #12
 80010d4:	4204      	tst	r4, r0
 80010d6:	d008      	beq.n	80010ea <__aeabi_dadd+0x54e>
 80010d8:	08dd      	lsrs	r5, r3, #3
 80010da:	4205      	tst	r5, r0
 80010dc:	d105      	bne.n	80010ea <__aeabi_dadd+0x54e>
 80010de:	08d2      	lsrs	r2, r2, #3
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	4311      	orrs	r1, r2
 80010e4:	000f      	movs	r7, r1
 80010e6:	002c      	movs	r4, r5
 80010e8:	46d8      	mov	r8, fp
 80010ea:	0f7b      	lsrs	r3, r7, #29
 80010ec:	00e4      	lsls	r4, r4, #3
 80010ee:	431c      	orrs	r4, r3
 80010f0:	00ff      	lsls	r7, r7, #3
 80010f2:	4e30      	ldr	r6, [pc, #192]	; (80011b4 <__aeabi_dadd+0x618>)
 80010f4:	e5d6      	b.n	8000ca4 <__aeabi_dadd+0x108>
 80010f6:	000c      	movs	r4, r1
 80010f8:	0017      	movs	r7, r2
 80010fa:	0006      	movs	r6, r0
 80010fc:	e5d2      	b.n	8000ca4 <__aeabi_dadd+0x108>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d038      	beq.n	8001174 <__aeabi_dadd+0x5d8>
 8001102:	000b      	movs	r3, r1
 8001104:	4313      	orrs	r3, r2
 8001106:	d100      	bne.n	800110a <__aeabi_dadd+0x56e>
 8001108:	e742      	b.n	8000f90 <__aeabi_dadd+0x3f4>
 800110a:	08f8      	lsrs	r0, r7, #3
 800110c:	0767      	lsls	r7, r4, #29
 800110e:	4307      	orrs	r7, r0
 8001110:	2080      	movs	r0, #128	; 0x80
 8001112:	08e4      	lsrs	r4, r4, #3
 8001114:	0300      	lsls	r0, r0, #12
 8001116:	4204      	tst	r4, r0
 8001118:	d0e7      	beq.n	80010ea <__aeabi_dadd+0x54e>
 800111a:	08cb      	lsrs	r3, r1, #3
 800111c:	4203      	tst	r3, r0
 800111e:	d1e4      	bne.n	80010ea <__aeabi_dadd+0x54e>
 8001120:	08d2      	lsrs	r2, r2, #3
 8001122:	0749      	lsls	r1, r1, #29
 8001124:	4311      	orrs	r1, r2
 8001126:	000f      	movs	r7, r1
 8001128:	001c      	movs	r4, r3
 800112a:	e7de      	b.n	80010ea <__aeabi_dadd+0x54e>
 800112c:	2700      	movs	r7, #0
 800112e:	2400      	movs	r4, #0
 8001130:	e5d5      	b.n	8000cde <__aeabi_dadd+0x142>
 8001132:	2100      	movs	r1, #0
 8001134:	e76b      	b.n	800100e <__aeabi_dadd+0x472>
 8001136:	2500      	movs	r5, #0
 8001138:	2700      	movs	r7, #0
 800113a:	e5f3      	b.n	8000d24 <__aeabi_dadd+0x188>
 800113c:	464e      	mov	r6, r9
 800113e:	0025      	movs	r5, r4
 8001140:	3e20      	subs	r6, #32
 8001142:	40f5      	lsrs	r5, r6
 8001144:	464b      	mov	r3, r9
 8001146:	002e      	movs	r6, r5
 8001148:	2b20      	cmp	r3, #32
 800114a:	d02d      	beq.n	80011a8 <__aeabi_dadd+0x60c>
 800114c:	2540      	movs	r5, #64	; 0x40
 800114e:	1aed      	subs	r5, r5, r3
 8001150:	40ac      	lsls	r4, r5
 8001152:	4327      	orrs	r7, r4
 8001154:	1e7c      	subs	r4, r7, #1
 8001156:	41a7      	sbcs	r7, r4
 8001158:	2400      	movs	r4, #0
 800115a:	4337      	orrs	r7, r6
 800115c:	e6c9      	b.n	8000ef2 <__aeabi_dadd+0x356>
 800115e:	2480      	movs	r4, #128	; 0x80
 8001160:	2500      	movs	r5, #0
 8001162:	0324      	lsls	r4, r4, #12
 8001164:	4e13      	ldr	r6, [pc, #76]	; (80011b4 <__aeabi_dadd+0x618>)
 8001166:	2700      	movs	r7, #0
 8001168:	e5dc      	b.n	8000d24 <__aeabi_dadd+0x188>
 800116a:	4327      	orrs	r7, r4
 800116c:	1e7c      	subs	r4, r7, #1
 800116e:	41a7      	sbcs	r7, r4
 8001170:	2400      	movs	r4, #0
 8001172:	e779      	b.n	8001068 <__aeabi_dadd+0x4cc>
 8001174:	000c      	movs	r4, r1
 8001176:	0017      	movs	r7, r2
 8001178:	4e0e      	ldr	r6, [pc, #56]	; (80011b4 <__aeabi_dadd+0x618>)
 800117a:	e593      	b.n	8000ca4 <__aeabi_dadd+0x108>
 800117c:	000c      	movs	r4, r1
 800117e:	0017      	movs	r7, r2
 8001180:	e590      	b.n	8000ca4 <__aeabi_dadd+0x108>
 8001182:	4656      	mov	r6, sl
 8001184:	0023      	movs	r3, r4
 8001186:	3e20      	subs	r6, #32
 8001188:	40f3      	lsrs	r3, r6
 800118a:	4699      	mov	r9, r3
 800118c:	4653      	mov	r3, sl
 800118e:	2b20      	cmp	r3, #32
 8001190:	d00e      	beq.n	80011b0 <__aeabi_dadd+0x614>
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	4656      	mov	r6, sl
 8001196:	1b9b      	subs	r3, r3, r6
 8001198:	409c      	lsls	r4, r3
 800119a:	4327      	orrs	r7, r4
 800119c:	1e7c      	subs	r4, r7, #1
 800119e:	41a7      	sbcs	r7, r4
 80011a0:	464b      	mov	r3, r9
 80011a2:	2400      	movs	r4, #0
 80011a4:	431f      	orrs	r7, r3
 80011a6:	e75f      	b.n	8001068 <__aeabi_dadd+0x4cc>
 80011a8:	2400      	movs	r4, #0
 80011aa:	e7d2      	b.n	8001152 <__aeabi_dadd+0x5b6>
 80011ac:	0017      	movs	r7, r2
 80011ae:	e5b2      	b.n	8000d16 <__aeabi_dadd+0x17a>
 80011b0:	2400      	movs	r4, #0
 80011b2:	e7f2      	b.n	800119a <__aeabi_dadd+0x5fe>
 80011b4:	000007ff 	.word	0x000007ff
 80011b8:	ff7fffff 	.word	0xff7fffff

080011bc <__aeabi_ddiv>:
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	4657      	mov	r7, sl
 80011c0:	4645      	mov	r5, r8
 80011c2:	46de      	mov	lr, fp
 80011c4:	464e      	mov	r6, r9
 80011c6:	b5e0      	push	{r5, r6, r7, lr}
 80011c8:	004c      	lsls	r4, r1, #1
 80011ca:	030e      	lsls	r6, r1, #12
 80011cc:	b087      	sub	sp, #28
 80011ce:	4683      	mov	fp, r0
 80011d0:	4692      	mov	sl, r2
 80011d2:	001d      	movs	r5, r3
 80011d4:	4680      	mov	r8, r0
 80011d6:	0b36      	lsrs	r6, r6, #12
 80011d8:	0d64      	lsrs	r4, r4, #21
 80011da:	0fcf      	lsrs	r7, r1, #31
 80011dc:	2c00      	cmp	r4, #0
 80011de:	d04f      	beq.n	8001280 <__aeabi_ddiv+0xc4>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <__aeabi_ddiv+0x1e4>)
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d035      	beq.n	8001252 <__aeabi_ddiv+0x96>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	0f42      	lsrs	r2, r0, #29
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	00f6      	lsls	r6, r6, #3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	4333      	orrs	r3, r6
 80011f2:	4699      	mov	r9, r3
 80011f4:	00c3      	lsls	r3, r0, #3
 80011f6:	4698      	mov	r8, r3
 80011f8:	4b6a      	ldr	r3, [pc, #424]	; (80013a4 <__aeabi_ddiv+0x1e8>)
 80011fa:	2600      	movs	r6, #0
 80011fc:	469c      	mov	ip, r3
 80011fe:	2300      	movs	r3, #0
 8001200:	4464      	add	r4, ip
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	032b      	lsls	r3, r5, #12
 8001206:	0b1b      	lsrs	r3, r3, #12
 8001208:	469b      	mov	fp, r3
 800120a:	006b      	lsls	r3, r5, #1
 800120c:	0fed      	lsrs	r5, r5, #31
 800120e:	4650      	mov	r0, sl
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	9501      	str	r5, [sp, #4]
 8001214:	d05e      	beq.n	80012d4 <__aeabi_ddiv+0x118>
 8001216:	4a62      	ldr	r2, [pc, #392]	; (80013a0 <__aeabi_ddiv+0x1e4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d053      	beq.n	80012c4 <__aeabi_ddiv+0x108>
 800121c:	465a      	mov	r2, fp
 800121e:	00d1      	lsls	r1, r2, #3
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0f40      	lsrs	r0, r0, #29
 8001224:	0412      	lsls	r2, r2, #16
 8001226:	4302      	orrs	r2, r0
 8001228:	430a      	orrs	r2, r1
 800122a:	4693      	mov	fp, r2
 800122c:	4652      	mov	r2, sl
 800122e:	00d1      	lsls	r1, r2, #3
 8001230:	4a5c      	ldr	r2, [pc, #368]	; (80013a4 <__aeabi_ddiv+0x1e8>)
 8001232:	4694      	mov	ip, r2
 8001234:	2200      	movs	r2, #0
 8001236:	4463      	add	r3, ip
 8001238:	0038      	movs	r0, r7
 800123a:	4068      	eors	r0, r5
 800123c:	4684      	mov	ip, r0
 800123e:	9002      	str	r0, [sp, #8]
 8001240:	1ae4      	subs	r4, r4, r3
 8001242:	4316      	orrs	r6, r2
 8001244:	2e0f      	cmp	r6, #15
 8001246:	d900      	bls.n	800124a <__aeabi_ddiv+0x8e>
 8001248:	e0b4      	b.n	80013b4 <__aeabi_ddiv+0x1f8>
 800124a:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <__aeabi_ddiv+0x1ec>)
 800124c:	00b6      	lsls	r6, r6, #2
 800124e:	599b      	ldr	r3, [r3, r6]
 8001250:	469f      	mov	pc, r3
 8001252:	0003      	movs	r3, r0
 8001254:	4333      	orrs	r3, r6
 8001256:	4699      	mov	r9, r3
 8001258:	d16c      	bne.n	8001334 <__aeabi_ddiv+0x178>
 800125a:	2300      	movs	r3, #0
 800125c:	4698      	mov	r8, r3
 800125e:	3302      	adds	r3, #2
 8001260:	2608      	movs	r6, #8
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	e7ce      	b.n	8001204 <__aeabi_ddiv+0x48>
 8001266:	46cb      	mov	fp, r9
 8001268:	4641      	mov	r1, r8
 800126a:	9a03      	ldr	r2, [sp, #12]
 800126c:	9701      	str	r7, [sp, #4]
 800126e:	2a02      	cmp	r2, #2
 8001270:	d165      	bne.n	800133e <__aeabi_ddiv+0x182>
 8001272:	9b01      	ldr	r3, [sp, #4]
 8001274:	4c4a      	ldr	r4, [pc, #296]	; (80013a0 <__aeabi_ddiv+0x1e4>)
 8001276:	469c      	mov	ip, r3
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	4698      	mov	r8, r3
 800127e:	e06b      	b.n	8001358 <__aeabi_ddiv+0x19c>
 8001280:	0003      	movs	r3, r0
 8001282:	4333      	orrs	r3, r6
 8001284:	4699      	mov	r9, r3
 8001286:	d04e      	beq.n	8001326 <__aeabi_ddiv+0x16a>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_ddiv+0xd2>
 800128c:	e1bc      	b.n	8001608 <__aeabi_ddiv+0x44c>
 800128e:	0030      	movs	r0, r6
 8001290:	f001 fa3a 	bl	8002708 <__clzsi2>
 8001294:	0003      	movs	r3, r0
 8001296:	3b0b      	subs	r3, #11
 8001298:	2b1c      	cmp	r3, #28
 800129a:	dd00      	ble.n	800129e <__aeabi_ddiv+0xe2>
 800129c:	e1ac      	b.n	80015f8 <__aeabi_ddiv+0x43c>
 800129e:	221d      	movs	r2, #29
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	465a      	mov	r2, fp
 80012a4:	0001      	movs	r1, r0
 80012a6:	40da      	lsrs	r2, r3
 80012a8:	3908      	subs	r1, #8
 80012aa:	408e      	lsls	r6, r1
 80012ac:	0013      	movs	r3, r2
 80012ae:	4333      	orrs	r3, r6
 80012b0:	4699      	mov	r9, r3
 80012b2:	465b      	mov	r3, fp
 80012b4:	408b      	lsls	r3, r1
 80012b6:	4698      	mov	r8, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4c3c      	ldr	r4, [pc, #240]	; (80013ac <__aeabi_ddiv+0x1f0>)
 80012bc:	2600      	movs	r6, #0
 80012be:	1a24      	subs	r4, r4, r0
 80012c0:	9303      	str	r3, [sp, #12]
 80012c2:	e79f      	b.n	8001204 <__aeabi_ddiv+0x48>
 80012c4:	4651      	mov	r1, sl
 80012c6:	465a      	mov	r2, fp
 80012c8:	4311      	orrs	r1, r2
 80012ca:	d129      	bne.n	8001320 <__aeabi_ddiv+0x164>
 80012cc:	2200      	movs	r2, #0
 80012ce:	4693      	mov	fp, r2
 80012d0:	3202      	adds	r2, #2
 80012d2:	e7b1      	b.n	8001238 <__aeabi_ddiv+0x7c>
 80012d4:	4659      	mov	r1, fp
 80012d6:	4301      	orrs	r1, r0
 80012d8:	d01e      	beq.n	8001318 <__aeabi_ddiv+0x15c>
 80012da:	465b      	mov	r3, fp
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_ddiv+0x126>
 80012e0:	e19e      	b.n	8001620 <__aeabi_ddiv+0x464>
 80012e2:	4658      	mov	r0, fp
 80012e4:	f001 fa10 	bl	8002708 <__clzsi2>
 80012e8:	0003      	movs	r3, r0
 80012ea:	3b0b      	subs	r3, #11
 80012ec:	2b1c      	cmp	r3, #28
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_ddiv+0x136>
 80012f0:	e18f      	b.n	8001612 <__aeabi_ddiv+0x456>
 80012f2:	0002      	movs	r2, r0
 80012f4:	4659      	mov	r1, fp
 80012f6:	3a08      	subs	r2, #8
 80012f8:	4091      	lsls	r1, r2
 80012fa:	468b      	mov	fp, r1
 80012fc:	211d      	movs	r1, #29
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4651      	mov	r1, sl
 8001302:	40d9      	lsrs	r1, r3
 8001304:	000b      	movs	r3, r1
 8001306:	4659      	mov	r1, fp
 8001308:	430b      	orrs	r3, r1
 800130a:	4651      	mov	r1, sl
 800130c:	469b      	mov	fp, r3
 800130e:	4091      	lsls	r1, r2
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <__aeabi_ddiv+0x1f0>)
 8001312:	2200      	movs	r2, #0
 8001314:	1a1b      	subs	r3, r3, r0
 8001316:	e78f      	b.n	8001238 <__aeabi_ddiv+0x7c>
 8001318:	2300      	movs	r3, #0
 800131a:	2201      	movs	r2, #1
 800131c:	469b      	mov	fp, r3
 800131e:	e78b      	b.n	8001238 <__aeabi_ddiv+0x7c>
 8001320:	4651      	mov	r1, sl
 8001322:	2203      	movs	r2, #3
 8001324:	e788      	b.n	8001238 <__aeabi_ddiv+0x7c>
 8001326:	2300      	movs	r3, #0
 8001328:	4698      	mov	r8, r3
 800132a:	3301      	adds	r3, #1
 800132c:	2604      	movs	r6, #4
 800132e:	2400      	movs	r4, #0
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	e767      	b.n	8001204 <__aeabi_ddiv+0x48>
 8001334:	2303      	movs	r3, #3
 8001336:	46b1      	mov	r9, r6
 8001338:	9303      	str	r3, [sp, #12]
 800133a:	260c      	movs	r6, #12
 800133c:	e762      	b.n	8001204 <__aeabi_ddiv+0x48>
 800133e:	2a03      	cmp	r2, #3
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x188>
 8001342:	e25c      	b.n	80017fe <__aeabi_ddiv+0x642>
 8001344:	9b01      	ldr	r3, [sp, #4]
 8001346:	2a01      	cmp	r2, #1
 8001348:	d000      	beq.n	800134c <__aeabi_ddiv+0x190>
 800134a:	e1e4      	b.n	8001716 <__aeabi_ddiv+0x55a>
 800134c:	4013      	ands	r3, r2
 800134e:	469c      	mov	ip, r3
 8001350:	2300      	movs	r3, #0
 8001352:	2400      	movs	r4, #0
 8001354:	2200      	movs	r2, #0
 8001356:	4698      	mov	r8, r3
 8001358:	2100      	movs	r1, #0
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	0b13      	lsrs	r3, r2, #12
 800135e:	0d0a      	lsrs	r2, r1, #20
 8001360:	0512      	lsls	r2, r2, #20
 8001362:	431a      	orrs	r2, r3
 8001364:	0523      	lsls	r3, r4, #20
 8001366:	4c12      	ldr	r4, [pc, #72]	; (80013b0 <__aeabi_ddiv+0x1f4>)
 8001368:	4640      	mov	r0, r8
 800136a:	4022      	ands	r2, r4
 800136c:	4313      	orrs	r3, r2
 800136e:	4662      	mov	r2, ip
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	07d2      	lsls	r2, r2, #31
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	4313      	orrs	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	b007      	add	sp, #28
 800137c:	bc3c      	pop	{r2, r3, r4, r5}
 800137e:	4690      	mov	r8, r2
 8001380:	4699      	mov	r9, r3
 8001382:	46a2      	mov	sl, r4
 8001384:	46ab      	mov	fp, r5
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	2300      	movs	r3, #0
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	469c      	mov	ip, r3
 800138e:	0312      	lsls	r2, r2, #12
 8001390:	4698      	mov	r8, r3
 8001392:	4c03      	ldr	r4, [pc, #12]	; (80013a0 <__aeabi_ddiv+0x1e4>)
 8001394:	e7e0      	b.n	8001358 <__aeabi_ddiv+0x19c>
 8001396:	2300      	movs	r3, #0
 8001398:	4c01      	ldr	r4, [pc, #4]	; (80013a0 <__aeabi_ddiv+0x1e4>)
 800139a:	2200      	movs	r2, #0
 800139c:	4698      	mov	r8, r3
 800139e:	e7db      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	fffffc01 	.word	0xfffffc01
 80013a8:	080051b8 	.word	0x080051b8
 80013ac:	fffffc0d 	.word	0xfffffc0d
 80013b0:	800fffff 	.word	0x800fffff
 80013b4:	45d9      	cmp	r9, fp
 80013b6:	d900      	bls.n	80013ba <__aeabi_ddiv+0x1fe>
 80013b8:	e139      	b.n	800162e <__aeabi_ddiv+0x472>
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x202>
 80013bc:	e134      	b.n	8001628 <__aeabi_ddiv+0x46c>
 80013be:	2300      	movs	r3, #0
 80013c0:	4646      	mov	r6, r8
 80013c2:	464d      	mov	r5, r9
 80013c4:	469a      	mov	sl, r3
 80013c6:	3c01      	subs	r4, #1
 80013c8:	465b      	mov	r3, fp
 80013ca:	0e0a      	lsrs	r2, r1, #24
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431a      	orrs	r2, r3
 80013d0:	020b      	lsls	r3, r1, #8
 80013d2:	0c17      	lsrs	r7, r2, #16
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	0413      	lsls	r3, r2, #16
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	0039      	movs	r1, r7
 80013dc:	0028      	movs	r0, r5
 80013de:	4690      	mov	r8, r2
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f7fe fea5 	bl	8000130 <__udivsi3>
 80013e6:	0002      	movs	r2, r0
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	4683      	mov	fp, r0
 80013ec:	435a      	muls	r2, r3
 80013ee:	0028      	movs	r0, r5
 80013f0:	0039      	movs	r1, r7
 80013f2:	4691      	mov	r9, r2
 80013f4:	f7fe ff22 	bl	800023c <__aeabi_uidivmod>
 80013f8:	0c35      	lsrs	r5, r6, #16
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	430d      	orrs	r5, r1
 80013fe:	45a9      	cmp	r9, r5
 8001400:	d90d      	bls.n	800141e <__aeabi_ddiv+0x262>
 8001402:	465b      	mov	r3, fp
 8001404:	4445      	add	r5, r8
 8001406:	3b01      	subs	r3, #1
 8001408:	45a8      	cmp	r8, r5
 800140a:	d900      	bls.n	800140e <__aeabi_ddiv+0x252>
 800140c:	e13a      	b.n	8001684 <__aeabi_ddiv+0x4c8>
 800140e:	45a9      	cmp	r9, r5
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x258>
 8001412:	e137      	b.n	8001684 <__aeabi_ddiv+0x4c8>
 8001414:	2302      	movs	r3, #2
 8001416:	425b      	negs	r3, r3
 8001418:	469c      	mov	ip, r3
 800141a:	4445      	add	r5, r8
 800141c:	44e3      	add	fp, ip
 800141e:	464b      	mov	r3, r9
 8001420:	1aeb      	subs	r3, r5, r3
 8001422:	0039      	movs	r1, r7
 8001424:	0018      	movs	r0, r3
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	f7fe fe82 	bl	8000130 <__udivsi3>
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	0005      	movs	r5, r0
 8001430:	4343      	muls	r3, r0
 8001432:	0039      	movs	r1, r7
 8001434:	9804      	ldr	r0, [sp, #16]
 8001436:	4699      	mov	r9, r3
 8001438:	f7fe ff00 	bl	800023c <__aeabi_uidivmod>
 800143c:	0433      	lsls	r3, r6, #16
 800143e:	0409      	lsls	r1, r1, #16
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	430b      	orrs	r3, r1
 8001444:	4599      	cmp	r9, r3
 8001446:	d909      	bls.n	800145c <__aeabi_ddiv+0x2a0>
 8001448:	4443      	add	r3, r8
 800144a:	1e6a      	subs	r2, r5, #1
 800144c:	4598      	cmp	r8, r3
 800144e:	d900      	bls.n	8001452 <__aeabi_ddiv+0x296>
 8001450:	e11a      	b.n	8001688 <__aeabi_ddiv+0x4cc>
 8001452:	4599      	cmp	r9, r3
 8001454:	d800      	bhi.n	8001458 <__aeabi_ddiv+0x29c>
 8001456:	e117      	b.n	8001688 <__aeabi_ddiv+0x4cc>
 8001458:	3d02      	subs	r5, #2
 800145a:	4443      	add	r3, r8
 800145c:	464a      	mov	r2, r9
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	465a      	mov	r2, fp
 8001462:	0412      	lsls	r2, r2, #16
 8001464:	432a      	orrs	r2, r5
 8001466:	9903      	ldr	r1, [sp, #12]
 8001468:	4693      	mov	fp, r2
 800146a:	0c10      	lsrs	r0, r2, #16
 800146c:	0c0a      	lsrs	r2, r1, #16
 800146e:	4691      	mov	r9, r2
 8001470:	0409      	lsls	r1, r1, #16
 8001472:	465a      	mov	r2, fp
 8001474:	0c09      	lsrs	r1, r1, #16
 8001476:	464e      	mov	r6, r9
 8001478:	000d      	movs	r5, r1
 800147a:	0412      	lsls	r2, r2, #16
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	4345      	muls	r5, r0
 8001480:	9105      	str	r1, [sp, #20]
 8001482:	4351      	muls	r1, r2
 8001484:	4372      	muls	r2, r6
 8001486:	4370      	muls	r0, r6
 8001488:	1952      	adds	r2, r2, r5
 800148a:	0c0e      	lsrs	r6, r1, #16
 800148c:	18b2      	adds	r2, r6, r2
 800148e:	4295      	cmp	r5, r2
 8001490:	d903      	bls.n	800149a <__aeabi_ddiv+0x2de>
 8001492:	2580      	movs	r5, #128	; 0x80
 8001494:	026d      	lsls	r5, r5, #9
 8001496:	46ac      	mov	ip, r5
 8001498:	4460      	add	r0, ip
 800149a:	0c15      	lsrs	r5, r2, #16
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	0412      	lsls	r2, r2, #16
 80014a0:	0c09      	lsrs	r1, r1, #16
 80014a2:	1828      	adds	r0, r5, r0
 80014a4:	1852      	adds	r2, r2, r1
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d200      	bcs.n	80014ac <__aeabi_ddiv+0x2f0>
 80014aa:	e0ce      	b.n	800164a <__aeabi_ddiv+0x48e>
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x2f4>
 80014ae:	e0c8      	b.n	8001642 <__aeabi_ddiv+0x486>
 80014b0:	1a1d      	subs	r5, r3, r0
 80014b2:	4653      	mov	r3, sl
 80014b4:	1a9e      	subs	r6, r3, r2
 80014b6:	45b2      	cmp	sl, r6
 80014b8:	4192      	sbcs	r2, r2
 80014ba:	4252      	negs	r2, r2
 80014bc:	1aab      	subs	r3, r5, r2
 80014be:	469a      	mov	sl, r3
 80014c0:	4598      	cmp	r8, r3
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x30a>
 80014c4:	e117      	b.n	80016f6 <__aeabi_ddiv+0x53a>
 80014c6:	0039      	movs	r1, r7
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7fe fe31 	bl	8000130 <__udivsi3>
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	0005      	movs	r5, r0
 80014d2:	4343      	muls	r3, r0
 80014d4:	0039      	movs	r1, r7
 80014d6:	4650      	mov	r0, sl
 80014d8:	9304      	str	r3, [sp, #16]
 80014da:	f7fe feaf 	bl	800023c <__aeabi_uidivmod>
 80014de:	9804      	ldr	r0, [sp, #16]
 80014e0:	040b      	lsls	r3, r1, #16
 80014e2:	0c31      	lsrs	r1, r6, #16
 80014e4:	4319      	orrs	r1, r3
 80014e6:	4288      	cmp	r0, r1
 80014e8:	d909      	bls.n	80014fe <__aeabi_ddiv+0x342>
 80014ea:	4441      	add	r1, r8
 80014ec:	1e6b      	subs	r3, r5, #1
 80014ee:	4588      	cmp	r8, r1
 80014f0:	d900      	bls.n	80014f4 <__aeabi_ddiv+0x338>
 80014f2:	e107      	b.n	8001704 <__aeabi_ddiv+0x548>
 80014f4:	4288      	cmp	r0, r1
 80014f6:	d800      	bhi.n	80014fa <__aeabi_ddiv+0x33e>
 80014f8:	e104      	b.n	8001704 <__aeabi_ddiv+0x548>
 80014fa:	3d02      	subs	r5, #2
 80014fc:	4441      	add	r1, r8
 80014fe:	9b04      	ldr	r3, [sp, #16]
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	0018      	movs	r0, r3
 8001504:	0039      	movs	r1, r7
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	f7fe fe12 	bl	8000130 <__udivsi3>
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	4682      	mov	sl, r0
 8001510:	4343      	muls	r3, r0
 8001512:	0039      	movs	r1, r7
 8001514:	9804      	ldr	r0, [sp, #16]
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f7fe fe90 	bl	800023c <__aeabi_uidivmod>
 800151c:	9801      	ldr	r0, [sp, #4]
 800151e:	040b      	lsls	r3, r1, #16
 8001520:	0431      	lsls	r1, r6, #16
 8001522:	0c09      	lsrs	r1, r1, #16
 8001524:	4319      	orrs	r1, r3
 8001526:	4288      	cmp	r0, r1
 8001528:	d90d      	bls.n	8001546 <__aeabi_ddiv+0x38a>
 800152a:	4653      	mov	r3, sl
 800152c:	4441      	add	r1, r8
 800152e:	3b01      	subs	r3, #1
 8001530:	4588      	cmp	r8, r1
 8001532:	d900      	bls.n	8001536 <__aeabi_ddiv+0x37a>
 8001534:	e0e8      	b.n	8001708 <__aeabi_ddiv+0x54c>
 8001536:	4288      	cmp	r0, r1
 8001538:	d800      	bhi.n	800153c <__aeabi_ddiv+0x380>
 800153a:	e0e5      	b.n	8001708 <__aeabi_ddiv+0x54c>
 800153c:	2302      	movs	r3, #2
 800153e:	425b      	negs	r3, r3
 8001540:	469c      	mov	ip, r3
 8001542:	4441      	add	r1, r8
 8001544:	44e2      	add	sl, ip
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	042d      	lsls	r5, r5, #16
 800154a:	1ace      	subs	r6, r1, r3
 800154c:	4651      	mov	r1, sl
 800154e:	4329      	orrs	r1, r5
 8001550:	9d05      	ldr	r5, [sp, #20]
 8001552:	464f      	mov	r7, r9
 8001554:	002a      	movs	r2, r5
 8001556:	040b      	lsls	r3, r1, #16
 8001558:	0c08      	lsrs	r0, r1, #16
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	435a      	muls	r2, r3
 800155e:	4345      	muls	r5, r0
 8001560:	437b      	muls	r3, r7
 8001562:	4378      	muls	r0, r7
 8001564:	195b      	adds	r3, r3, r5
 8001566:	0c17      	lsrs	r7, r2, #16
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	429d      	cmp	r5, r3
 800156c:	d903      	bls.n	8001576 <__aeabi_ddiv+0x3ba>
 800156e:	2580      	movs	r5, #128	; 0x80
 8001570:	026d      	lsls	r5, r5, #9
 8001572:	46ac      	mov	ip, r5
 8001574:	4460      	add	r0, ip
 8001576:	0c1d      	lsrs	r5, r3, #16
 8001578:	0412      	lsls	r2, r2, #16
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	0c12      	lsrs	r2, r2, #16
 800157e:	1828      	adds	r0, r5, r0
 8001580:	189b      	adds	r3, r3, r2
 8001582:	4286      	cmp	r6, r0
 8001584:	d200      	bcs.n	8001588 <__aeabi_ddiv+0x3cc>
 8001586:	e093      	b.n	80016b0 <__aeabi_ddiv+0x4f4>
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x3d0>
 800158a:	e08e      	b.n	80016aa <__aeabi_ddiv+0x4ee>
 800158c:	2301      	movs	r3, #1
 800158e:	4319      	orrs	r1, r3
 8001590:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <__aeabi_ddiv+0x658>)
 8001592:	18e3      	adds	r3, r4, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	dc00      	bgt.n	800159a <__aeabi_ddiv+0x3de>
 8001598:	e099      	b.n	80016ce <__aeabi_ddiv+0x512>
 800159a:	074a      	lsls	r2, r1, #29
 800159c:	d000      	beq.n	80015a0 <__aeabi_ddiv+0x3e4>
 800159e:	e09e      	b.n	80016de <__aeabi_ddiv+0x522>
 80015a0:	465a      	mov	r2, fp
 80015a2:	01d2      	lsls	r2, r2, #7
 80015a4:	d506      	bpl.n	80015b4 <__aeabi_ddiv+0x3f8>
 80015a6:	465a      	mov	r2, fp
 80015a8:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <__aeabi_ddiv+0x65c>)
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	4693      	mov	fp, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	18e3      	adds	r3, r4, r3
 80015b4:	4a99      	ldr	r2, [pc, #612]	; (800181c <__aeabi_ddiv+0x660>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	dd68      	ble.n	800168c <__aeabi_ddiv+0x4d0>
 80015ba:	2301      	movs	r3, #1
 80015bc:	9a02      	ldr	r2, [sp, #8]
 80015be:	4c98      	ldr	r4, [pc, #608]	; (8001820 <__aeabi_ddiv+0x664>)
 80015c0:	401a      	ands	r2, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	4694      	mov	ip, r2
 80015c6:	4698      	mov	r8, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	e6c5      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	464b      	mov	r3, r9
 80015d0:	0312      	lsls	r2, r2, #12
 80015d2:	4213      	tst	r3, r2
 80015d4:	d00a      	beq.n	80015ec <__aeabi_ddiv+0x430>
 80015d6:	465b      	mov	r3, fp
 80015d8:	4213      	tst	r3, r2
 80015da:	d106      	bne.n	80015ea <__aeabi_ddiv+0x42e>
 80015dc:	431a      	orrs	r2, r3
 80015de:	0312      	lsls	r2, r2, #12
 80015e0:	0b12      	lsrs	r2, r2, #12
 80015e2:	46ac      	mov	ip, r5
 80015e4:	4688      	mov	r8, r1
 80015e6:	4c8e      	ldr	r4, [pc, #568]	; (8001820 <__aeabi_ddiv+0x664>)
 80015e8:	e6b6      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80015ea:	464b      	mov	r3, r9
 80015ec:	431a      	orrs	r2, r3
 80015ee:	0312      	lsls	r2, r2, #12
 80015f0:	0b12      	lsrs	r2, r2, #12
 80015f2:	46bc      	mov	ip, r7
 80015f4:	4c8a      	ldr	r4, [pc, #552]	; (8001820 <__aeabi_ddiv+0x664>)
 80015f6:	e6af      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80015f8:	0003      	movs	r3, r0
 80015fa:	465a      	mov	r2, fp
 80015fc:	3b28      	subs	r3, #40	; 0x28
 80015fe:	409a      	lsls	r2, r3
 8001600:	2300      	movs	r3, #0
 8001602:	4691      	mov	r9, r2
 8001604:	4698      	mov	r8, r3
 8001606:	e657      	b.n	80012b8 <__aeabi_ddiv+0xfc>
 8001608:	4658      	mov	r0, fp
 800160a:	f001 f87d 	bl	8002708 <__clzsi2>
 800160e:	3020      	adds	r0, #32
 8001610:	e640      	b.n	8001294 <__aeabi_ddiv+0xd8>
 8001612:	0003      	movs	r3, r0
 8001614:	4652      	mov	r2, sl
 8001616:	3b28      	subs	r3, #40	; 0x28
 8001618:	409a      	lsls	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	4693      	mov	fp, r2
 800161e:	e677      	b.n	8001310 <__aeabi_ddiv+0x154>
 8001620:	f001 f872 	bl	8002708 <__clzsi2>
 8001624:	3020      	adds	r0, #32
 8001626:	e65f      	b.n	80012e8 <__aeabi_ddiv+0x12c>
 8001628:	4588      	cmp	r8, r1
 800162a:	d200      	bcs.n	800162e <__aeabi_ddiv+0x472>
 800162c:	e6c7      	b.n	80013be <__aeabi_ddiv+0x202>
 800162e:	464b      	mov	r3, r9
 8001630:	07de      	lsls	r6, r3, #31
 8001632:	085d      	lsrs	r5, r3, #1
 8001634:	4643      	mov	r3, r8
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	431e      	orrs	r6, r3
 800163a:	4643      	mov	r3, r8
 800163c:	07db      	lsls	r3, r3, #31
 800163e:	469a      	mov	sl, r3
 8001640:	e6c2      	b.n	80013c8 <__aeabi_ddiv+0x20c>
 8001642:	2500      	movs	r5, #0
 8001644:	4592      	cmp	sl, r2
 8001646:	d300      	bcc.n	800164a <__aeabi_ddiv+0x48e>
 8001648:	e733      	b.n	80014b2 <__aeabi_ddiv+0x2f6>
 800164a:	9e03      	ldr	r6, [sp, #12]
 800164c:	4659      	mov	r1, fp
 800164e:	46b4      	mov	ip, r6
 8001650:	44e2      	add	sl, ip
 8001652:	45b2      	cmp	sl, r6
 8001654:	41ad      	sbcs	r5, r5
 8001656:	426d      	negs	r5, r5
 8001658:	4445      	add	r5, r8
 800165a:	18eb      	adds	r3, r5, r3
 800165c:	3901      	subs	r1, #1
 800165e:	4598      	cmp	r8, r3
 8001660:	d207      	bcs.n	8001672 <__aeabi_ddiv+0x4b6>
 8001662:	4298      	cmp	r0, r3
 8001664:	d900      	bls.n	8001668 <__aeabi_ddiv+0x4ac>
 8001666:	e07f      	b.n	8001768 <__aeabi_ddiv+0x5ac>
 8001668:	d100      	bne.n	800166c <__aeabi_ddiv+0x4b0>
 800166a:	e0bc      	b.n	80017e6 <__aeabi_ddiv+0x62a>
 800166c:	1a1d      	subs	r5, r3, r0
 800166e:	468b      	mov	fp, r1
 8001670:	e71f      	b.n	80014b2 <__aeabi_ddiv+0x2f6>
 8001672:	4598      	cmp	r8, r3
 8001674:	d1fa      	bne.n	800166c <__aeabi_ddiv+0x4b0>
 8001676:	9d03      	ldr	r5, [sp, #12]
 8001678:	4555      	cmp	r5, sl
 800167a:	d9f2      	bls.n	8001662 <__aeabi_ddiv+0x4a6>
 800167c:	4643      	mov	r3, r8
 800167e:	468b      	mov	fp, r1
 8001680:	1a1d      	subs	r5, r3, r0
 8001682:	e716      	b.n	80014b2 <__aeabi_ddiv+0x2f6>
 8001684:	469b      	mov	fp, r3
 8001686:	e6ca      	b.n	800141e <__aeabi_ddiv+0x262>
 8001688:	0015      	movs	r5, r2
 800168a:	e6e7      	b.n	800145c <__aeabi_ddiv+0x2a0>
 800168c:	465a      	mov	r2, fp
 800168e:	08c9      	lsrs	r1, r1, #3
 8001690:	0752      	lsls	r2, r2, #29
 8001692:	430a      	orrs	r2, r1
 8001694:	055b      	lsls	r3, r3, #21
 8001696:	4690      	mov	r8, r2
 8001698:	0d5c      	lsrs	r4, r3, #21
 800169a:	465a      	mov	r2, fp
 800169c:	2301      	movs	r3, #1
 800169e:	9902      	ldr	r1, [sp, #8]
 80016a0:	0252      	lsls	r2, r2, #9
 80016a2:	4019      	ands	r1, r3
 80016a4:	0b12      	lsrs	r2, r2, #12
 80016a6:	468c      	mov	ip, r1
 80016a8:	e656      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x4f4>
 80016ae:	e76f      	b.n	8001590 <__aeabi_ddiv+0x3d4>
 80016b0:	4446      	add	r6, r8
 80016b2:	1e4a      	subs	r2, r1, #1
 80016b4:	45b0      	cmp	r8, r6
 80016b6:	d929      	bls.n	800170c <__aeabi_ddiv+0x550>
 80016b8:	0011      	movs	r1, r2
 80016ba:	4286      	cmp	r6, r0
 80016bc:	d000      	beq.n	80016c0 <__aeabi_ddiv+0x504>
 80016be:	e765      	b.n	800158c <__aeabi_ddiv+0x3d0>
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d000      	beq.n	80016c8 <__aeabi_ddiv+0x50c>
 80016c6:	e761      	b.n	800158c <__aeabi_ddiv+0x3d0>
 80016c8:	e762      	b.n	8001590 <__aeabi_ddiv+0x3d4>
 80016ca:	2101      	movs	r1, #1
 80016cc:	4249      	negs	r1, r1
 80016ce:	2001      	movs	r0, #1
 80016d0:	1ac2      	subs	r2, r0, r3
 80016d2:	2a38      	cmp	r2, #56	; 0x38
 80016d4:	dd21      	ble.n	800171a <__aeabi_ddiv+0x55e>
 80016d6:	9b02      	ldr	r3, [sp, #8]
 80016d8:	4003      	ands	r3, r0
 80016da:	469c      	mov	ip, r3
 80016dc:	e638      	b.n	8001350 <__aeabi_ddiv+0x194>
 80016de:	220f      	movs	r2, #15
 80016e0:	400a      	ands	r2, r1
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x52c>
 80016e6:	e75b      	b.n	80015a0 <__aeabi_ddiv+0x3e4>
 80016e8:	000a      	movs	r2, r1
 80016ea:	1d11      	adds	r1, r2, #4
 80016ec:	4291      	cmp	r1, r2
 80016ee:	4192      	sbcs	r2, r2
 80016f0:	4252      	negs	r2, r2
 80016f2:	4493      	add	fp, r2
 80016f4:	e754      	b.n	80015a0 <__aeabi_ddiv+0x3e4>
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <__aeabi_ddiv+0x658>)
 80016f8:	18e3      	adds	r3, r4, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dde5      	ble.n	80016ca <__aeabi_ddiv+0x50e>
 80016fe:	2201      	movs	r2, #1
 8001700:	4252      	negs	r2, r2
 8001702:	e7f2      	b.n	80016ea <__aeabi_ddiv+0x52e>
 8001704:	001d      	movs	r5, r3
 8001706:	e6fa      	b.n	80014fe <__aeabi_ddiv+0x342>
 8001708:	469a      	mov	sl, r3
 800170a:	e71c      	b.n	8001546 <__aeabi_ddiv+0x38a>
 800170c:	42b0      	cmp	r0, r6
 800170e:	d839      	bhi.n	8001784 <__aeabi_ddiv+0x5c8>
 8001710:	d06e      	beq.n	80017f0 <__aeabi_ddiv+0x634>
 8001712:	0011      	movs	r1, r2
 8001714:	e73a      	b.n	800158c <__aeabi_ddiv+0x3d0>
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	e73a      	b.n	8001590 <__aeabi_ddiv+0x3d4>
 800171a:	2a1f      	cmp	r2, #31
 800171c:	dc3c      	bgt.n	8001798 <__aeabi_ddiv+0x5dc>
 800171e:	2320      	movs	r3, #32
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	000c      	movs	r4, r1
 8001724:	4658      	mov	r0, fp
 8001726:	4099      	lsls	r1, r3
 8001728:	4098      	lsls	r0, r3
 800172a:	1e4b      	subs	r3, r1, #1
 800172c:	4199      	sbcs	r1, r3
 800172e:	465b      	mov	r3, fp
 8001730:	40d4      	lsrs	r4, r2
 8001732:	40d3      	lsrs	r3, r2
 8001734:	4320      	orrs	r0, r4
 8001736:	4308      	orrs	r0, r1
 8001738:	001a      	movs	r2, r3
 800173a:	0743      	lsls	r3, r0, #29
 800173c:	d009      	beq.n	8001752 <__aeabi_ddiv+0x596>
 800173e:	230f      	movs	r3, #15
 8001740:	4003      	ands	r3, r0
 8001742:	2b04      	cmp	r3, #4
 8001744:	d005      	beq.n	8001752 <__aeabi_ddiv+0x596>
 8001746:	0001      	movs	r1, r0
 8001748:	1d08      	adds	r0, r1, #4
 800174a:	4288      	cmp	r0, r1
 800174c:	419b      	sbcs	r3, r3
 800174e:	425b      	negs	r3, r3
 8001750:	18d2      	adds	r2, r2, r3
 8001752:	0213      	lsls	r3, r2, #8
 8001754:	d53a      	bpl.n	80017cc <__aeabi_ddiv+0x610>
 8001756:	2301      	movs	r3, #1
 8001758:	9a02      	ldr	r2, [sp, #8]
 800175a:	2401      	movs	r4, #1
 800175c:	401a      	ands	r2, r3
 800175e:	2300      	movs	r3, #0
 8001760:	4694      	mov	ip, r2
 8001762:	4698      	mov	r8, r3
 8001764:	2200      	movs	r2, #0
 8001766:	e5f7      	b.n	8001358 <__aeabi_ddiv+0x19c>
 8001768:	2102      	movs	r1, #2
 800176a:	4249      	negs	r1, r1
 800176c:	468c      	mov	ip, r1
 800176e:	9d03      	ldr	r5, [sp, #12]
 8001770:	44e3      	add	fp, ip
 8001772:	46ac      	mov	ip, r5
 8001774:	44e2      	add	sl, ip
 8001776:	45aa      	cmp	sl, r5
 8001778:	41ad      	sbcs	r5, r5
 800177a:	426d      	negs	r5, r5
 800177c:	4445      	add	r5, r8
 800177e:	18ed      	adds	r5, r5, r3
 8001780:	1a2d      	subs	r5, r5, r0
 8001782:	e696      	b.n	80014b2 <__aeabi_ddiv+0x2f6>
 8001784:	1e8a      	subs	r2, r1, #2
 8001786:	9903      	ldr	r1, [sp, #12]
 8001788:	004d      	lsls	r5, r1, #1
 800178a:	428d      	cmp	r5, r1
 800178c:	4189      	sbcs	r1, r1
 800178e:	4249      	negs	r1, r1
 8001790:	4441      	add	r1, r8
 8001792:	1876      	adds	r6, r6, r1
 8001794:	9503      	str	r5, [sp, #12]
 8001796:	e78f      	b.n	80016b8 <__aeabi_ddiv+0x4fc>
 8001798:	201f      	movs	r0, #31
 800179a:	4240      	negs	r0, r0
 800179c:	1ac3      	subs	r3, r0, r3
 800179e:	4658      	mov	r0, fp
 80017a0:	40d8      	lsrs	r0, r3
 80017a2:	0003      	movs	r3, r0
 80017a4:	2a20      	cmp	r2, #32
 80017a6:	d028      	beq.n	80017fa <__aeabi_ddiv+0x63e>
 80017a8:	2040      	movs	r0, #64	; 0x40
 80017aa:	465d      	mov	r5, fp
 80017ac:	1a82      	subs	r2, r0, r2
 80017ae:	4095      	lsls	r5, r2
 80017b0:	4329      	orrs	r1, r5
 80017b2:	1e4a      	subs	r2, r1, #1
 80017b4:	4191      	sbcs	r1, r2
 80017b6:	4319      	orrs	r1, r3
 80017b8:	2307      	movs	r3, #7
 80017ba:	2200      	movs	r2, #0
 80017bc:	400b      	ands	r3, r1
 80017be:	d009      	beq.n	80017d4 <__aeabi_ddiv+0x618>
 80017c0:	230f      	movs	r3, #15
 80017c2:	2200      	movs	r2, #0
 80017c4:	400b      	ands	r3, r1
 80017c6:	0008      	movs	r0, r1
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d1bd      	bne.n	8001748 <__aeabi_ddiv+0x58c>
 80017cc:	0001      	movs	r1, r0
 80017ce:	0753      	lsls	r3, r2, #29
 80017d0:	0252      	lsls	r2, r2, #9
 80017d2:	0b12      	lsrs	r2, r2, #12
 80017d4:	08c9      	lsrs	r1, r1, #3
 80017d6:	4319      	orrs	r1, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	4688      	mov	r8, r1
 80017dc:	9902      	ldr	r1, [sp, #8]
 80017de:	2400      	movs	r4, #0
 80017e0:	4019      	ands	r1, r3
 80017e2:	468c      	mov	ip, r1
 80017e4:	e5b8      	b.n	8001358 <__aeabi_ddiv+0x19c>
 80017e6:	4552      	cmp	r2, sl
 80017e8:	d8be      	bhi.n	8001768 <__aeabi_ddiv+0x5ac>
 80017ea:	468b      	mov	fp, r1
 80017ec:	2500      	movs	r5, #0
 80017ee:	e660      	b.n	80014b2 <__aeabi_ddiv+0x2f6>
 80017f0:	9d03      	ldr	r5, [sp, #12]
 80017f2:	429d      	cmp	r5, r3
 80017f4:	d3c6      	bcc.n	8001784 <__aeabi_ddiv+0x5c8>
 80017f6:	0011      	movs	r1, r2
 80017f8:	e762      	b.n	80016c0 <__aeabi_ddiv+0x504>
 80017fa:	2500      	movs	r5, #0
 80017fc:	e7d8      	b.n	80017b0 <__aeabi_ddiv+0x5f4>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	465b      	mov	r3, fp
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	431a      	orrs	r2, r3
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	0312      	lsls	r2, r2, #12
 800180a:	0b12      	lsrs	r2, r2, #12
 800180c:	469c      	mov	ip, r3
 800180e:	4688      	mov	r8, r1
 8001810:	4c03      	ldr	r4, [pc, #12]	; (8001820 <__aeabi_ddiv+0x664>)
 8001812:	e5a1      	b.n	8001358 <__aeabi_ddiv+0x19c>
 8001814:	000003ff 	.word	0x000003ff
 8001818:	feffffff 	.word	0xfeffffff
 800181c:	000007fe 	.word	0x000007fe
 8001820:	000007ff 	.word	0x000007ff

08001824 <__eqdf2>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	464f      	mov	r7, r9
 8001828:	4646      	mov	r6, r8
 800182a:	46d6      	mov	lr, sl
 800182c:	005c      	lsls	r4, r3, #1
 800182e:	b5c0      	push	{r6, r7, lr}
 8001830:	031f      	lsls	r7, r3, #12
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469a      	mov	sl, r3
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <__eqdf2+0x70>)
 8001838:	030e      	lsls	r6, r1, #12
 800183a:	004d      	lsls	r5, r1, #1
 800183c:	4684      	mov	ip, r0
 800183e:	4680      	mov	r8, r0
 8001840:	0b36      	lsrs	r6, r6, #12
 8001842:	0d6d      	lsrs	r5, r5, #21
 8001844:	0fc9      	lsrs	r1, r1, #31
 8001846:	4691      	mov	r9, r2
 8001848:	0b3f      	lsrs	r7, r7, #12
 800184a:	0d64      	lsrs	r4, r4, #21
 800184c:	2001      	movs	r0, #1
 800184e:	429d      	cmp	r5, r3
 8001850:	d008      	beq.n	8001864 <__eqdf2+0x40>
 8001852:	429c      	cmp	r4, r3
 8001854:	d001      	beq.n	800185a <__eqdf2+0x36>
 8001856:	42a5      	cmp	r5, r4
 8001858:	d00b      	beq.n	8001872 <__eqdf2+0x4e>
 800185a:	bc1c      	pop	{r2, r3, r4}
 800185c:	4690      	mov	r8, r2
 800185e:	4699      	mov	r9, r3
 8001860:	46a2      	mov	sl, r4
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	4663      	mov	r3, ip
 8001866:	4333      	orrs	r3, r6
 8001868:	d1f7      	bne.n	800185a <__eqdf2+0x36>
 800186a:	42ac      	cmp	r4, r5
 800186c:	d1f5      	bne.n	800185a <__eqdf2+0x36>
 800186e:	433a      	orrs	r2, r7
 8001870:	d1f3      	bne.n	800185a <__eqdf2+0x36>
 8001872:	2001      	movs	r0, #1
 8001874:	42be      	cmp	r6, r7
 8001876:	d1f0      	bne.n	800185a <__eqdf2+0x36>
 8001878:	45c8      	cmp	r8, r9
 800187a:	d1ee      	bne.n	800185a <__eqdf2+0x36>
 800187c:	4551      	cmp	r1, sl
 800187e:	d007      	beq.n	8001890 <__eqdf2+0x6c>
 8001880:	2d00      	cmp	r5, #0
 8001882:	d1ea      	bne.n	800185a <__eqdf2+0x36>
 8001884:	4663      	mov	r3, ip
 8001886:	431e      	orrs	r6, r3
 8001888:	0030      	movs	r0, r6
 800188a:	1e46      	subs	r6, r0, #1
 800188c:	41b0      	sbcs	r0, r6
 800188e:	e7e4      	b.n	800185a <__eqdf2+0x36>
 8001890:	2000      	movs	r0, #0
 8001892:	e7e2      	b.n	800185a <__eqdf2+0x36>
 8001894:	000007ff 	.word	0x000007ff

08001898 <__gedf2>:
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	4645      	mov	r5, r8
 800189c:	46de      	mov	lr, fp
 800189e:	4657      	mov	r7, sl
 80018a0:	464e      	mov	r6, r9
 80018a2:	b5e0      	push	{r5, r6, r7, lr}
 80018a4:	031f      	lsls	r7, r3, #12
 80018a6:	0b3d      	lsrs	r5, r7, #12
 80018a8:	4f2c      	ldr	r7, [pc, #176]	; (800195c <__gedf2+0xc4>)
 80018aa:	030e      	lsls	r6, r1, #12
 80018ac:	004c      	lsls	r4, r1, #1
 80018ae:	46ab      	mov	fp, r5
 80018b0:	005d      	lsls	r5, r3, #1
 80018b2:	4684      	mov	ip, r0
 80018b4:	0b36      	lsrs	r6, r6, #12
 80018b6:	0d64      	lsrs	r4, r4, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	4690      	mov	r8, r2
 80018bc:	0d6d      	lsrs	r5, r5, #21
 80018be:	0fdb      	lsrs	r3, r3, #31
 80018c0:	42bc      	cmp	r4, r7
 80018c2:	d02a      	beq.n	800191a <__gedf2+0x82>
 80018c4:	4f25      	ldr	r7, [pc, #148]	; (800195c <__gedf2+0xc4>)
 80018c6:	42bd      	cmp	r5, r7
 80018c8:	d02d      	beq.n	8001926 <__gedf2+0x8e>
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d10f      	bne.n	80018ee <__gedf2+0x56>
 80018ce:	4330      	orrs	r0, r6
 80018d0:	0007      	movs	r7, r0
 80018d2:	4681      	mov	r9, r0
 80018d4:	4278      	negs	r0, r7
 80018d6:	4178      	adcs	r0, r7
 80018d8:	b2c0      	uxtb	r0, r0
 80018da:	2d00      	cmp	r5, #0
 80018dc:	d117      	bne.n	800190e <__gedf2+0x76>
 80018de:	465f      	mov	r7, fp
 80018e0:	433a      	orrs	r2, r7
 80018e2:	d114      	bne.n	800190e <__gedf2+0x76>
 80018e4:	464b      	mov	r3, r9
 80018e6:	2000      	movs	r0, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00a      	beq.n	8001902 <__gedf2+0x6a>
 80018ec:	e006      	b.n	80018fc <__gedf2+0x64>
 80018ee:	2d00      	cmp	r5, #0
 80018f0:	d102      	bne.n	80018f8 <__gedf2+0x60>
 80018f2:	4658      	mov	r0, fp
 80018f4:	4302      	orrs	r2, r0
 80018f6:	d001      	beq.n	80018fc <__gedf2+0x64>
 80018f8:	4299      	cmp	r1, r3
 80018fa:	d018      	beq.n	800192e <__gedf2+0x96>
 80018fc:	4248      	negs	r0, r1
 80018fe:	2101      	movs	r1, #1
 8001900:	4308      	orrs	r0, r1
 8001902:	bc3c      	pop	{r2, r3, r4, r5}
 8001904:	4690      	mov	r8, r2
 8001906:	4699      	mov	r9, r3
 8001908:	46a2      	mov	sl, r4
 800190a:	46ab      	mov	fp, r5
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190e:	2800      	cmp	r0, #0
 8001910:	d0f2      	beq.n	80018f8 <__gedf2+0x60>
 8001912:	2001      	movs	r0, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	4318      	orrs	r0, r3
 8001918:	e7f3      	b.n	8001902 <__gedf2+0x6a>
 800191a:	0037      	movs	r7, r6
 800191c:	4307      	orrs	r7, r0
 800191e:	d0d1      	beq.n	80018c4 <__gedf2+0x2c>
 8001920:	2002      	movs	r0, #2
 8001922:	4240      	negs	r0, r0
 8001924:	e7ed      	b.n	8001902 <__gedf2+0x6a>
 8001926:	465f      	mov	r7, fp
 8001928:	4317      	orrs	r7, r2
 800192a:	d0ce      	beq.n	80018ca <__gedf2+0x32>
 800192c:	e7f8      	b.n	8001920 <__gedf2+0x88>
 800192e:	42ac      	cmp	r4, r5
 8001930:	dce4      	bgt.n	80018fc <__gedf2+0x64>
 8001932:	da03      	bge.n	800193c <__gedf2+0xa4>
 8001934:	1e48      	subs	r0, r1, #1
 8001936:	2101      	movs	r1, #1
 8001938:	4308      	orrs	r0, r1
 800193a:	e7e2      	b.n	8001902 <__gedf2+0x6a>
 800193c:	455e      	cmp	r6, fp
 800193e:	d8dd      	bhi.n	80018fc <__gedf2+0x64>
 8001940:	d006      	beq.n	8001950 <__gedf2+0xb8>
 8001942:	2000      	movs	r0, #0
 8001944:	455e      	cmp	r6, fp
 8001946:	d2dc      	bcs.n	8001902 <__gedf2+0x6a>
 8001948:	2301      	movs	r3, #1
 800194a:	1e48      	subs	r0, r1, #1
 800194c:	4318      	orrs	r0, r3
 800194e:	e7d8      	b.n	8001902 <__gedf2+0x6a>
 8001950:	45c4      	cmp	ip, r8
 8001952:	d8d3      	bhi.n	80018fc <__gedf2+0x64>
 8001954:	2000      	movs	r0, #0
 8001956:	45c4      	cmp	ip, r8
 8001958:	d3f6      	bcc.n	8001948 <__gedf2+0xb0>
 800195a:	e7d2      	b.n	8001902 <__gedf2+0x6a>
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	464e      	mov	r6, r9
 8001964:	4645      	mov	r5, r8
 8001966:	46de      	mov	lr, fp
 8001968:	4657      	mov	r7, sl
 800196a:	005c      	lsls	r4, r3, #1
 800196c:	b5e0      	push	{r5, r6, r7, lr}
 800196e:	031f      	lsls	r7, r3, #12
 8001970:	0fdb      	lsrs	r3, r3, #31
 8001972:	4699      	mov	r9, r3
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <__ledf2+0xc0>)
 8001976:	030e      	lsls	r6, r1, #12
 8001978:	004d      	lsls	r5, r1, #1
 800197a:	0fc9      	lsrs	r1, r1, #31
 800197c:	4684      	mov	ip, r0
 800197e:	0b36      	lsrs	r6, r6, #12
 8001980:	0d6d      	lsrs	r5, r5, #21
 8001982:	468b      	mov	fp, r1
 8001984:	4690      	mov	r8, r2
 8001986:	0b3f      	lsrs	r7, r7, #12
 8001988:	0d64      	lsrs	r4, r4, #21
 800198a:	429d      	cmp	r5, r3
 800198c:	d020      	beq.n	80019d0 <__ledf2+0x70>
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <__ledf2+0xc0>)
 8001990:	429c      	cmp	r4, r3
 8001992:	d022      	beq.n	80019da <__ledf2+0x7a>
 8001994:	2d00      	cmp	r5, #0
 8001996:	d112      	bne.n	80019be <__ledf2+0x5e>
 8001998:	4330      	orrs	r0, r6
 800199a:	4243      	negs	r3, r0
 800199c:	4143      	adcs	r3, r0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2c00      	cmp	r4, #0
 80019a2:	d01f      	beq.n	80019e4 <__ledf2+0x84>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <__ledf2+0x62>
 80019a8:	464b      	mov	r3, r9
 80019aa:	2001      	movs	r0, #1
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4303      	orrs	r3, r0
 80019b0:	0018      	movs	r0, r3
 80019b2:	bc3c      	pop	{r2, r3, r4, r5}
 80019b4:	4690      	mov	r8, r2
 80019b6:	4699      	mov	r9, r3
 80019b8:	46a2      	mov	sl, r4
 80019ba:	46ab      	mov	fp, r5
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d016      	beq.n	80019f0 <__ledf2+0x90>
 80019c2:	45cb      	cmp	fp, r9
 80019c4:	d017      	beq.n	80019f6 <__ledf2+0x96>
 80019c6:	465b      	mov	r3, fp
 80019c8:	4259      	negs	r1, r3
 80019ca:	2301      	movs	r3, #1
 80019cc:	430b      	orrs	r3, r1
 80019ce:	e7ef      	b.n	80019b0 <__ledf2+0x50>
 80019d0:	0031      	movs	r1, r6
 80019d2:	2302      	movs	r3, #2
 80019d4:	4301      	orrs	r1, r0
 80019d6:	d1eb      	bne.n	80019b0 <__ledf2+0x50>
 80019d8:	e7d9      	b.n	800198e <__ledf2+0x2e>
 80019da:	0039      	movs	r1, r7
 80019dc:	2302      	movs	r3, #2
 80019de:	4311      	orrs	r1, r2
 80019e0:	d1e6      	bne.n	80019b0 <__ledf2+0x50>
 80019e2:	e7d7      	b.n	8001994 <__ledf2+0x34>
 80019e4:	433a      	orrs	r2, r7
 80019e6:	d1dd      	bne.n	80019a4 <__ledf2+0x44>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d0e0      	beq.n	80019b0 <__ledf2+0x50>
 80019ee:	e7ea      	b.n	80019c6 <__ledf2+0x66>
 80019f0:	433a      	orrs	r2, r7
 80019f2:	d1e6      	bne.n	80019c2 <__ledf2+0x62>
 80019f4:	e7e7      	b.n	80019c6 <__ledf2+0x66>
 80019f6:	42a5      	cmp	r5, r4
 80019f8:	dce5      	bgt.n	80019c6 <__ledf2+0x66>
 80019fa:	db05      	blt.n	8001a08 <__ledf2+0xa8>
 80019fc:	42be      	cmp	r6, r7
 80019fe:	d8e2      	bhi.n	80019c6 <__ledf2+0x66>
 8001a00:	d007      	beq.n	8001a12 <__ledf2+0xb2>
 8001a02:	2300      	movs	r3, #0
 8001a04:	42be      	cmp	r6, r7
 8001a06:	d2d3      	bcs.n	80019b0 <__ledf2+0x50>
 8001a08:	4659      	mov	r1, fp
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	3901      	subs	r1, #1
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	e7ce      	b.n	80019b0 <__ledf2+0x50>
 8001a12:	45c4      	cmp	ip, r8
 8001a14:	d8d7      	bhi.n	80019c6 <__ledf2+0x66>
 8001a16:	2300      	movs	r3, #0
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d3f5      	bcc.n	8001a08 <__ledf2+0xa8>
 8001a1c:	e7c8      	b.n	80019b0 <__ledf2+0x50>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	000007ff 	.word	0x000007ff

08001a24 <__aeabi_dmul>:
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	4657      	mov	r7, sl
 8001a28:	4645      	mov	r5, r8
 8001a2a:	46de      	mov	lr, fp
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	b5e0      	push	{r5, r6, r7, lr}
 8001a30:	030c      	lsls	r4, r1, #12
 8001a32:	4698      	mov	r8, r3
 8001a34:	004e      	lsls	r6, r1, #1
 8001a36:	0b23      	lsrs	r3, r4, #12
 8001a38:	b087      	sub	sp, #28
 8001a3a:	0007      	movs	r7, r0
 8001a3c:	4692      	mov	sl, r2
 8001a3e:	469b      	mov	fp, r3
 8001a40:	0d76      	lsrs	r6, r6, #21
 8001a42:	0fcd      	lsrs	r5, r1, #31
 8001a44:	2e00      	cmp	r6, #0
 8001a46:	d06b      	beq.n	8001b20 <__aeabi_dmul+0xfc>
 8001a48:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <__aeabi_dmul+0x1dc>)
 8001a4a:	429e      	cmp	r6, r3
 8001a4c:	d035      	beq.n	8001aba <__aeabi_dmul+0x96>
 8001a4e:	2480      	movs	r4, #128	; 0x80
 8001a50:	465b      	mov	r3, fp
 8001a52:	0f42      	lsrs	r2, r0, #29
 8001a54:	0424      	lsls	r4, r4, #16
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	431c      	orrs	r4, r3
 8001a5c:	00c3      	lsls	r3, r0, #3
 8001a5e:	4699      	mov	r9, r3
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <__aeabi_dmul+0x1e0>)
 8001a62:	46a3      	mov	fp, r4
 8001a64:	469c      	mov	ip, r3
 8001a66:	2300      	movs	r3, #0
 8001a68:	2700      	movs	r7, #0
 8001a6a:	4466      	add	r6, ip
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	4643      	mov	r3, r8
 8001a70:	031c      	lsls	r4, r3, #12
 8001a72:	005a      	lsls	r2, r3, #1
 8001a74:	0fdb      	lsrs	r3, r3, #31
 8001a76:	4650      	mov	r0, sl
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	0d52      	lsrs	r2, r2, #21
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_dmul+0x5e>
 8001a80:	e076      	b.n	8001b70 <__aeabi_dmul+0x14c>
 8001a82:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <__aeabi_dmul+0x1dc>)
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d06d      	beq.n	8001b64 <__aeabi_dmul+0x140>
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	0f41      	lsrs	r1, r0, #29
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	495c      	ldr	r1, [pc, #368]	; (8001c04 <__aeabi_dmul+0x1e0>)
 8001a92:	00e4      	lsls	r4, r4, #3
 8001a94:	468c      	mov	ip, r1
 8001a96:	431c      	orrs	r4, r3
 8001a98:	00c3      	lsls	r3, r0, #3
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	4462      	add	r2, ip
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	18b6      	adds	r6, r6, r2
 8001aa2:	4069      	eors	r1, r5
 8001aa4:	1c72      	adds	r2, r6, #1
 8001aa6:	9101      	str	r1, [sp, #4]
 8001aa8:	4694      	mov	ip, r2
 8001aaa:	4307      	orrs	r7, r0
 8001aac:	2f0f      	cmp	r7, #15
 8001aae:	d900      	bls.n	8001ab2 <__aeabi_dmul+0x8e>
 8001ab0:	e0b0      	b.n	8001c14 <__aeabi_dmul+0x1f0>
 8001ab2:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <__aeabi_dmul+0x1e4>)
 8001ab4:	00bf      	lsls	r7, r7, #2
 8001ab6:	59d2      	ldr	r2, [r2, r7]
 8001ab8:	4697      	mov	pc, r2
 8001aba:	465b      	mov	r3, fp
 8001abc:	4303      	orrs	r3, r0
 8001abe:	4699      	mov	r9, r3
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dmul+0xa0>
 8001ac2:	e087      	b.n	8001bd4 <__aeabi_dmul+0x1b0>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	469b      	mov	fp, r3
 8001ac8:	3302      	adds	r3, #2
 8001aca:	2708      	movs	r7, #8
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	e7ce      	b.n	8001a6e <__aeabi_dmul+0x4a>
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d067      	beq.n	8001ba8 <__aeabi_dmul+0x184>
 8001ad8:	2803      	cmp	r0, #3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0xba>
 8001adc:	e20e      	b.n	8001efc <__aeabi_dmul+0x4d8>
 8001ade:	2801      	cmp	r0, #1
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0xc0>
 8001ae2:	e162      	b.n	8001daa <__aeabi_dmul+0x386>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4699      	mov	r9, r3
 8001aec:	9901      	ldr	r1, [sp, #4]
 8001aee:	4001      	ands	r1, r0
 8001af0:	b2cd      	uxtb	r5, r1
 8001af2:	2100      	movs	r1, #0
 8001af4:	0312      	lsls	r2, r2, #12
 8001af6:	0d0b      	lsrs	r3, r1, #20
 8001af8:	0b12      	lsrs	r2, r2, #12
 8001afa:	051b      	lsls	r3, r3, #20
 8001afc:	4313      	orrs	r3, r2
 8001afe:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <__aeabi_dmul+0x1e8>)
 8001b00:	0524      	lsls	r4, r4, #20
 8001b02:	4013      	ands	r3, r2
 8001b04:	431c      	orrs	r4, r3
 8001b06:	0064      	lsls	r4, r4, #1
 8001b08:	07ed      	lsls	r5, r5, #31
 8001b0a:	0864      	lsrs	r4, r4, #1
 8001b0c:	432c      	orrs	r4, r5
 8001b0e:	4648      	mov	r0, r9
 8001b10:	0021      	movs	r1, r4
 8001b12:	b007      	add	sp, #28
 8001b14:	bc3c      	pop	{r2, r3, r4, r5}
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	46a2      	mov	sl, r4
 8001b1c:	46ab      	mov	fp, r5
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b20:	4303      	orrs	r3, r0
 8001b22:	4699      	mov	r9, r3
 8001b24:	d04f      	beq.n	8001bc6 <__aeabi_dmul+0x1a2>
 8001b26:	465b      	mov	r3, fp
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x10a>
 8001b2c:	e189      	b.n	8001e42 <__aeabi_dmul+0x41e>
 8001b2e:	4658      	mov	r0, fp
 8001b30:	f000 fdea 	bl	8002708 <__clzsi2>
 8001b34:	0003      	movs	r3, r0
 8001b36:	3b0b      	subs	r3, #11
 8001b38:	2b1c      	cmp	r3, #28
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_dmul+0x11a>
 8001b3c:	e17a      	b.n	8001e34 <__aeabi_dmul+0x410>
 8001b3e:	221d      	movs	r2, #29
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	003a      	movs	r2, r7
 8001b44:	0001      	movs	r1, r0
 8001b46:	465c      	mov	r4, fp
 8001b48:	40da      	lsrs	r2, r3
 8001b4a:	3908      	subs	r1, #8
 8001b4c:	408c      	lsls	r4, r1
 8001b4e:	0013      	movs	r3, r2
 8001b50:	408f      	lsls	r7, r1
 8001b52:	4323      	orrs	r3, r4
 8001b54:	469b      	mov	fp, r3
 8001b56:	46b9      	mov	r9, r7
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4e2d      	ldr	r6, [pc, #180]	; (8001c10 <__aeabi_dmul+0x1ec>)
 8001b5c:	2700      	movs	r7, #0
 8001b5e:	1a36      	subs	r6, r6, r0
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	e784      	b.n	8001a6e <__aeabi_dmul+0x4a>
 8001b64:	4653      	mov	r3, sl
 8001b66:	4323      	orrs	r3, r4
 8001b68:	d12a      	bne.n	8001bc0 <__aeabi_dmul+0x19c>
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	e796      	b.n	8001a9e <__aeabi_dmul+0x7a>
 8001b70:	4653      	mov	r3, sl
 8001b72:	4323      	orrs	r3, r4
 8001b74:	d020      	beq.n	8001bb8 <__aeabi_dmul+0x194>
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dmul+0x158>
 8001b7a:	e157      	b.n	8001e2c <__aeabi_dmul+0x408>
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f000 fdc3 	bl	8002708 <__clzsi2>
 8001b82:	0003      	movs	r3, r0
 8001b84:	3b0b      	subs	r3, #11
 8001b86:	2b1c      	cmp	r3, #28
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dmul+0x168>
 8001b8a:	e149      	b.n	8001e20 <__aeabi_dmul+0x3fc>
 8001b8c:	211d      	movs	r1, #29
 8001b8e:	1acb      	subs	r3, r1, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	0002      	movs	r2, r0
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	4653      	mov	r3, sl
 8001b98:	3a08      	subs	r2, #8
 8001b9a:	4094      	lsls	r4, r2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	430c      	orrs	r4, r1
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <__aeabi_dmul+0x1ec>)
 8001ba2:	1a12      	subs	r2, r2, r0
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e77a      	b.n	8001a9e <__aeabi_dmul+0x7a>
 8001ba8:	2501      	movs	r5, #1
 8001baa:	9b01      	ldr	r3, [sp, #4]
 8001bac:	4c14      	ldr	r4, [pc, #80]	; (8001c00 <__aeabi_dmul+0x1dc>)
 8001bae:	401d      	ands	r5, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	e79c      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001bb8:	2400      	movs	r4, #0
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e76e      	b.n	8001a9e <__aeabi_dmul+0x7a>
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	e76b      	b.n	8001a9e <__aeabi_dmul+0x7a>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	469b      	mov	fp, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	2704      	movs	r7, #4
 8001bce:	2600      	movs	r6, #0
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	e74c      	b.n	8001a6e <__aeabi_dmul+0x4a>
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4681      	mov	r9, r0
 8001bd8:	270c      	movs	r7, #12
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	e747      	b.n	8001a6e <__aeabi_dmul+0x4a>
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	2300      	movs	r3, #0
 8001be2:	2500      	movs	r5, #0
 8001be4:	0312      	lsls	r2, r2, #12
 8001be6:	4699      	mov	r9, r3
 8001be8:	4c05      	ldr	r4, [pc, #20]	; (8001c00 <__aeabi_dmul+0x1dc>)
 8001bea:	e782      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001bec:	465c      	mov	r4, fp
 8001bee:	464b      	mov	r3, r9
 8001bf0:	9802      	ldr	r0, [sp, #8]
 8001bf2:	e76f      	b.n	8001ad4 <__aeabi_dmul+0xb0>
 8001bf4:	465c      	mov	r4, fp
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	9501      	str	r5, [sp, #4]
 8001bfa:	9802      	ldr	r0, [sp, #8]
 8001bfc:	e76a      	b.n	8001ad4 <__aeabi_dmul+0xb0>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	fffffc01 	.word	0xfffffc01
 8001c08:	080051f8 	.word	0x080051f8
 8001c0c:	800fffff 	.word	0x800fffff
 8001c10:	fffffc0d 	.word	0xfffffc0d
 8001c14:	464a      	mov	r2, r9
 8001c16:	4649      	mov	r1, r9
 8001c18:	0c17      	lsrs	r7, r2, #16
 8001c1a:	0c1a      	lsrs	r2, r3, #16
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	0408      	lsls	r0, r1, #16
 8001c22:	0019      	movs	r1, r3
 8001c24:	0c00      	lsrs	r0, r0, #16
 8001c26:	4341      	muls	r1, r0
 8001c28:	0015      	movs	r5, r2
 8001c2a:	4688      	mov	r8, r1
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	437d      	muls	r5, r7
 8001c30:	4379      	muls	r1, r7
 8001c32:	9503      	str	r5, [sp, #12]
 8001c34:	4689      	mov	r9, r1
 8001c36:	0029      	movs	r1, r5
 8001c38:	0015      	movs	r5, r2
 8001c3a:	4345      	muls	r5, r0
 8001c3c:	444d      	add	r5, r9
 8001c3e:	9502      	str	r5, [sp, #8]
 8001c40:	4645      	mov	r5, r8
 8001c42:	0c2d      	lsrs	r5, r5, #16
 8001c44:	46aa      	mov	sl, r5
 8001c46:	9d02      	ldr	r5, [sp, #8]
 8001c48:	4455      	add	r5, sl
 8001c4a:	45a9      	cmp	r9, r5
 8001c4c:	d906      	bls.n	8001c5c <__aeabi_dmul+0x238>
 8001c4e:	468a      	mov	sl, r1
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0249      	lsls	r1, r1, #9
 8001c54:	4689      	mov	r9, r1
 8001c56:	44ca      	add	sl, r9
 8001c58:	4651      	mov	r1, sl
 8001c5a:	9103      	str	r1, [sp, #12]
 8001c5c:	0c29      	lsrs	r1, r5, #16
 8001c5e:	9104      	str	r1, [sp, #16]
 8001c60:	4641      	mov	r1, r8
 8001c62:	0409      	lsls	r1, r1, #16
 8001c64:	042d      	lsls	r5, r5, #16
 8001c66:	0c09      	lsrs	r1, r1, #16
 8001c68:	4688      	mov	r8, r1
 8001c6a:	0029      	movs	r1, r5
 8001c6c:	0c25      	lsrs	r5, r4, #16
 8001c6e:	0424      	lsls	r4, r4, #16
 8001c70:	4441      	add	r1, r8
 8001c72:	0c24      	lsrs	r4, r4, #16
 8001c74:	9105      	str	r1, [sp, #20]
 8001c76:	0021      	movs	r1, r4
 8001c78:	4341      	muls	r1, r0
 8001c7a:	4688      	mov	r8, r1
 8001c7c:	0021      	movs	r1, r4
 8001c7e:	4379      	muls	r1, r7
 8001c80:	468a      	mov	sl, r1
 8001c82:	4368      	muls	r0, r5
 8001c84:	4641      	mov	r1, r8
 8001c86:	4450      	add	r0, sl
 8001c88:	4681      	mov	r9, r0
 8001c8a:	0c08      	lsrs	r0, r1, #16
 8001c8c:	4448      	add	r0, r9
 8001c8e:	436f      	muls	r7, r5
 8001c90:	4582      	cmp	sl, r0
 8001c92:	d903      	bls.n	8001c9c <__aeabi_dmul+0x278>
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0249      	lsls	r1, r1, #9
 8001c98:	4689      	mov	r9, r1
 8001c9a:	444f      	add	r7, r9
 8001c9c:	0c01      	lsrs	r1, r0, #16
 8001c9e:	4689      	mov	r9, r1
 8001ca0:	0039      	movs	r1, r7
 8001ca2:	4449      	add	r1, r9
 8001ca4:	9102      	str	r1, [sp, #8]
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	040f      	lsls	r7, r1, #16
 8001caa:	9904      	ldr	r1, [sp, #16]
 8001cac:	0c3f      	lsrs	r7, r7, #16
 8001cae:	4688      	mov	r8, r1
 8001cb0:	0400      	lsls	r0, r0, #16
 8001cb2:	19c0      	adds	r0, r0, r7
 8001cb4:	4480      	add	r8, r0
 8001cb6:	4641      	mov	r1, r8
 8001cb8:	9104      	str	r1, [sp, #16]
 8001cba:	4659      	mov	r1, fp
 8001cbc:	0c0f      	lsrs	r7, r1, #16
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	0c09      	lsrs	r1, r1, #16
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	4359      	muls	r1, r3
 8001cc6:	468a      	mov	sl, r1
 8001cc8:	0039      	movs	r1, r7
 8001cca:	4351      	muls	r1, r2
 8001ccc:	4689      	mov	r9, r1
 8001cce:	4641      	mov	r1, r8
 8001cd0:	434a      	muls	r2, r1
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	0c09      	lsrs	r1, r1, #16
 8001cd6:	468b      	mov	fp, r1
 8001cd8:	437b      	muls	r3, r7
 8001cda:	18d2      	adds	r2, r2, r3
 8001cdc:	445a      	add	r2, fp
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d903      	bls.n	8001cea <__aeabi_dmul+0x2c6>
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	44d9      	add	r9, fp
 8001cea:	4651      	mov	r1, sl
 8001cec:	0409      	lsls	r1, r1, #16
 8001cee:	0c09      	lsrs	r1, r1, #16
 8001cf0:	468a      	mov	sl, r1
 8001cf2:	4641      	mov	r1, r8
 8001cf4:	4361      	muls	r1, r4
 8001cf6:	437c      	muls	r4, r7
 8001cf8:	0c13      	lsrs	r3, r2, #16
 8001cfa:	0412      	lsls	r2, r2, #16
 8001cfc:	444b      	add	r3, r9
 8001cfe:	4452      	add	r2, sl
 8001d00:	46a1      	mov	r9, r4
 8001d02:	468a      	mov	sl, r1
 8001d04:	003c      	movs	r4, r7
 8001d06:	4641      	mov	r1, r8
 8001d08:	436c      	muls	r4, r5
 8001d0a:	434d      	muls	r5, r1
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	444d      	add	r5, r9
 8001d10:	0c0f      	lsrs	r7, r1, #16
 8001d12:	197d      	adds	r5, r7, r5
 8001d14:	45a9      	cmp	r9, r5
 8001d16:	d903      	bls.n	8001d20 <__aeabi_dmul+0x2fc>
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	4688      	mov	r8, r1
 8001d1e:	4444      	add	r4, r8
 8001d20:	9f04      	ldr	r7, [sp, #16]
 8001d22:	9903      	ldr	r1, [sp, #12]
 8001d24:	46b8      	mov	r8, r7
 8001d26:	4441      	add	r1, r8
 8001d28:	468b      	mov	fp, r1
 8001d2a:	4583      	cmp	fp, r0
 8001d2c:	4180      	sbcs	r0, r0
 8001d2e:	4241      	negs	r1, r0
 8001d30:	4688      	mov	r8, r1
 8001d32:	4651      	mov	r1, sl
 8001d34:	0408      	lsls	r0, r1, #16
 8001d36:	042f      	lsls	r7, r5, #16
 8001d38:	0c00      	lsrs	r0, r0, #16
 8001d3a:	183f      	adds	r7, r7, r0
 8001d3c:	4658      	mov	r0, fp
 8001d3e:	9902      	ldr	r1, [sp, #8]
 8001d40:	1810      	adds	r0, r2, r0
 8001d42:	4689      	mov	r9, r1
 8001d44:	4290      	cmp	r0, r2
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	444f      	add	r7, r9
 8001d4a:	46ba      	mov	sl, r7
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	4699      	mov	r9, r3
 8001d50:	4693      	mov	fp, r2
 8001d52:	44c2      	add	sl, r8
 8001d54:	44d1      	add	r9, sl
 8001d56:	44cb      	add	fp, r9
 8001d58:	428f      	cmp	r7, r1
 8001d5a:	41bf      	sbcs	r7, r7
 8001d5c:	45c2      	cmp	sl, r8
 8001d5e:	4189      	sbcs	r1, r1
 8001d60:	4599      	cmp	r9, r3
 8001d62:	419b      	sbcs	r3, r3
 8001d64:	4593      	cmp	fp, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	427f      	negs	r7, r7
 8001d6a:	4249      	negs	r1, r1
 8001d6c:	0c2d      	lsrs	r5, r5, #16
 8001d6e:	4252      	negs	r2, r2
 8001d70:	430f      	orrs	r7, r1
 8001d72:	425b      	negs	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	197f      	adds	r7, r7, r5
 8001d78:	18ff      	adds	r7, r7, r3
 8001d7a:	465b      	mov	r3, fp
 8001d7c:	193c      	adds	r4, r7, r4
 8001d7e:	0ddb      	lsrs	r3, r3, #23
 8001d80:	9a05      	ldr	r2, [sp, #20]
 8001d82:	0264      	lsls	r4, r4, #9
 8001d84:	431c      	orrs	r4, r3
 8001d86:	0243      	lsls	r3, r0, #9
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	1e5d      	subs	r5, r3, #1
 8001d8c:	41ab      	sbcs	r3, r5
 8001d8e:	465a      	mov	r2, fp
 8001d90:	0dc0      	lsrs	r0, r0, #23
 8001d92:	4303      	orrs	r3, r0
 8001d94:	0252      	lsls	r2, r2, #9
 8001d96:	4313      	orrs	r3, r2
 8001d98:	01e2      	lsls	r2, r4, #7
 8001d9a:	d556      	bpl.n	8001e4a <__aeabi_dmul+0x426>
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	085a      	lsrs	r2, r3, #1
 8001da0:	4003      	ands	r3, r0
 8001da2:	4313      	orrs	r3, r2
 8001da4:	07e2      	lsls	r2, r4, #31
 8001da6:	4313      	orrs	r3, r2
 8001da8:	0864      	lsrs	r4, r4, #1
 8001daa:	485a      	ldr	r0, [pc, #360]	; (8001f14 <__aeabi_dmul+0x4f0>)
 8001dac:	4460      	add	r0, ip
 8001dae:	2800      	cmp	r0, #0
 8001db0:	dd4d      	ble.n	8001e4e <__aeabi_dmul+0x42a>
 8001db2:	075a      	lsls	r2, r3, #29
 8001db4:	d009      	beq.n	8001dca <__aeabi_dmul+0x3a6>
 8001db6:	220f      	movs	r2, #15
 8001db8:	401a      	ands	r2, r3
 8001dba:	2a04      	cmp	r2, #4
 8001dbc:	d005      	beq.n	8001dca <__aeabi_dmul+0x3a6>
 8001dbe:	1d1a      	adds	r2, r3, #4
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	419b      	sbcs	r3, r3
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	18e4      	adds	r4, r4, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	01e2      	lsls	r2, r4, #7
 8001dcc:	d504      	bpl.n	8001dd8 <__aeabi_dmul+0x3b4>
 8001dce:	2080      	movs	r0, #128	; 0x80
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <__aeabi_dmul+0x4f4>)
 8001dd2:	00c0      	lsls	r0, r0, #3
 8001dd4:	4014      	ands	r4, r2
 8001dd6:	4460      	add	r0, ip
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <__aeabi_dmul+0x4f8>)
 8001dda:	4290      	cmp	r0, r2
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dmul+0x3bc>
 8001dde:	e6e3      	b.n	8001ba8 <__aeabi_dmul+0x184>
 8001de0:	2501      	movs	r5, #1
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	0762      	lsls	r2, r4, #29
 8001de6:	431a      	orrs	r2, r3
 8001de8:	0264      	lsls	r4, r4, #9
 8001dea:	9b01      	ldr	r3, [sp, #4]
 8001dec:	4691      	mov	r9, r2
 8001dee:	0b22      	lsrs	r2, r4, #12
 8001df0:	0544      	lsls	r4, r0, #21
 8001df2:	0d64      	lsrs	r4, r4, #21
 8001df4:	401d      	ands	r5, r3
 8001df6:	e67c      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	0312      	lsls	r2, r2, #12
 8001dfe:	4211      	tst	r1, r2
 8001e00:	d008      	beq.n	8001e14 <__aeabi_dmul+0x3f0>
 8001e02:	4214      	tst	r4, r2
 8001e04:	d106      	bne.n	8001e14 <__aeabi_dmul+0x3f0>
 8001e06:	4322      	orrs	r2, r4
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	0b12      	lsrs	r2, r2, #12
 8001e0c:	4645      	mov	r5, r8
 8001e0e:	4699      	mov	r9, r3
 8001e10:	4c43      	ldr	r4, [pc, #268]	; (8001f20 <__aeabi_dmul+0x4fc>)
 8001e12:	e66e      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001e14:	465b      	mov	r3, fp
 8001e16:	431a      	orrs	r2, r3
 8001e18:	0312      	lsls	r2, r2, #12
 8001e1a:	0b12      	lsrs	r2, r2, #12
 8001e1c:	4c40      	ldr	r4, [pc, #256]	; (8001f20 <__aeabi_dmul+0x4fc>)
 8001e1e:	e668      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001e20:	0003      	movs	r3, r0
 8001e22:	4654      	mov	r4, sl
 8001e24:	3b28      	subs	r3, #40	; 0x28
 8001e26:	409c      	lsls	r4, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e6b9      	b.n	8001ba0 <__aeabi_dmul+0x17c>
 8001e2c:	f000 fc6c 	bl	8002708 <__clzsi2>
 8001e30:	3020      	adds	r0, #32
 8001e32:	e6a6      	b.n	8001b82 <__aeabi_dmul+0x15e>
 8001e34:	0003      	movs	r3, r0
 8001e36:	3b28      	subs	r3, #40	; 0x28
 8001e38:	409f      	lsls	r7, r3
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	46bb      	mov	fp, r7
 8001e3e:	4699      	mov	r9, r3
 8001e40:	e68a      	b.n	8001b58 <__aeabi_dmul+0x134>
 8001e42:	f000 fc61 	bl	8002708 <__clzsi2>
 8001e46:	3020      	adds	r0, #32
 8001e48:	e674      	b.n	8001b34 <__aeabi_dmul+0x110>
 8001e4a:	46b4      	mov	ip, r6
 8001e4c:	e7ad      	b.n	8001daa <__aeabi_dmul+0x386>
 8001e4e:	2501      	movs	r5, #1
 8001e50:	1a2a      	subs	r2, r5, r0
 8001e52:	2a38      	cmp	r2, #56	; 0x38
 8001e54:	dd06      	ble.n	8001e64 <__aeabi_dmul+0x440>
 8001e56:	9b01      	ldr	r3, [sp, #4]
 8001e58:	2400      	movs	r4, #0
 8001e5a:	401d      	ands	r5, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4699      	mov	r9, r3
 8001e62:	e646      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001e64:	2a1f      	cmp	r2, #31
 8001e66:	dc21      	bgt.n	8001eac <__aeabi_dmul+0x488>
 8001e68:	2520      	movs	r5, #32
 8001e6a:	0020      	movs	r0, r4
 8001e6c:	1aad      	subs	r5, r5, r2
 8001e6e:	001e      	movs	r6, r3
 8001e70:	40ab      	lsls	r3, r5
 8001e72:	40a8      	lsls	r0, r5
 8001e74:	40d6      	lsrs	r6, r2
 8001e76:	1e5d      	subs	r5, r3, #1
 8001e78:	41ab      	sbcs	r3, r5
 8001e7a:	4330      	orrs	r0, r6
 8001e7c:	4318      	orrs	r0, r3
 8001e7e:	40d4      	lsrs	r4, r2
 8001e80:	0743      	lsls	r3, r0, #29
 8001e82:	d009      	beq.n	8001e98 <__aeabi_dmul+0x474>
 8001e84:	230f      	movs	r3, #15
 8001e86:	4003      	ands	r3, r0
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d005      	beq.n	8001e98 <__aeabi_dmul+0x474>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	1d18      	adds	r0, r3, #4
 8001e90:	4298      	cmp	r0, r3
 8001e92:	419b      	sbcs	r3, r3
 8001e94:	425b      	negs	r3, r3
 8001e96:	18e4      	adds	r4, r4, r3
 8001e98:	0223      	lsls	r3, r4, #8
 8001e9a:	d521      	bpl.n	8001ee0 <__aeabi_dmul+0x4bc>
 8001e9c:	2501      	movs	r5, #1
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	2401      	movs	r4, #1
 8001ea2:	401d      	ands	r5, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	e622      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001eac:	251f      	movs	r5, #31
 8001eae:	0021      	movs	r1, r4
 8001eb0:	426d      	negs	r5, r5
 8001eb2:	1a28      	subs	r0, r5, r0
 8001eb4:	40c1      	lsrs	r1, r0
 8001eb6:	0008      	movs	r0, r1
 8001eb8:	2a20      	cmp	r2, #32
 8001eba:	d01d      	beq.n	8001ef8 <__aeabi_dmul+0x4d4>
 8001ebc:	355f      	adds	r5, #95	; 0x5f
 8001ebe:	1aaa      	subs	r2, r5, r2
 8001ec0:	4094      	lsls	r4, r2
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	1e5c      	subs	r4, r3, #1
 8001ec6:	41a3      	sbcs	r3, r4
 8001ec8:	2507      	movs	r5, #7
 8001eca:	4303      	orrs	r3, r0
 8001ecc:	401d      	ands	r5, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	d009      	beq.n	8001ee8 <__aeabi_dmul+0x4c4>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	401a      	ands	r2, r3
 8001eda:	0018      	movs	r0, r3
 8001edc:	2a04      	cmp	r2, #4
 8001ede:	d1d6      	bne.n	8001e8e <__aeabi_dmul+0x46a>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0765      	lsls	r5, r4, #29
 8001ee4:	0264      	lsls	r4, r4, #9
 8001ee6:	0b22      	lsrs	r2, r4, #12
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	432b      	orrs	r3, r5
 8001eec:	2501      	movs	r5, #1
 8001eee:	4699      	mov	r9, r3
 8001ef0:	9b01      	ldr	r3, [sp, #4]
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	401d      	ands	r5, r3
 8001ef6:	e5fc      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001ef8:	2400      	movs	r4, #0
 8001efa:	e7e2      	b.n	8001ec2 <__aeabi_dmul+0x49e>
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	2501      	movs	r5, #1
 8001f00:	0312      	lsls	r2, r2, #12
 8001f02:	4322      	orrs	r2, r4
 8001f04:	9901      	ldr	r1, [sp, #4]
 8001f06:	0312      	lsls	r2, r2, #12
 8001f08:	0b12      	lsrs	r2, r2, #12
 8001f0a:	400d      	ands	r5, r1
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	4c04      	ldr	r4, [pc, #16]	; (8001f20 <__aeabi_dmul+0x4fc>)
 8001f10:	e5ef      	b.n	8001af2 <__aeabi_dmul+0xce>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	000003ff 	.word	0x000003ff
 8001f18:	feffffff 	.word	0xfeffffff
 8001f1c:	000007fe 	.word	0x000007fe
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__aeabi_dsub>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	4646      	mov	r6, r8
 8001f28:	46d6      	mov	lr, sl
 8001f2a:	464f      	mov	r7, r9
 8001f2c:	030c      	lsls	r4, r1, #12
 8001f2e:	b5c0      	push	{r6, r7, lr}
 8001f30:	0fcd      	lsrs	r5, r1, #31
 8001f32:	004e      	lsls	r6, r1, #1
 8001f34:	0a61      	lsrs	r1, r4, #9
 8001f36:	0f44      	lsrs	r4, r0, #29
 8001f38:	430c      	orrs	r4, r1
 8001f3a:	00c1      	lsls	r1, r0, #3
 8001f3c:	0058      	lsls	r0, r3, #1
 8001f3e:	0d40      	lsrs	r0, r0, #21
 8001f40:	4684      	mov	ip, r0
 8001f42:	468a      	mov	sl, r1
 8001f44:	000f      	movs	r7, r1
 8001f46:	0319      	lsls	r1, r3, #12
 8001f48:	0f50      	lsrs	r0, r2, #29
 8001f4a:	0a49      	lsrs	r1, r1, #9
 8001f4c:	4301      	orrs	r1, r0
 8001f4e:	48c6      	ldr	r0, [pc, #792]	; (8002268 <__aeabi_dsub+0x344>)
 8001f50:	0d76      	lsrs	r6, r6, #21
 8001f52:	46a8      	mov	r8, r5
 8001f54:	0fdb      	lsrs	r3, r3, #31
 8001f56:	00d2      	lsls	r2, r2, #3
 8001f58:	4584      	cmp	ip, r0
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x3a>
 8001f5c:	e0d8      	b.n	8002110 <__aeabi_dsub+0x1ec>
 8001f5e:	2001      	movs	r0, #1
 8001f60:	4043      	eors	r3, r0
 8001f62:	42ab      	cmp	r3, r5
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x44>
 8001f66:	e0a6      	b.n	80020b6 <__aeabi_dsub+0x192>
 8001f68:	4660      	mov	r0, ip
 8001f6a:	1a35      	subs	r5, r6, r0
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	dc00      	bgt.n	8001f72 <__aeabi_dsub+0x4e>
 8001f70:	e105      	b.n	800217e <__aeabi_dsub+0x25a>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d110      	bne.n	8001f98 <__aeabi_dsub+0x74>
 8001f76:	000b      	movs	r3, r1
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x5a>
 8001f7c:	e0d7      	b.n	800212e <__aeabi_dsub+0x20a>
 8001f7e:	1e6b      	subs	r3, r5, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x62>
 8001f84:	e14b      	b.n	800221e <__aeabi_dsub+0x2fa>
 8001f86:	4653      	mov	r3, sl
 8001f88:	1a9f      	subs	r7, r3, r2
 8001f8a:	45ba      	cmp	sl, r7
 8001f8c:	4180      	sbcs	r0, r0
 8001f8e:	1a64      	subs	r4, r4, r1
 8001f90:	4240      	negs	r0, r0
 8001f92:	1a24      	subs	r4, r4, r0
 8001f94:	2601      	movs	r6, #1
 8001f96:	e01e      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 8001f98:	4bb3      	ldr	r3, [pc, #716]	; (8002268 <__aeabi_dsub+0x344>)
 8001f9a:	429e      	cmp	r6, r3
 8001f9c:	d048      	beq.n	8002030 <__aeabi_dsub+0x10c>
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	2d38      	cmp	r5, #56	; 0x38
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_dsub+0x86>
 8001fa8:	e119      	b.n	80021de <__aeabi_dsub+0x2ba>
 8001faa:	2d1f      	cmp	r5, #31
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0x8c>
 8001fae:	e14c      	b.n	800224a <__aeabi_dsub+0x326>
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	000f      	movs	r7, r1
 8001fb4:	1b5b      	subs	r3, r3, r5
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	409f      	lsls	r7, r3
 8001fbc:	40e8      	lsrs	r0, r5
 8001fbe:	1e53      	subs	r3, r2, #1
 8001fc0:	419a      	sbcs	r2, r3
 8001fc2:	40e9      	lsrs	r1, r5
 8001fc4:	4307      	orrs	r7, r0
 8001fc6:	4317      	orrs	r7, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	1bdf      	subs	r7, r3, r7
 8001fcc:	1a61      	subs	r1, r4, r1
 8001fce:	45ba      	cmp	sl, r7
 8001fd0:	41a4      	sbcs	r4, r4
 8001fd2:	4264      	negs	r4, r4
 8001fd4:	1b0c      	subs	r4, r1, r4
 8001fd6:	0223      	lsls	r3, r4, #8
 8001fd8:	d400      	bmi.n	8001fdc <__aeabi_dsub+0xb8>
 8001fda:	e0c5      	b.n	8002168 <__aeabi_dsub+0x244>
 8001fdc:	0264      	lsls	r4, r4, #9
 8001fde:	0a65      	lsrs	r5, r4, #9
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0xc2>
 8001fe4:	e0f6      	b.n	80021d4 <__aeabi_dsub+0x2b0>
 8001fe6:	0028      	movs	r0, r5
 8001fe8:	f000 fb8e 	bl	8002708 <__clzsi2>
 8001fec:	0003      	movs	r3, r0
 8001fee:	3b08      	subs	r3, #8
 8001ff0:	2b1f      	cmp	r3, #31
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_dsub+0xd2>
 8001ff4:	e0e9      	b.n	80021ca <__aeabi_dsub+0x2a6>
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	003c      	movs	r4, r7
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	409d      	lsls	r5, r3
 8001ffe:	40d4      	lsrs	r4, r2
 8002000:	409f      	lsls	r7, r3
 8002002:	4325      	orrs	r5, r4
 8002004:	429e      	cmp	r6, r3
 8002006:	dd00      	ble.n	800200a <__aeabi_dsub+0xe6>
 8002008:	e0db      	b.n	80021c2 <__aeabi_dsub+0x29e>
 800200a:	1b9e      	subs	r6, r3, r6
 800200c:	1c73      	adds	r3, r6, #1
 800200e:	2b1f      	cmp	r3, #31
 8002010:	dd00      	ble.n	8002014 <__aeabi_dsub+0xf0>
 8002012:	e10a      	b.n	800222a <__aeabi_dsub+0x306>
 8002014:	2220      	movs	r2, #32
 8002016:	0038      	movs	r0, r7
 8002018:	1ad2      	subs	r2, r2, r3
 800201a:	0029      	movs	r1, r5
 800201c:	4097      	lsls	r7, r2
 800201e:	002c      	movs	r4, r5
 8002020:	4091      	lsls	r1, r2
 8002022:	40d8      	lsrs	r0, r3
 8002024:	1e7a      	subs	r2, r7, #1
 8002026:	4197      	sbcs	r7, r2
 8002028:	40dc      	lsrs	r4, r3
 800202a:	2600      	movs	r6, #0
 800202c:	4301      	orrs	r1, r0
 800202e:	430f      	orrs	r7, r1
 8002030:	077b      	lsls	r3, r7, #29
 8002032:	d009      	beq.n	8002048 <__aeabi_dsub+0x124>
 8002034:	230f      	movs	r3, #15
 8002036:	403b      	ands	r3, r7
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <__aeabi_dsub+0x124>
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	42bb      	cmp	r3, r7
 8002040:	41bf      	sbcs	r7, r7
 8002042:	427f      	negs	r7, r7
 8002044:	19e4      	adds	r4, r4, r7
 8002046:	001f      	movs	r7, r3
 8002048:	0223      	lsls	r3, r4, #8
 800204a:	d525      	bpl.n	8002098 <__aeabi_dsub+0x174>
 800204c:	4b86      	ldr	r3, [pc, #536]	; (8002268 <__aeabi_dsub+0x344>)
 800204e:	3601      	adds	r6, #1
 8002050:	429e      	cmp	r6, r3
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x132>
 8002054:	e0af      	b.n	80021b6 <__aeabi_dsub+0x292>
 8002056:	4b85      	ldr	r3, [pc, #532]	; (800226c <__aeabi_dsub+0x348>)
 8002058:	2501      	movs	r5, #1
 800205a:	401c      	ands	r4, r3
 800205c:	4643      	mov	r3, r8
 800205e:	0762      	lsls	r2, r4, #29
 8002060:	08ff      	lsrs	r7, r7, #3
 8002062:	0264      	lsls	r4, r4, #9
 8002064:	0576      	lsls	r6, r6, #21
 8002066:	4317      	orrs	r7, r2
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d76      	lsrs	r6, r6, #21
 800206c:	401d      	ands	r5, r3
 800206e:	2100      	movs	r1, #0
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	0b23      	lsrs	r3, r4, #12
 8002074:	0d0c      	lsrs	r4, r1, #20
 8002076:	4a7e      	ldr	r2, [pc, #504]	; (8002270 <__aeabi_dsub+0x34c>)
 8002078:	0524      	lsls	r4, r4, #20
 800207a:	431c      	orrs	r4, r3
 800207c:	4014      	ands	r4, r2
 800207e:	0533      	lsls	r3, r6, #20
 8002080:	4323      	orrs	r3, r4
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	07ed      	lsls	r5, r5, #31
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	432b      	orrs	r3, r5
 800208a:	0038      	movs	r0, r7
 800208c:	0019      	movs	r1, r3
 800208e:	bc1c      	pop	{r2, r3, r4}
 8002090:	4690      	mov	r8, r2
 8002092:	4699      	mov	r9, r3
 8002094:	46a2      	mov	sl, r4
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002098:	2501      	movs	r5, #1
 800209a:	4643      	mov	r3, r8
 800209c:	0762      	lsls	r2, r4, #29
 800209e:	08ff      	lsrs	r7, r7, #3
 80020a0:	4317      	orrs	r7, r2
 80020a2:	08e4      	lsrs	r4, r4, #3
 80020a4:	401d      	ands	r5, r3
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <__aeabi_dsub+0x344>)
 80020a8:	429e      	cmp	r6, r3
 80020aa:	d036      	beq.n	800211a <__aeabi_dsub+0x1f6>
 80020ac:	0324      	lsls	r4, r4, #12
 80020ae:	0576      	lsls	r6, r6, #21
 80020b0:	0b24      	lsrs	r4, r4, #12
 80020b2:	0d76      	lsrs	r6, r6, #21
 80020b4:	e7db      	b.n	800206e <__aeabi_dsub+0x14a>
 80020b6:	4663      	mov	r3, ip
 80020b8:	1af3      	subs	r3, r6, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dc00      	bgt.n	80020c0 <__aeabi_dsub+0x19c>
 80020be:	e094      	b.n	80021ea <__aeabi_dsub+0x2c6>
 80020c0:	4660      	mov	r0, ip
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d035      	beq.n	8002132 <__aeabi_dsub+0x20e>
 80020c6:	4868      	ldr	r0, [pc, #416]	; (8002268 <__aeabi_dsub+0x344>)
 80020c8:	4286      	cmp	r6, r0
 80020ca:	d0b1      	beq.n	8002030 <__aeabi_dsub+0x10c>
 80020cc:	2780      	movs	r7, #128	; 0x80
 80020ce:	043f      	lsls	r7, r7, #16
 80020d0:	4339      	orrs	r1, r7
 80020d2:	2b38      	cmp	r3, #56	; 0x38
 80020d4:	dc00      	bgt.n	80020d8 <__aeabi_dsub+0x1b4>
 80020d6:	e0fd      	b.n	80022d4 <__aeabi_dsub+0x3b0>
 80020d8:	430a      	orrs	r2, r1
 80020da:	0017      	movs	r7, r2
 80020dc:	2100      	movs	r1, #0
 80020de:	1e7a      	subs	r2, r7, #1
 80020e0:	4197      	sbcs	r7, r2
 80020e2:	4457      	add	r7, sl
 80020e4:	4557      	cmp	r7, sl
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	1909      	adds	r1, r1, r4
 80020ea:	4244      	negs	r4, r0
 80020ec:	190c      	adds	r4, r1, r4
 80020ee:	0223      	lsls	r3, r4, #8
 80020f0:	d53a      	bpl.n	8002168 <__aeabi_dsub+0x244>
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <__aeabi_dsub+0x344>)
 80020f4:	3601      	adds	r6, #1
 80020f6:	429e      	cmp	r6, r3
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x1d8>
 80020fa:	e14b      	b.n	8002394 <__aeabi_dsub+0x470>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4b5b      	ldr	r3, [pc, #364]	; (800226c <__aeabi_dsub+0x348>)
 8002100:	401c      	ands	r4, r3
 8002102:	087b      	lsrs	r3, r7, #1
 8002104:	4017      	ands	r7, r2
 8002106:	431f      	orrs	r7, r3
 8002108:	07e2      	lsls	r2, r4, #31
 800210a:	4317      	orrs	r7, r2
 800210c:	0864      	lsrs	r4, r4, #1
 800210e:	e78f      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002110:	0008      	movs	r0, r1
 8002112:	4310      	orrs	r0, r2
 8002114:	d000      	beq.n	8002118 <__aeabi_dsub+0x1f4>
 8002116:	e724      	b.n	8001f62 <__aeabi_dsub+0x3e>
 8002118:	e721      	b.n	8001f5e <__aeabi_dsub+0x3a>
 800211a:	0023      	movs	r3, r4
 800211c:	433b      	orrs	r3, r7
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x1fe>
 8002120:	e1b9      	b.n	8002496 <__aeabi_dsub+0x572>
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4314      	orrs	r4, r2
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	0b24      	lsrs	r4, r4, #12
 800212c:	e79f      	b.n	800206e <__aeabi_dsub+0x14a>
 800212e:	002e      	movs	r6, r5
 8002130:	e77e      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002132:	0008      	movs	r0, r1
 8002134:	4310      	orrs	r0, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x216>
 8002138:	e0ca      	b.n	80022d0 <__aeabi_dsub+0x3ac>
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	4684      	mov	ip, r0
 800213e:	2800      	cmp	r0, #0
 8002140:	d000      	beq.n	8002144 <__aeabi_dsub+0x220>
 8002142:	e0e7      	b.n	8002314 <__aeabi_dsub+0x3f0>
 8002144:	4452      	add	r2, sl
 8002146:	4552      	cmp	r2, sl
 8002148:	4180      	sbcs	r0, r0
 800214a:	1864      	adds	r4, r4, r1
 800214c:	4240      	negs	r0, r0
 800214e:	1824      	adds	r4, r4, r0
 8002150:	0017      	movs	r7, r2
 8002152:	2601      	movs	r6, #1
 8002154:	0223      	lsls	r3, r4, #8
 8002156:	d507      	bpl.n	8002168 <__aeabi_dsub+0x244>
 8002158:	2602      	movs	r6, #2
 800215a:	e7cf      	b.n	80020fc <__aeabi_dsub+0x1d8>
 800215c:	4664      	mov	r4, ip
 800215e:	432c      	orrs	r4, r5
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x240>
 8002162:	e1b3      	b.n	80024cc <__aeabi_dsub+0x5a8>
 8002164:	002c      	movs	r4, r5
 8002166:	4667      	mov	r7, ip
 8002168:	077b      	lsls	r3, r7, #29
 800216a:	d000      	beq.n	800216e <__aeabi_dsub+0x24a>
 800216c:	e762      	b.n	8002034 <__aeabi_dsub+0x110>
 800216e:	0763      	lsls	r3, r4, #29
 8002170:	08ff      	lsrs	r7, r7, #3
 8002172:	431f      	orrs	r7, r3
 8002174:	2501      	movs	r5, #1
 8002176:	4643      	mov	r3, r8
 8002178:	08e4      	lsrs	r4, r4, #3
 800217a:	401d      	ands	r5, r3
 800217c:	e793      	b.n	80020a6 <__aeabi_dsub+0x182>
 800217e:	2d00      	cmp	r5, #0
 8002180:	d178      	bne.n	8002274 <__aeabi_dsub+0x350>
 8002182:	1c75      	adds	r5, r6, #1
 8002184:	056d      	lsls	r5, r5, #21
 8002186:	0d6d      	lsrs	r5, r5, #21
 8002188:	2d01      	cmp	r5, #1
 800218a:	dc00      	bgt.n	800218e <__aeabi_dsub+0x26a>
 800218c:	e0f2      	b.n	8002374 <__aeabi_dsub+0x450>
 800218e:	4650      	mov	r0, sl
 8002190:	1a80      	subs	r0, r0, r2
 8002192:	4582      	cmp	sl, r0
 8002194:	41bf      	sbcs	r7, r7
 8002196:	1a65      	subs	r5, r4, r1
 8002198:	427f      	negs	r7, r7
 800219a:	1bed      	subs	r5, r5, r7
 800219c:	4684      	mov	ip, r0
 800219e:	0228      	lsls	r0, r5, #8
 80021a0:	d400      	bmi.n	80021a4 <__aeabi_dsub+0x280>
 80021a2:	e08c      	b.n	80022be <__aeabi_dsub+0x39a>
 80021a4:	4650      	mov	r0, sl
 80021a6:	1a17      	subs	r7, r2, r0
 80021a8:	42ba      	cmp	r2, r7
 80021aa:	4192      	sbcs	r2, r2
 80021ac:	1b0c      	subs	r4, r1, r4
 80021ae:	4255      	negs	r5, r2
 80021b0:	1b65      	subs	r5, r4, r5
 80021b2:	4698      	mov	r8, r3
 80021b4:	e714      	b.n	8001fe0 <__aeabi_dsub+0xbc>
 80021b6:	2501      	movs	r5, #1
 80021b8:	4643      	mov	r3, r8
 80021ba:	2400      	movs	r4, #0
 80021bc:	401d      	ands	r5, r3
 80021be:	2700      	movs	r7, #0
 80021c0:	e755      	b.n	800206e <__aeabi_dsub+0x14a>
 80021c2:	4c2a      	ldr	r4, [pc, #168]	; (800226c <__aeabi_dsub+0x348>)
 80021c4:	1af6      	subs	r6, r6, r3
 80021c6:	402c      	ands	r4, r5
 80021c8:	e732      	b.n	8002030 <__aeabi_dsub+0x10c>
 80021ca:	003d      	movs	r5, r7
 80021cc:	3828      	subs	r0, #40	; 0x28
 80021ce:	4085      	lsls	r5, r0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e717      	b.n	8002004 <__aeabi_dsub+0xe0>
 80021d4:	0038      	movs	r0, r7
 80021d6:	f000 fa97 	bl	8002708 <__clzsi2>
 80021da:	3020      	adds	r0, #32
 80021dc:	e706      	b.n	8001fec <__aeabi_dsub+0xc8>
 80021de:	430a      	orrs	r2, r1
 80021e0:	0017      	movs	r7, r2
 80021e2:	2100      	movs	r1, #0
 80021e4:	1e7a      	subs	r2, r7, #1
 80021e6:	4197      	sbcs	r7, r2
 80021e8:	e6ee      	b.n	8001fc8 <__aeabi_dsub+0xa4>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d000      	beq.n	80021f0 <__aeabi_dsub+0x2cc>
 80021ee:	e0e5      	b.n	80023bc <__aeabi_dsub+0x498>
 80021f0:	1c73      	adds	r3, r6, #1
 80021f2:	469c      	mov	ip, r3
 80021f4:	055b      	lsls	r3, r3, #21
 80021f6:	0d5b      	lsrs	r3, r3, #21
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	dc00      	bgt.n	80021fe <__aeabi_dsub+0x2da>
 80021fc:	e09f      	b.n	800233e <__aeabi_dsub+0x41a>
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <__aeabi_dsub+0x344>)
 8002200:	459c      	cmp	ip, r3
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x2e2>
 8002204:	e0c5      	b.n	8002392 <__aeabi_dsub+0x46e>
 8002206:	4452      	add	r2, sl
 8002208:	4552      	cmp	r2, sl
 800220a:	4180      	sbcs	r0, r0
 800220c:	1864      	adds	r4, r4, r1
 800220e:	4240      	negs	r0, r0
 8002210:	1824      	adds	r4, r4, r0
 8002212:	07e7      	lsls	r7, r4, #31
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	4317      	orrs	r7, r2
 8002218:	0864      	lsrs	r4, r4, #1
 800221a:	4666      	mov	r6, ip
 800221c:	e708      	b.n	8002030 <__aeabi_dsub+0x10c>
 800221e:	4812      	ldr	r0, [pc, #72]	; (8002268 <__aeabi_dsub+0x344>)
 8002220:	4285      	cmp	r5, r0
 8002222:	d100      	bne.n	8002226 <__aeabi_dsub+0x302>
 8002224:	e085      	b.n	8002332 <__aeabi_dsub+0x40e>
 8002226:	001d      	movs	r5, r3
 8002228:	e6bc      	b.n	8001fa4 <__aeabi_dsub+0x80>
 800222a:	0029      	movs	r1, r5
 800222c:	3e1f      	subs	r6, #31
 800222e:	40f1      	lsrs	r1, r6
 8002230:	2b20      	cmp	r3, #32
 8002232:	d100      	bne.n	8002236 <__aeabi_dsub+0x312>
 8002234:	e07f      	b.n	8002336 <__aeabi_dsub+0x412>
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	409d      	lsls	r5, r3
 800223c:	432f      	orrs	r7, r5
 800223e:	1e7d      	subs	r5, r7, #1
 8002240:	41af      	sbcs	r7, r5
 8002242:	2400      	movs	r4, #0
 8002244:	430f      	orrs	r7, r1
 8002246:	2600      	movs	r6, #0
 8002248:	e78e      	b.n	8002168 <__aeabi_dsub+0x244>
 800224a:	002b      	movs	r3, r5
 800224c:	000f      	movs	r7, r1
 800224e:	3b20      	subs	r3, #32
 8002250:	40df      	lsrs	r7, r3
 8002252:	2d20      	cmp	r5, #32
 8002254:	d071      	beq.n	800233a <__aeabi_dsub+0x416>
 8002256:	2340      	movs	r3, #64	; 0x40
 8002258:	1b5d      	subs	r5, r3, r5
 800225a:	40a9      	lsls	r1, r5
 800225c:	430a      	orrs	r2, r1
 800225e:	1e51      	subs	r1, r2, #1
 8002260:	418a      	sbcs	r2, r1
 8002262:	2100      	movs	r1, #0
 8002264:	4317      	orrs	r7, r2
 8002266:	e6af      	b.n	8001fc8 <__aeabi_dsub+0xa4>
 8002268:	000007ff 	.word	0x000007ff
 800226c:	ff7fffff 	.word	0xff7fffff
 8002270:	800fffff 	.word	0x800fffff
 8002274:	2e00      	cmp	r6, #0
 8002276:	d03e      	beq.n	80022f6 <__aeabi_dsub+0x3d2>
 8002278:	4eb3      	ldr	r6, [pc, #716]	; (8002548 <__aeabi_dsub+0x624>)
 800227a:	45b4      	cmp	ip, r6
 800227c:	d045      	beq.n	800230a <__aeabi_dsub+0x3e6>
 800227e:	2680      	movs	r6, #128	; 0x80
 8002280:	0436      	lsls	r6, r6, #16
 8002282:	426d      	negs	r5, r5
 8002284:	4334      	orrs	r4, r6
 8002286:	2d38      	cmp	r5, #56	; 0x38
 8002288:	dd00      	ble.n	800228c <__aeabi_dsub+0x368>
 800228a:	e0a8      	b.n	80023de <__aeabi_dsub+0x4ba>
 800228c:	2d1f      	cmp	r5, #31
 800228e:	dd00      	ble.n	8002292 <__aeabi_dsub+0x36e>
 8002290:	e11f      	b.n	80024d2 <__aeabi_dsub+0x5ae>
 8002292:	2620      	movs	r6, #32
 8002294:	0027      	movs	r7, r4
 8002296:	4650      	mov	r0, sl
 8002298:	1b76      	subs	r6, r6, r5
 800229a:	40b7      	lsls	r7, r6
 800229c:	40e8      	lsrs	r0, r5
 800229e:	4307      	orrs	r7, r0
 80022a0:	4650      	mov	r0, sl
 80022a2:	40b0      	lsls	r0, r6
 80022a4:	1e46      	subs	r6, r0, #1
 80022a6:	41b0      	sbcs	r0, r6
 80022a8:	40ec      	lsrs	r4, r5
 80022aa:	4338      	orrs	r0, r7
 80022ac:	1a17      	subs	r7, r2, r0
 80022ae:	42ba      	cmp	r2, r7
 80022b0:	4192      	sbcs	r2, r2
 80022b2:	1b0c      	subs	r4, r1, r4
 80022b4:	4252      	negs	r2, r2
 80022b6:	1aa4      	subs	r4, r4, r2
 80022b8:	4666      	mov	r6, ip
 80022ba:	4698      	mov	r8, r3
 80022bc:	e68b      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 80022be:	4664      	mov	r4, ip
 80022c0:	4667      	mov	r7, ip
 80022c2:	432c      	orrs	r4, r5
 80022c4:	d000      	beq.n	80022c8 <__aeabi_dsub+0x3a4>
 80022c6:	e68b      	b.n	8001fe0 <__aeabi_dsub+0xbc>
 80022c8:	2500      	movs	r5, #0
 80022ca:	2600      	movs	r6, #0
 80022cc:	2700      	movs	r7, #0
 80022ce:	e6ea      	b.n	80020a6 <__aeabi_dsub+0x182>
 80022d0:	001e      	movs	r6, r3
 80022d2:	e6ad      	b.n	8002030 <__aeabi_dsub+0x10c>
 80022d4:	2b1f      	cmp	r3, #31
 80022d6:	dc60      	bgt.n	800239a <__aeabi_dsub+0x476>
 80022d8:	2720      	movs	r7, #32
 80022da:	1af8      	subs	r0, r7, r3
 80022dc:	000f      	movs	r7, r1
 80022de:	4684      	mov	ip, r0
 80022e0:	4087      	lsls	r7, r0
 80022e2:	0010      	movs	r0, r2
 80022e4:	40d8      	lsrs	r0, r3
 80022e6:	4307      	orrs	r7, r0
 80022e8:	4660      	mov	r0, ip
 80022ea:	4082      	lsls	r2, r0
 80022ec:	1e50      	subs	r0, r2, #1
 80022ee:	4182      	sbcs	r2, r0
 80022f0:	40d9      	lsrs	r1, r3
 80022f2:	4317      	orrs	r7, r2
 80022f4:	e6f5      	b.n	80020e2 <__aeabi_dsub+0x1be>
 80022f6:	0026      	movs	r6, r4
 80022f8:	4650      	mov	r0, sl
 80022fa:	4306      	orrs	r6, r0
 80022fc:	d005      	beq.n	800230a <__aeabi_dsub+0x3e6>
 80022fe:	43ed      	mvns	r5, r5
 8002300:	2d00      	cmp	r5, #0
 8002302:	d0d3      	beq.n	80022ac <__aeabi_dsub+0x388>
 8002304:	4e90      	ldr	r6, [pc, #576]	; (8002548 <__aeabi_dsub+0x624>)
 8002306:	45b4      	cmp	ip, r6
 8002308:	d1bd      	bne.n	8002286 <__aeabi_dsub+0x362>
 800230a:	000c      	movs	r4, r1
 800230c:	0017      	movs	r7, r2
 800230e:	4666      	mov	r6, ip
 8002310:	4698      	mov	r8, r3
 8002312:	e68d      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002314:	488c      	ldr	r0, [pc, #560]	; (8002548 <__aeabi_dsub+0x624>)
 8002316:	4283      	cmp	r3, r0
 8002318:	d00b      	beq.n	8002332 <__aeabi_dsub+0x40e>
 800231a:	4663      	mov	r3, ip
 800231c:	e6d9      	b.n	80020d2 <__aeabi_dsub+0x1ae>
 800231e:	2d00      	cmp	r5, #0
 8002320:	d000      	beq.n	8002324 <__aeabi_dsub+0x400>
 8002322:	e096      	b.n	8002452 <__aeabi_dsub+0x52e>
 8002324:	0008      	movs	r0, r1
 8002326:	4310      	orrs	r0, r2
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x408>
 800232a:	e0e2      	b.n	80024f2 <__aeabi_dsub+0x5ce>
 800232c:	000c      	movs	r4, r1
 800232e:	0017      	movs	r7, r2
 8002330:	4698      	mov	r8, r3
 8002332:	4e85      	ldr	r6, [pc, #532]	; (8002548 <__aeabi_dsub+0x624>)
 8002334:	e67c      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002336:	2500      	movs	r5, #0
 8002338:	e780      	b.n	800223c <__aeabi_dsub+0x318>
 800233a:	2100      	movs	r1, #0
 800233c:	e78e      	b.n	800225c <__aeabi_dsub+0x338>
 800233e:	0023      	movs	r3, r4
 8002340:	4650      	mov	r0, sl
 8002342:	4303      	orrs	r3, r0
 8002344:	2e00      	cmp	r6, #0
 8002346:	d000      	beq.n	800234a <__aeabi_dsub+0x426>
 8002348:	e0a8      	b.n	800249c <__aeabi_dsub+0x578>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x42c>
 800234e:	e0de      	b.n	800250e <__aeabi_dsub+0x5ea>
 8002350:	000b      	movs	r3, r1
 8002352:	4313      	orrs	r3, r2
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x434>
 8002356:	e66b      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002358:	4452      	add	r2, sl
 800235a:	4552      	cmp	r2, sl
 800235c:	4180      	sbcs	r0, r0
 800235e:	1864      	adds	r4, r4, r1
 8002360:	4240      	negs	r0, r0
 8002362:	1824      	adds	r4, r4, r0
 8002364:	0017      	movs	r7, r2
 8002366:	0223      	lsls	r3, r4, #8
 8002368:	d400      	bmi.n	800236c <__aeabi_dsub+0x448>
 800236a:	e6fd      	b.n	8002168 <__aeabi_dsub+0x244>
 800236c:	4b77      	ldr	r3, [pc, #476]	; (800254c <__aeabi_dsub+0x628>)
 800236e:	4666      	mov	r6, ip
 8002370:	401c      	ands	r4, r3
 8002372:	e65d      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002374:	0025      	movs	r5, r4
 8002376:	4650      	mov	r0, sl
 8002378:	4305      	orrs	r5, r0
 800237a:	2e00      	cmp	r6, #0
 800237c:	d1cf      	bne.n	800231e <__aeabi_dsub+0x3fa>
 800237e:	2d00      	cmp	r5, #0
 8002380:	d14f      	bne.n	8002422 <__aeabi_dsub+0x4fe>
 8002382:	000c      	movs	r4, r1
 8002384:	4314      	orrs	r4, r2
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x466>
 8002388:	e0a0      	b.n	80024cc <__aeabi_dsub+0x5a8>
 800238a:	000c      	movs	r4, r1
 800238c:	0017      	movs	r7, r2
 800238e:	4698      	mov	r8, r3
 8002390:	e64e      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002392:	4666      	mov	r6, ip
 8002394:	2400      	movs	r4, #0
 8002396:	2700      	movs	r7, #0
 8002398:	e685      	b.n	80020a6 <__aeabi_dsub+0x182>
 800239a:	001f      	movs	r7, r3
 800239c:	0008      	movs	r0, r1
 800239e:	3f20      	subs	r7, #32
 80023a0:	40f8      	lsrs	r0, r7
 80023a2:	0007      	movs	r7, r0
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x486>
 80023a8:	e08e      	b.n	80024c8 <__aeabi_dsub+0x5a4>
 80023aa:	2040      	movs	r0, #64	; 0x40
 80023ac:	1ac3      	subs	r3, r0, r3
 80023ae:	4099      	lsls	r1, r3
 80023b0:	430a      	orrs	r2, r1
 80023b2:	1e51      	subs	r1, r2, #1
 80023b4:	418a      	sbcs	r2, r1
 80023b6:	2100      	movs	r1, #0
 80023b8:	4317      	orrs	r7, r2
 80023ba:	e692      	b.n	80020e2 <__aeabi_dsub+0x1be>
 80023bc:	2e00      	cmp	r6, #0
 80023be:	d114      	bne.n	80023ea <__aeabi_dsub+0x4c6>
 80023c0:	0026      	movs	r6, r4
 80023c2:	4650      	mov	r0, sl
 80023c4:	4306      	orrs	r6, r0
 80023c6:	d062      	beq.n	800248e <__aeabi_dsub+0x56a>
 80023c8:	43db      	mvns	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d15c      	bne.n	8002488 <__aeabi_dsub+0x564>
 80023ce:	1887      	adds	r7, r0, r2
 80023d0:	4297      	cmp	r7, r2
 80023d2:	4192      	sbcs	r2, r2
 80023d4:	1864      	adds	r4, r4, r1
 80023d6:	4252      	negs	r2, r2
 80023d8:	18a4      	adds	r4, r4, r2
 80023da:	4666      	mov	r6, ip
 80023dc:	e687      	b.n	80020ee <__aeabi_dsub+0x1ca>
 80023de:	4650      	mov	r0, sl
 80023e0:	4320      	orrs	r0, r4
 80023e2:	1e44      	subs	r4, r0, #1
 80023e4:	41a0      	sbcs	r0, r4
 80023e6:	2400      	movs	r4, #0
 80023e8:	e760      	b.n	80022ac <__aeabi_dsub+0x388>
 80023ea:	4e57      	ldr	r6, [pc, #348]	; (8002548 <__aeabi_dsub+0x624>)
 80023ec:	45b4      	cmp	ip, r6
 80023ee:	d04e      	beq.n	800248e <__aeabi_dsub+0x56a>
 80023f0:	2680      	movs	r6, #128	; 0x80
 80023f2:	0436      	lsls	r6, r6, #16
 80023f4:	425b      	negs	r3, r3
 80023f6:	4334      	orrs	r4, r6
 80023f8:	2b38      	cmp	r3, #56	; 0x38
 80023fa:	dd00      	ble.n	80023fe <__aeabi_dsub+0x4da>
 80023fc:	e07f      	b.n	80024fe <__aeabi_dsub+0x5da>
 80023fe:	2b1f      	cmp	r3, #31
 8002400:	dd00      	ble.n	8002404 <__aeabi_dsub+0x4e0>
 8002402:	e08b      	b.n	800251c <__aeabi_dsub+0x5f8>
 8002404:	2620      	movs	r6, #32
 8002406:	0027      	movs	r7, r4
 8002408:	4650      	mov	r0, sl
 800240a:	1af6      	subs	r6, r6, r3
 800240c:	40b7      	lsls	r7, r6
 800240e:	40d8      	lsrs	r0, r3
 8002410:	4307      	orrs	r7, r0
 8002412:	4650      	mov	r0, sl
 8002414:	40b0      	lsls	r0, r6
 8002416:	1e46      	subs	r6, r0, #1
 8002418:	41b0      	sbcs	r0, r6
 800241a:	4307      	orrs	r7, r0
 800241c:	40dc      	lsrs	r4, r3
 800241e:	18bf      	adds	r7, r7, r2
 8002420:	e7d6      	b.n	80023d0 <__aeabi_dsub+0x4ac>
 8002422:	000d      	movs	r5, r1
 8002424:	4315      	orrs	r5, r2
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x506>
 8002428:	e602      	b.n	8002030 <__aeabi_dsub+0x10c>
 800242a:	4650      	mov	r0, sl
 800242c:	1a80      	subs	r0, r0, r2
 800242e:	4582      	cmp	sl, r0
 8002430:	41bf      	sbcs	r7, r7
 8002432:	1a65      	subs	r5, r4, r1
 8002434:	427f      	negs	r7, r7
 8002436:	1bed      	subs	r5, r5, r7
 8002438:	4684      	mov	ip, r0
 800243a:	0228      	lsls	r0, r5, #8
 800243c:	d400      	bmi.n	8002440 <__aeabi_dsub+0x51c>
 800243e:	e68d      	b.n	800215c <__aeabi_dsub+0x238>
 8002440:	4650      	mov	r0, sl
 8002442:	1a17      	subs	r7, r2, r0
 8002444:	42ba      	cmp	r2, r7
 8002446:	4192      	sbcs	r2, r2
 8002448:	1b0c      	subs	r4, r1, r4
 800244a:	4252      	negs	r2, r2
 800244c:	1aa4      	subs	r4, r4, r2
 800244e:	4698      	mov	r8, r3
 8002450:	e5ee      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002452:	000d      	movs	r5, r1
 8002454:	4315      	orrs	r5, r2
 8002456:	d100      	bne.n	800245a <__aeabi_dsub+0x536>
 8002458:	e76b      	b.n	8002332 <__aeabi_dsub+0x40e>
 800245a:	4650      	mov	r0, sl
 800245c:	0767      	lsls	r7, r4, #29
 800245e:	08c0      	lsrs	r0, r0, #3
 8002460:	4307      	orrs	r7, r0
 8002462:	2080      	movs	r0, #128	; 0x80
 8002464:	08e4      	lsrs	r4, r4, #3
 8002466:	0300      	lsls	r0, r0, #12
 8002468:	4204      	tst	r4, r0
 800246a:	d007      	beq.n	800247c <__aeabi_dsub+0x558>
 800246c:	08cd      	lsrs	r5, r1, #3
 800246e:	4205      	tst	r5, r0
 8002470:	d104      	bne.n	800247c <__aeabi_dsub+0x558>
 8002472:	002c      	movs	r4, r5
 8002474:	4698      	mov	r8, r3
 8002476:	08d7      	lsrs	r7, r2, #3
 8002478:	0749      	lsls	r1, r1, #29
 800247a:	430f      	orrs	r7, r1
 800247c:	0f7b      	lsrs	r3, r7, #29
 800247e:	00e4      	lsls	r4, r4, #3
 8002480:	431c      	orrs	r4, r3
 8002482:	00ff      	lsls	r7, r7, #3
 8002484:	4e30      	ldr	r6, [pc, #192]	; (8002548 <__aeabi_dsub+0x624>)
 8002486:	e5d3      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002488:	4e2f      	ldr	r6, [pc, #188]	; (8002548 <__aeabi_dsub+0x624>)
 800248a:	45b4      	cmp	ip, r6
 800248c:	d1b4      	bne.n	80023f8 <__aeabi_dsub+0x4d4>
 800248e:	000c      	movs	r4, r1
 8002490:	0017      	movs	r7, r2
 8002492:	4666      	mov	r6, ip
 8002494:	e5cc      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002496:	2700      	movs	r7, #0
 8002498:	2400      	movs	r4, #0
 800249a:	e5e8      	b.n	800206e <__aeabi_dsub+0x14a>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d039      	beq.n	8002514 <__aeabi_dsub+0x5f0>
 80024a0:	000b      	movs	r3, r1
 80024a2:	4313      	orrs	r3, r2
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x584>
 80024a6:	e744      	b.n	8002332 <__aeabi_dsub+0x40e>
 80024a8:	08c0      	lsrs	r0, r0, #3
 80024aa:	0767      	lsls	r7, r4, #29
 80024ac:	4307      	orrs	r7, r0
 80024ae:	2080      	movs	r0, #128	; 0x80
 80024b0:	08e4      	lsrs	r4, r4, #3
 80024b2:	0300      	lsls	r0, r0, #12
 80024b4:	4204      	tst	r4, r0
 80024b6:	d0e1      	beq.n	800247c <__aeabi_dsub+0x558>
 80024b8:	08cb      	lsrs	r3, r1, #3
 80024ba:	4203      	tst	r3, r0
 80024bc:	d1de      	bne.n	800247c <__aeabi_dsub+0x558>
 80024be:	08d7      	lsrs	r7, r2, #3
 80024c0:	0749      	lsls	r1, r1, #29
 80024c2:	430f      	orrs	r7, r1
 80024c4:	001c      	movs	r4, r3
 80024c6:	e7d9      	b.n	800247c <__aeabi_dsub+0x558>
 80024c8:	2100      	movs	r1, #0
 80024ca:	e771      	b.n	80023b0 <__aeabi_dsub+0x48c>
 80024cc:	2500      	movs	r5, #0
 80024ce:	2700      	movs	r7, #0
 80024d0:	e5e9      	b.n	80020a6 <__aeabi_dsub+0x182>
 80024d2:	002e      	movs	r6, r5
 80024d4:	0027      	movs	r7, r4
 80024d6:	3e20      	subs	r6, #32
 80024d8:	40f7      	lsrs	r7, r6
 80024da:	2d20      	cmp	r5, #32
 80024dc:	d02f      	beq.n	800253e <__aeabi_dsub+0x61a>
 80024de:	2640      	movs	r6, #64	; 0x40
 80024e0:	1b75      	subs	r5, r6, r5
 80024e2:	40ac      	lsls	r4, r5
 80024e4:	4650      	mov	r0, sl
 80024e6:	4320      	orrs	r0, r4
 80024e8:	1e44      	subs	r4, r0, #1
 80024ea:	41a0      	sbcs	r0, r4
 80024ec:	2400      	movs	r4, #0
 80024ee:	4338      	orrs	r0, r7
 80024f0:	e6dc      	b.n	80022ac <__aeabi_dsub+0x388>
 80024f2:	2480      	movs	r4, #128	; 0x80
 80024f4:	2500      	movs	r5, #0
 80024f6:	0324      	lsls	r4, r4, #12
 80024f8:	4e13      	ldr	r6, [pc, #76]	; (8002548 <__aeabi_dsub+0x624>)
 80024fa:	2700      	movs	r7, #0
 80024fc:	e5d3      	b.n	80020a6 <__aeabi_dsub+0x182>
 80024fe:	4650      	mov	r0, sl
 8002500:	4320      	orrs	r0, r4
 8002502:	0007      	movs	r7, r0
 8002504:	1e78      	subs	r0, r7, #1
 8002506:	4187      	sbcs	r7, r0
 8002508:	2400      	movs	r4, #0
 800250a:	18bf      	adds	r7, r7, r2
 800250c:	e760      	b.n	80023d0 <__aeabi_dsub+0x4ac>
 800250e:	000c      	movs	r4, r1
 8002510:	0017      	movs	r7, r2
 8002512:	e58d      	b.n	8002030 <__aeabi_dsub+0x10c>
 8002514:	000c      	movs	r4, r1
 8002516:	0017      	movs	r7, r2
 8002518:	4e0b      	ldr	r6, [pc, #44]	; (8002548 <__aeabi_dsub+0x624>)
 800251a:	e589      	b.n	8002030 <__aeabi_dsub+0x10c>
 800251c:	001e      	movs	r6, r3
 800251e:	0027      	movs	r7, r4
 8002520:	3e20      	subs	r6, #32
 8002522:	40f7      	lsrs	r7, r6
 8002524:	2b20      	cmp	r3, #32
 8002526:	d00c      	beq.n	8002542 <__aeabi_dsub+0x61e>
 8002528:	2640      	movs	r6, #64	; 0x40
 800252a:	1af3      	subs	r3, r6, r3
 800252c:	409c      	lsls	r4, r3
 800252e:	4650      	mov	r0, sl
 8002530:	4320      	orrs	r0, r4
 8002532:	1e44      	subs	r4, r0, #1
 8002534:	41a0      	sbcs	r0, r4
 8002536:	4307      	orrs	r7, r0
 8002538:	2400      	movs	r4, #0
 800253a:	18bf      	adds	r7, r7, r2
 800253c:	e748      	b.n	80023d0 <__aeabi_dsub+0x4ac>
 800253e:	2400      	movs	r4, #0
 8002540:	e7d0      	b.n	80024e4 <__aeabi_dsub+0x5c0>
 8002542:	2400      	movs	r4, #0
 8002544:	e7f3      	b.n	800252e <__aeabi_dsub+0x60a>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	000007ff 	.word	0x000007ff
 800254c:	ff7fffff 	.word	0xff7fffff

08002550 <__aeabi_f2d>:
 8002550:	0041      	lsls	r1, r0, #1
 8002552:	0e09      	lsrs	r1, r1, #24
 8002554:	1c4b      	adds	r3, r1, #1
 8002556:	b570      	push	{r4, r5, r6, lr}
 8002558:	b2db      	uxtb	r3, r3
 800255a:	0246      	lsls	r6, r0, #9
 800255c:	0a75      	lsrs	r5, r6, #9
 800255e:	0fc4      	lsrs	r4, r0, #31
 8002560:	2b01      	cmp	r3, #1
 8002562:	dd14      	ble.n	800258e <__aeabi_f2d+0x3e>
 8002564:	23e0      	movs	r3, #224	; 0xe0
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	076d      	lsls	r5, r5, #29
 800256a:	0b36      	lsrs	r6, r6, #12
 800256c:	18cb      	adds	r3, r1, r3
 800256e:	2100      	movs	r1, #0
 8002570:	0d0a      	lsrs	r2, r1, #20
 8002572:	0028      	movs	r0, r5
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	4d1c      	ldr	r5, [pc, #112]	; (80025e8 <__aeabi_f2d+0x98>)
 8002578:	4332      	orrs	r2, r6
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	402a      	ands	r2, r5
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	4313      	orrs	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	07e4      	lsls	r4, r4, #31
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	4323      	orrs	r3, r4
 800258a:	0019      	movs	r1, r3
 800258c:	bd70      	pop	{r4, r5, r6, pc}
 800258e:	2900      	cmp	r1, #0
 8002590:	d114      	bne.n	80025bc <__aeabi_f2d+0x6c>
 8002592:	2d00      	cmp	r5, #0
 8002594:	d01e      	beq.n	80025d4 <__aeabi_f2d+0x84>
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b6 	bl	8002708 <__clzsi2>
 800259c:	280a      	cmp	r0, #10
 800259e:	dc1c      	bgt.n	80025da <__aeabi_f2d+0x8a>
 80025a0:	230b      	movs	r3, #11
 80025a2:	002a      	movs	r2, r5
 80025a4:	1a1b      	subs	r3, r3, r0
 80025a6:	40da      	lsrs	r2, r3
 80025a8:	0003      	movs	r3, r0
 80025aa:	3315      	adds	r3, #21
 80025ac:	409d      	lsls	r5, r3
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <__aeabi_f2d+0x9c>)
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	1a1b      	subs	r3, r3, r0
 80025b4:	055b      	lsls	r3, r3, #21
 80025b6:	0b16      	lsrs	r6, r2, #12
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	e7d8      	b.n	800256e <__aeabi_f2d+0x1e>
 80025bc:	2d00      	cmp	r5, #0
 80025be:	d006      	beq.n	80025ce <__aeabi_f2d+0x7e>
 80025c0:	0b32      	lsrs	r2, r6, #12
 80025c2:	2680      	movs	r6, #128	; 0x80
 80025c4:	0336      	lsls	r6, r6, #12
 80025c6:	076d      	lsls	r5, r5, #29
 80025c8:	4316      	orrs	r6, r2
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <__aeabi_f2d+0xa0>)
 80025cc:	e7cf      	b.n	800256e <__aeabi_f2d+0x1e>
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <__aeabi_f2d+0xa0>)
 80025d0:	2600      	movs	r6, #0
 80025d2:	e7cc      	b.n	800256e <__aeabi_f2d+0x1e>
 80025d4:	2300      	movs	r3, #0
 80025d6:	2600      	movs	r6, #0
 80025d8:	e7c9      	b.n	800256e <__aeabi_f2d+0x1e>
 80025da:	0003      	movs	r3, r0
 80025dc:	002a      	movs	r2, r5
 80025de:	3b0b      	subs	r3, #11
 80025e0:	409a      	lsls	r2, r3
 80025e2:	2500      	movs	r5, #0
 80025e4:	e7e3      	b.n	80025ae <__aeabi_f2d+0x5e>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	800fffff 	.word	0x800fffff
 80025ec:	00000389 	.word	0x00000389
 80025f0:	000007ff 	.word	0x000007ff

080025f4 <__aeabi_d2f>:
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	004c      	lsls	r4, r1, #1
 80025f8:	0d64      	lsrs	r4, r4, #21
 80025fa:	030b      	lsls	r3, r1, #12
 80025fc:	1c62      	adds	r2, r4, #1
 80025fe:	0f45      	lsrs	r5, r0, #29
 8002600:	0a5b      	lsrs	r3, r3, #9
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	432b      	orrs	r3, r5
 8002606:	0fc9      	lsrs	r1, r1, #31
 8002608:	00c5      	lsls	r5, r0, #3
 800260a:	0d52      	lsrs	r2, r2, #21
 800260c:	2a01      	cmp	r2, #1
 800260e:	dd28      	ble.n	8002662 <__aeabi_d2f+0x6e>
 8002610:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <__aeabi_d2f+0x108>)
 8002612:	18a6      	adds	r6, r4, r2
 8002614:	2efe      	cmp	r6, #254	; 0xfe
 8002616:	dc1b      	bgt.n	8002650 <__aeabi_d2f+0x5c>
 8002618:	2e00      	cmp	r6, #0
 800261a:	dd3e      	ble.n	800269a <__aeabi_d2f+0xa6>
 800261c:	0180      	lsls	r0, r0, #6
 800261e:	0002      	movs	r2, r0
 8002620:	1e50      	subs	r0, r2, #1
 8002622:	4182      	sbcs	r2, r0
 8002624:	0f6d      	lsrs	r5, r5, #29
 8002626:	432a      	orrs	r2, r5
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4313      	orrs	r3, r2
 800262c:	075a      	lsls	r2, r3, #29
 800262e:	d004      	beq.n	800263a <__aeabi_d2f+0x46>
 8002630:	220f      	movs	r2, #15
 8002632:	401a      	ands	r2, r3
 8002634:	2a04      	cmp	r2, #4
 8002636:	d000      	beq.n	800263a <__aeabi_d2f+0x46>
 8002638:	3304      	adds	r3, #4
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	04d2      	lsls	r2, r2, #19
 800263e:	401a      	ands	r2, r3
 8002640:	d05a      	beq.n	80026f8 <__aeabi_d2f+0x104>
 8002642:	3601      	adds	r6, #1
 8002644:	2eff      	cmp	r6, #255	; 0xff
 8002646:	d003      	beq.n	8002650 <__aeabi_d2f+0x5c>
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	b2f4      	uxtb	r4, r6
 800264e:	e001      	b.n	8002654 <__aeabi_d2f+0x60>
 8002650:	24ff      	movs	r4, #255	; 0xff
 8002652:	2300      	movs	r3, #0
 8002654:	0258      	lsls	r0, r3, #9
 8002656:	05e4      	lsls	r4, r4, #23
 8002658:	0a40      	lsrs	r0, r0, #9
 800265a:	07c9      	lsls	r1, r1, #31
 800265c:	4320      	orrs	r0, r4
 800265e:	4308      	orrs	r0, r1
 8002660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002662:	2c00      	cmp	r4, #0
 8002664:	d007      	beq.n	8002676 <__aeabi_d2f+0x82>
 8002666:	431d      	orrs	r5, r3
 8002668:	d0f2      	beq.n	8002650 <__aeabi_d2f+0x5c>
 800266a:	2080      	movs	r0, #128	; 0x80
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	0480      	lsls	r0, r0, #18
 8002670:	4303      	orrs	r3, r0
 8002672:	26ff      	movs	r6, #255	; 0xff
 8002674:	e7da      	b.n	800262c <__aeabi_d2f+0x38>
 8002676:	432b      	orrs	r3, r5
 8002678:	d003      	beq.n	8002682 <__aeabi_d2f+0x8e>
 800267a:	2305      	movs	r3, #5
 800267c:	08db      	lsrs	r3, r3, #3
 800267e:	2cff      	cmp	r4, #255	; 0xff
 8002680:	d003      	beq.n	800268a <__aeabi_d2f+0x96>
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	0a5b      	lsrs	r3, r3, #9
 8002686:	b2e4      	uxtb	r4, r4
 8002688:	e7e4      	b.n	8002654 <__aeabi_d2f+0x60>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d032      	beq.n	80026f4 <__aeabi_d2f+0x100>
 800268e:	2080      	movs	r0, #128	; 0x80
 8002690:	03c0      	lsls	r0, r0, #15
 8002692:	4303      	orrs	r3, r0
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	0a5b      	lsrs	r3, r3, #9
 8002698:	e7dc      	b.n	8002654 <__aeabi_d2f+0x60>
 800269a:	0032      	movs	r2, r6
 800269c:	3217      	adds	r2, #23
 800269e:	db14      	blt.n	80026ca <__aeabi_d2f+0xd6>
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	271e      	movs	r7, #30
 80026a4:	0412      	lsls	r2, r2, #16
 80026a6:	4313      	orrs	r3, r2
 80026a8:	1bbf      	subs	r7, r7, r6
 80026aa:	2f1f      	cmp	r7, #31
 80026ac:	dc0f      	bgt.n	80026ce <__aeabi_d2f+0xda>
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <__aeabi_d2f+0x10c>)
 80026b0:	4694      	mov	ip, r2
 80026b2:	4464      	add	r4, ip
 80026b4:	002a      	movs	r2, r5
 80026b6:	40a5      	lsls	r5, r4
 80026b8:	002e      	movs	r6, r5
 80026ba:	40a3      	lsls	r3, r4
 80026bc:	1e75      	subs	r5, r6, #1
 80026be:	41ae      	sbcs	r6, r5
 80026c0:	40fa      	lsrs	r2, r7
 80026c2:	4333      	orrs	r3, r6
 80026c4:	4313      	orrs	r3, r2
 80026c6:	2600      	movs	r6, #0
 80026c8:	e7b0      	b.n	800262c <__aeabi_d2f+0x38>
 80026ca:	2400      	movs	r4, #0
 80026cc:	e7d5      	b.n	800267a <__aeabi_d2f+0x86>
 80026ce:	2202      	movs	r2, #2
 80026d0:	4252      	negs	r2, r2
 80026d2:	1b96      	subs	r6, r2, r6
 80026d4:	001a      	movs	r2, r3
 80026d6:	40f2      	lsrs	r2, r6
 80026d8:	2f20      	cmp	r7, #32
 80026da:	d009      	beq.n	80026f0 <__aeabi_d2f+0xfc>
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <__aeabi_d2f+0x110>)
 80026de:	4684      	mov	ip, r0
 80026e0:	4464      	add	r4, ip
 80026e2:	40a3      	lsls	r3, r4
 80026e4:	432b      	orrs	r3, r5
 80026e6:	1e5d      	subs	r5, r3, #1
 80026e8:	41ab      	sbcs	r3, r5
 80026ea:	2600      	movs	r6, #0
 80026ec:	4313      	orrs	r3, r2
 80026ee:	e79d      	b.n	800262c <__aeabi_d2f+0x38>
 80026f0:	2300      	movs	r3, #0
 80026f2:	e7f7      	b.n	80026e4 <__aeabi_d2f+0xf0>
 80026f4:	2300      	movs	r3, #0
 80026f6:	e7ad      	b.n	8002654 <__aeabi_d2f+0x60>
 80026f8:	0034      	movs	r4, r6
 80026fa:	e7bf      	b.n	800267c <__aeabi_d2f+0x88>
 80026fc:	fffffc80 	.word	0xfffffc80
 8002700:	fffffc82 	.word	0xfffffc82
 8002704:	fffffca2 	.word	0xfffffca2

08002708 <__clzsi2>:
 8002708:	211c      	movs	r1, #28
 800270a:	2301      	movs	r3, #1
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	4298      	cmp	r0, r3
 8002710:	d301      	bcc.n	8002716 <__clzsi2+0xe>
 8002712:	0c00      	lsrs	r0, r0, #16
 8002714:	3910      	subs	r1, #16
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	4298      	cmp	r0, r3
 800271a:	d301      	bcc.n	8002720 <__clzsi2+0x18>
 800271c:	0a00      	lsrs	r0, r0, #8
 800271e:	3908      	subs	r1, #8
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	4298      	cmp	r0, r3
 8002724:	d301      	bcc.n	800272a <__clzsi2+0x22>
 8002726:	0900      	lsrs	r0, r0, #4
 8002728:	3904      	subs	r1, #4
 800272a:	a202      	add	r2, pc, #8	; (adr r2, 8002734 <__clzsi2+0x2c>)
 800272c:	5c10      	ldrb	r0, [r2, r0]
 800272e:	1840      	adds	r0, r0, r1
 8002730:	4770      	bx	lr
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	02020304 	.word	0x02020304
 8002738:	01010101 	.word	0x01010101
	...

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b510      	push	{r4, lr}
 8002746:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002748:	f001 f81e 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 800274c:	21fa      	movs	r1, #250	; 0xfa
 800274e:	0089      	lsls	r1, r1, #2
 8002750:	f7fd fcee 	bl	8000130 <__udivsi3>
 8002754:	f000 fb26 	bl	8002da4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002758:	2001      	movs	r0, #1
 800275a:	2200      	movs	r2, #0
 800275c:	0021      	movs	r1, r4
 800275e:	4240      	negs	r0, r0
 8002760:	f000 fae6 	bl	8002d30 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002764:	2000      	movs	r0, #0
 8002766:	bd10      	pop	{r4, pc}

08002768 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	2310      	movs	r3, #16
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_Init+0x1c>)
{
 800276c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002770:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002772:	430b      	orrs	r3, r1
 8002774:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002776:	f7ff ffe5 	bl	8002744 <HAL_InitTick>
  HAL_MspInit();
 800277a:	f002 f9b9 	bl	8004af0 <HAL_MspInit>
}
 800277e:	2000      	movs	r0, #0
 8002780:	bd10      	pop	{r4, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40022000 	.word	0x40022000

08002788 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_IncTick+0xc>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	4770      	bx	lr
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	20000020 	.word	0x20000020

08002798 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <HAL_GetTick+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
}
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000020 	.word	0x20000020

080027a4 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80027a4:	2300      	movs	r3, #0
{
 80027a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027a8:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80027aa:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ac:	6803      	ldr	r3, [r0, #0]
{
 80027ae:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	400a      	ands	r2, r1
 80027b4:	2a01      	cmp	r2, #1
 80027b6:	d107      	bne.n	80027c8 <ADC_Enable+0x24>
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	4211      	tst	r1, r2
 80027bc:	d001      	beq.n	80027c2 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027be:	2000      	movs	r0, #0
}
 80027c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	0412      	lsls	r2, r2, #16
 80027c6:	d4fa      	bmi.n	80027be <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	4a19      	ldr	r2, [pc, #100]	; (8002830 <ADC_Enable+0x8c>)
 80027cc:	4211      	tst	r1, r2
 80027ce:	d008      	beq.n	80027e2 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027d6:	4313      	orrs	r3, r2
 80027d8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80027dc:	4303      	orrs	r3, r0
 80027de:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80027e0:	e7ee      	b.n	80027c0 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80027e2:	2201      	movs	r2, #1
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <ADC_Enable+0x90>)
 80027ec:	4912      	ldr	r1, [pc, #72]	; (8002838 <ADC_Enable+0x94>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f7fd fc9e 	bl	8000130 <__udivsi3>
 80027f4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80027f6:	9b01      	ldr	r3, [sp, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80027fc:	f7ff ffcc 	bl	8002798 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002800:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002802:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	422b      	tst	r3, r5
 800280a:	d1d8      	bne.n	80027be <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800280c:	f7ff ffc4 	bl	8002798 <HAL_GetTick>
 8002810:	1b80      	subs	r0, r0, r6
 8002812:	2802      	cmp	r0, #2
 8002814:	d9f6      	bls.n	8002804 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	2310      	movs	r3, #16
 8002818:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281c:	4313      	orrs	r3, r2
 800281e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002822:	432b      	orrs	r3, r5
 8002824:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8002826:	e7cb      	b.n	80027c0 <ADC_Enable+0x1c>
      wait_loop_index--;
 8002828:	9b01      	ldr	r3, [sp, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	e7e2      	b.n	80027f6 <ADC_Enable+0x52>
 8002830:	80000017 	.word	0x80000017
 8002834:	20000000 	.word	0x20000000
 8002838:	000f4240 	.word	0x000f4240

0800283c <HAL_ADC_Init>:
{
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002842:	2c00      	cmp	r4, #0
 8002844:	d072      	beq.n	800292c <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800284c:	0022      	movs	r2, r4
 800284e:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8002850:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8002852:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002854:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002856:	f001 fd87 	bl	8004368 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800285a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800285c:	06db      	lsls	r3, r3, #27
 800285e:	d500      	bpl.n	8002862 <HAL_ADC_Init+0x26>
 8002860:	e079      	b.n	8002956 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002862:	2204      	movs	r2, #4
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	6898      	ldr	r0, [r3, #8]
 8002868:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800286a:	d000      	beq.n	800286e <HAL_ADC_Init+0x32>
 800286c:	e073      	b.n	8002956 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002870:	4942      	ldr	r1, [pc, #264]	; (800297c <HAL_ADC_Init+0x140>)
 8002872:	4011      	ands	r1, r2
 8002874:	2202      	movs	r2, #2
 8002876:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002878:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800287a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	400a      	ands	r2, r1
 8002880:	2a01      	cmp	r2, #1
 8002882:	d000      	beq.n	8002886 <HAL_ADC_Init+0x4a>
 8002884:	e06d      	b.n	8002962 <HAL_ADC_Init+0x126>
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	4211      	tst	r1, r2
 800288a:	d102      	bne.n	8002892 <HAL_ADC_Init+0x56>
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	0412      	lsls	r2, r2, #16
 8002890:	d567      	bpl.n	8002962 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	493a      	ldr	r1, [pc, #232]	; (8002980 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002896:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002898:	400a      	ands	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800289c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800289e:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80028a0:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80028a2:	69e2      	ldr	r2, [r4, #28]
 80028a4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80028a6:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80028a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80028aa:	3a01      	subs	r2, #1
 80028ac:	1e56      	subs	r6, r2, #1
 80028ae:	41b2      	sbcs	r2, r6
 80028b0:	0316      	lsls	r6, r2, #12
 80028b2:	68e2      	ldr	r2, [r4, #12]
 80028b4:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80028b6:	6922      	ldr	r2, [r4, #16]
 80028b8:	430f      	orrs	r7, r1
 80028ba:	2a02      	cmp	r2, #2
 80028bc:	d100      	bne.n	80028c0 <HAL_ADC_Init+0x84>
 80028be:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80028c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80028c4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80028c6:	433a      	orrs	r2, r7
 80028c8:	4332      	orrs	r2, r6
 80028ca:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028cc:	2901      	cmp	r1, #1
 80028ce:	d104      	bne.n	80028da <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	d12c      	bne.n	800292e <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0249      	lsls	r1, r1, #9
 80028d8:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028da:	20c2      	movs	r0, #194	; 0xc2
 80028dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028de:	30ff      	adds	r0, #255	; 0xff
 80028e0:	4281      	cmp	r1, r0
 80028e2:	d002      	beq.n	80028ea <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80028e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028e6:	4301      	orrs	r1, r0
 80028e8:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028ea:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80028ec:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028ee:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80028f0:	4311      	orrs	r1, r2
 80028f2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028f6:	4281      	cmp	r1, r0
 80028f8:	d002      	beq.n	8002900 <HAL_ADC_Init+0xc4>
 80028fa:	1e48      	subs	r0, r1, #1
 80028fc:	2806      	cmp	r0, #6
 80028fe:	d807      	bhi.n	8002910 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002900:	2507      	movs	r5, #7
 8002902:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002904:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002906:	43a8      	bics	r0, r5
 8002908:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800290a:	6958      	ldr	r0, [r3, #20]
 800290c:	4301      	orrs	r1, r0
 800290e:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	491c      	ldr	r1, [pc, #112]	; (8002984 <HAL_ADC_Init+0x148>)
 8002914:	400b      	ands	r3, r1
 8002916:	429a      	cmp	r2, r3
 8002918:	d111      	bne.n	800293e <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800291a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800291c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800291e:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8002920:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002922:	4393      	bics	r3, r2
 8002924:	001a      	movs	r2, r3
 8002926:	2301      	movs	r3, #1
 8002928:	4313      	orrs	r3, r2
 800292a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292e:	2020      	movs	r0, #32
 8002930:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002932:	4328      	orrs	r0, r5
 8002934:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002938:	4301      	orrs	r1, r0
 800293a:	64a1      	str	r1, [r4, #72]	; 0x48
 800293c:	e7cd      	b.n	80028da <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800293e:	2212      	movs	r2, #18
 8002940:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002944:	4393      	bics	r3, r2
 8002946:	001a      	movs	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	4313      	orrs	r3, r2
 800294c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002950:	4303      	orrs	r3, r0
 8002952:	64a3      	str	r3, [r4, #72]	; 0x48
 8002954:	e7ea      	b.n	800292c <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	2310      	movs	r3, #16
 8002958:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800295a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295c:	4313      	orrs	r3, r2
 800295e:	6463      	str	r3, [r4, #68]	; 0x44
 8002960:	e7e4      	b.n	800292c <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002962:	2118      	movs	r1, #24
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	438a      	bics	r2, r1
 8002968:	68a1      	ldr	r1, [r4, #8]
 800296a:	430a      	orrs	r2, r1
 800296c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800296e:	6919      	ldr	r1, [r3, #16]
 8002970:	6862      	ldr	r2, [r4, #4]
 8002972:	0089      	lsls	r1, r1, #2
 8002974:	0889      	lsrs	r1, r1, #2
 8002976:	4311      	orrs	r1, r2
 8002978:	6119      	str	r1, [r3, #16]
 800297a:	e78a      	b.n	8002892 <HAL_ADC_Init+0x56>
 800297c:	fffffefd 	.word	0xfffffefd
 8002980:	fffe0219 	.word	0xfffe0219
 8002984:	833fffe7 	.word	0x833fffe7

08002988 <HAL_ADC_Start_DMA>:
{
 8002988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800298a:	6803      	ldr	r3, [r0, #0]
{
 800298c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800298e:	689b      	ldr	r3, [r3, #8]
{
 8002990:	000f      	movs	r7, r1
 8002992:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8002994:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002996:	075b      	lsls	r3, r3, #29
 8002998:	d430      	bmi.n	80029fc <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 800299a:	0026      	movs	r6, r4
 800299c:	3640      	adds	r6, #64	; 0x40
 800299e:	7833      	ldrb	r3, [r6, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d02b      	beq.n	80029fc <HAL_ADC_Start_DMA+0x74>
 80029a4:	2301      	movs	r3, #1
 80029a6:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80029a8:	69e3      	ldr	r3, [r4, #28]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d127      	bne.n	80029fe <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80029ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80029b4:	401a      	ands	r2, r3
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4313      	orrs	r3, r2
 80029bc:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80029c4:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ca:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029cc:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_ADC_Start_DMA+0x90>)
 80029d0:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d2:	231c      	movs	r3, #28
 80029d4:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029d6:	684a      	ldr	r2, [r1, #4]
 80029d8:	3b0c      	subs	r3, #12
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80029de:	2301      	movs	r3, #1
 80029e0:	68ca      	ldr	r2, [r1, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029e6:	003a      	movs	r2, r7
 80029e8:	3140      	adds	r1, #64	; 0x40
 80029ea:	9b01      	ldr	r3, [sp, #4]
 80029ec:	f000 fa2a 	bl	8002e44 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80029f0:	2304      	movs	r3, #4
 80029f2:	0028      	movs	r0, r5
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	6891      	ldr	r1, [r2, #8]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]
}
 80029fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80029fe:	0020      	movs	r0, r4
 8002a00:	f7ff fed0 	bl	80027a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_Start_DMA+0x74>
 8002a08:	e7d1      	b.n	80029ae <HAL_ADC_Start_DMA+0x26>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	fffff0fe 	.word	0xfffff0fe
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a93 	.word	0x08002a93
 8002a18:	08002aa1 	.word	0x08002aa1

08002a1c <HAL_ADC_ConvCpltCallback>:
 8002a1c:	4770      	bx	lr
	...

08002a20 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a20:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a22:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002a24:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a28:	4211      	tst	r1, r2
 8002a2a:	d12a      	bne.n	8002a82 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a2e:	32b1      	adds	r2, #177	; 0xb1
 8002a30:	32ff      	adds	r2, #255	; 0xff
 8002a32:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a34:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	0109      	lsls	r1, r1, #4
 8002a3c:	68d0      	ldr	r0, [r2, #12]
 8002a3e:	4208      	tst	r0, r1
 8002a40:	d112      	bne.n	8002a68 <ADC_DMAConvCplt+0x48>
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	2900      	cmp	r1, #0
 8002a46:	d10f      	bne.n	8002a68 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a48:	6811      	ldr	r1, [r2, #0]
 8002a4a:	0709      	lsls	r1, r1, #28
 8002a4c:	d50c      	bpl.n	8002a68 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a4e:	6891      	ldr	r1, [r2, #8]
 8002a50:	0749      	lsls	r1, r1, #29
 8002a52:	d40d      	bmi.n	8002a70 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a54:	200c      	movs	r0, #12
 8002a56:	6851      	ldr	r1, [r2, #4]
 8002a58:	4381      	bics	r1, r0
 8002a5a:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5e:	490b      	ldr	r1, [pc, #44]	; (8002a8c <ADC_DMAConvCplt+0x6c>)
 8002a60:	4011      	ands	r1, r2
 8002a62:	2201      	movs	r2, #1
 8002a64:	430a      	orrs	r2, r1
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ffd7 	bl	8002a1c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002a6e:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	2220      	movs	r2, #32
 8002a72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a74:	430a      	orrs	r2, r1
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	649a      	str	r2, [r3, #72]	; 0x48
 8002a80:	e7f2      	b.n	8002a68 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4798      	blx	r3
}
 8002a88:	e7f1      	b.n	8002a6e <ADC_DMAConvCplt+0x4e>
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	fffffefe 	.word	0xfffffefe

08002a90 <HAL_ADC_ConvHalfCpltCallback>:
 8002a90:	4770      	bx	lr

08002a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a92:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002a94:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a96:	f7ff fffb 	bl	8002a90 <HAL_ADC_ConvHalfCpltCallback>
}
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <HAL_ADC_LevelOutOfWindowCallback>:
 8002a9c:	4770      	bx	lr

08002a9e <HAL_ADC_ErrorCallback>:
}
 8002a9e:	4770      	bx	lr

08002aa0 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aa0:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002aa4:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aa6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aac:	2304      	movs	r3, #4
 8002aae:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8002ab4:	f7ff fff3 	bl	8002a9e <HAL_ADC_ErrorCallback>
}
 8002ab8:	bd10      	pop	{r4, pc}
	...

08002abc <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002abc:	2204      	movs	r2, #4
 8002abe:	6803      	ldr	r3, [r0, #0]
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ac2:	6819      	ldr	r1, [r3, #0]
{
 8002ac4:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ac6:	4211      	tst	r1, r2
 8002ac8:	d002      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x14>
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	4211      	tst	r1, r2
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ad4:	4211      	tst	r1, r2
 8002ad6:	d028      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	4211      	tst	r1, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ade:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ae0:	06d2      	lsls	r2, r2, #27
 8002ae2:	d404      	bmi.n	8002aee <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	430a      	orrs	r2, r1
 8002aec:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aee:	22c0      	movs	r2, #192	; 0xc0
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	4211      	tst	r1, r2
 8002af6:	d112      	bne.n	8002b1e <HAL_ADC_IRQHandler+0x62>
 8002af8:	6a22      	ldr	r2, [r4, #32]
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	0712      	lsls	r2, r2, #28
 8002b02:	d50c      	bpl.n	8002b1e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	0752      	lsls	r2, r2, #29
 8002b08:	d43c      	bmi.n	8002b84 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b0a:	210c      	movs	r1, #12
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	438a      	bics	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_ADC_IRQHandler+0xdc>)
 8002b16:	401a      	ands	r2, r3
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f7ff ff7c 	bl	8002a1c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002b24:	220c      	movs	r2, #12
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002b2a:	2580      	movs	r5, #128	; 0x80
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	422a      	tst	r2, r5
 8002b32:	d00c      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x92>
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	422b      	tst	r3, r5
 8002b38:	d009      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b3e:	025b      	lsls	r3, r3, #9
 8002b40:	4313      	orrs	r3, r2
 8002b42:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b44:	0020      	movs	r0, r4
 8002b46:	f7ff ffa9 	bl	8002a9c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002b4e:	2210      	movs	r2, #16
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	4211      	tst	r1, r2
 8002b56:	d014      	beq.n	8002b82 <HAL_ADC_IRQHandler+0xc6>
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	4211      	tst	r1, r2
 8002b5c:	d011      	beq.n	8002b82 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b60:	2a01      	cmp	r2, #1
 8002b62:	d002      	beq.n	8002b6a <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002b64:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b66:	07d2      	lsls	r2, r2, #31
 8002b68:	d508      	bpl.n	8002b7c <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8002b6e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b70:	430a      	orrs	r2, r1
 8002b72:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b74:	2210      	movs	r2, #16
 8002b76:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002b78:	f7ff ff91 	bl	8002a9e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	2320      	movs	r3, #32
 8002b86:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002b90:	4313      	orrs	r3, r2
 8002b92:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b94:	e7c3      	b.n	8002b1e <HAL_ADC_IRQHandler+0x62>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	fffffefe 	.word	0xfffffefe

08002b9c <HAL_ADC_ConfigChannel>:
{
 8002b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002b9e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8002ba0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002ba2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002ba4:	3440      	adds	r4, #64	; 0x40
 8002ba6:	7823      	ldrb	r3, [r4, #0]
{
 8002ba8:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8002baa:	2002      	movs	r0, #2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d02b      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x6c>
 8002bb0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bb2:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bb4:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bb6:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8002bb8:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bba:	0740      	lsls	r0, r0, #29
 8002bbc:	d452      	bmi.n	8002c64 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002bbe:	482c      	ldr	r0, [pc, #176]	; (8002c70 <HAL_ADC_ConfigChannel+0xd4>)
 8002bc0:	684f      	ldr	r7, [r1, #4]
 8002bc2:	680d      	ldr	r5, [r1, #0]
 8002bc4:	4287      	cmp	r7, r0
 8002bc6:	d03b      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bc8:	40ab      	lsls	r3, r5
 8002bca:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bcc:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bce:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bd2:	4338      	orrs	r0, r7
 8002bd4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd6:	429e      	cmp	r6, r3
 8002bd8:	d00f      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x5e>
 8002bda:	3e01      	subs	r6, #1
 8002bdc:	2e06      	cmp	r6, #6
 8002bde:	d90c      	bls.n	8002bfa <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002be0:	688b      	ldr	r3, [r1, #8]
 8002be2:	2107      	movs	r1, #7
 8002be4:	6950      	ldr	r0, [r2, #20]
 8002be6:	4008      	ands	r0, r1
 8002be8:	4283      	cmp	r3, r0
 8002bea:	d006      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002bec:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002bee:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002bf0:	4388      	bics	r0, r1
 8002bf2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002bf4:	6950      	ldr	r0, [r2, #20]
 8002bf6:	4303      	orrs	r3, r0
 8002bf8:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bfa:	002b      	movs	r3, r5
 8002bfc:	3b10      	subs	r3, #16
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d903      	bls.n	8002c0a <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c02:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002c04:	2300      	movs	r3, #0
 8002c06:	7023      	strb	r3, [r4, #0]
}
 8002c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_ADC_ConfigChannel+0xd8>)
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	2d10      	cmp	r5, #16
 8002c12:	d013      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0xa0>
 8002c14:	03d2      	lsls	r2, r2, #15
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1a:	2d10      	cmp	r5, #16
 8002c1c:	d1f1      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_ADC_ConfigChannel+0xdc>)
 8002c20:	4916      	ldr	r1, [pc, #88]	; (8002c7c <HAL_ADC_ConfigChannel+0xe0>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	f7fd fa84 	bl	8000130 <__udivsi3>
 8002c28:	230a      	movs	r3, #10
 8002c2a:	4358      	muls	r0, r3
 8002c2c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002c2e:	9b01      	ldr	r3, [sp, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0e6      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002c34:	9b01      	ldr	r3, [sp, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	e7f8      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c3c:	0412      	lsls	r2, r2, #16
 8002c3e:	e7ea      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c40:	40ab      	lsls	r3, r5
 8002c42:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c44:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c46:	002b      	movs	r3, r5
 8002c48:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c4a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d8d8      	bhi.n	8002c02 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_ADC_ConfigChannel+0xd8>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2d10      	cmp	r5, #16
 8002c56:	d003      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0xc4>
 8002c58:	4909      	ldr	r1, [pc, #36]	; (8002c80 <HAL_ADC_ConfigChannel+0xe4>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e7d0      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x66>
 8002c60:	4908      	ldr	r1, [pc, #32]	; (8002c84 <HAL_ADC_ConfigChannel+0xe8>)
 8002c62:	e7fa      	b.n	8002c5a <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	2220      	movs	r2, #32
 8002c66:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002c68:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	646a      	str	r2, [r5, #68]	; 0x44
 8002c6e:	e7c9      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x68>
 8002c70:	00001001 	.word	0x00001001
 8002c74:	40012708 	.word	0x40012708
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	000f4240 	.word	0x000f4240
 8002c80:	ffbfffff 	.word	0xffbfffff
 8002c84:	ff7fffff 	.word	0xff7fffff

08002c88 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c8a:	0006      	movs	r6, r0
 8002c8c:	3640      	adds	r6, #64	; 0x40
 8002c8e:	7833      	ldrb	r3, [r6, #0]
{
 8002c90:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002c92:	2002      	movs	r0, #2
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d042      	beq.n	8002d1e <HAL_ADCEx_Calibration_Start+0x96>
 8002c98:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c9a:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8002c9c:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADCEx_Calibration_Start+0x2c>
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	4211      	tst	r1, r2
 8002cac:	d138      	bne.n	8002d20 <HAL_ADCEx_Calibration_Start+0x98>
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	0412      	lsls	r2, r2, #16
 8002cb2:	d435      	bmi.n	8002d20 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002cb4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cb6:	491d      	ldr	r1, [pc, #116]	; (8002d2c <HAL_ADCEx_Calibration_Start+0xa4>)
 8002cb8:	4011      	ands	r1, r2
 8002cba:	2202      	movs	r2, #2
 8002cbc:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002cbe:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8002cc0:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002cc2:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	0612      	lsls	r2, r2, #24
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002cd4:	f7ff fd60 	bl	8002798 <HAL_GetTick>
 8002cd8:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	2a00      	cmp	r2, #0
 8002ce0:	db0e      	blt.n	8002d00 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ce2:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002ce4:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ce6:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002ce8:	430d      	orrs	r5, r1
 8002cea:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8002cfe:	e00e      	b.n	8002d1e <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d00:	f7ff fd4a 	bl	8002798 <HAL_GetTick>
 8002d04:	1bc0      	subs	r0, r0, r7
 8002d06:	2802      	cmp	r0, #2
 8002d08:	d9e7      	bls.n	8002cda <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	2212      	movs	r2, #18
 8002d0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8002d10:	4393      	bics	r3, r2
 8002d12:	001a      	movs	r2, r3
 8002d14:	2310      	movs	r3, #16
 8002d16:	4313      	orrs	r3, r2
 8002d18:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	7033      	strb	r3, [r6, #0]
}
 8002d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	2320      	movs	r3, #32
 8002d22:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	4313      	orrs	r3, r2
 8002d28:	6463      	str	r3, [r4, #68]	; 0x44
 8002d2a:	e7e6      	b.n	8002cfa <HAL_ADCEx_Calibration_Start+0x72>
 8002d2c:	fffffefd 	.word	0xfffffefd

08002d30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002d34:	2800      	cmp	r0, #0
 8002d36:	da14      	bge.n	8002d62 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d38:	230f      	movs	r3, #15
 8002d3a:	b2c0      	uxtb	r0, r0
 8002d3c:	4003      	ands	r3, r0
 8002d3e:	3b08      	subs	r3, #8
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_NVIC_SetPriority+0x58>)
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4010      	ands	r0, r2
 8002d4c:	4090      	lsls	r0, r2
 8002d4e:	32fc      	adds	r2, #252	; 0xfc
 8002d50:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d52:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d54:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d56:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d58:	69dc      	ldr	r4, [r3, #28]
 8002d5a:	43ac      	bics	r4, r5
 8002d5c:	4321      	orrs	r1, r4
 8002d5e:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d62:	2503      	movs	r5, #3
 8002d64:	0883      	lsrs	r3, r0, #2
 8002d66:	4028      	ands	r0, r5
 8002d68:	40a8      	lsls	r0, r5
 8002d6a:	35fc      	adds	r5, #252	; 0xfc
 8002d6c:	002e      	movs	r6, r5
 8002d6e:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_NVIC_SetPriority+0x5c>)
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	22c0      	movs	r2, #192	; 0xc0
 8002d76:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d78:	4029      	ands	r1, r5
 8002d7a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	589c      	ldr	r4, [r3, r2]
 8002d80:	43b4      	bics	r4, r6
 8002d82:	4321      	orrs	r1, r4
 8002d84:	5099      	str	r1, [r3, r2]
 8002d86:	e7eb      	b.n	8002d60 <HAL_NVIC_SetPriority+0x30>
 8002d88:	e000ed00 	.word	0xe000ed00
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d90:	231f      	movs	r3, #31
 8002d92:	4018      	ands	r0, r3
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	4083      	lsls	r3, r0
 8002d98:	4a01      	ldr	r2, [pc, #4]	; (8002da0 <HAL_NVIC_EnableIRQ+0x10>)
 8002d9a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d9c:	4770      	bx	lr
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_SYSTICK_Config+0x28>)
 8002da6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d80d      	bhi.n	8002dca <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dae:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db2:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db6:	6a03      	ldr	r3, [r0, #32]
 8002db8:	0609      	lsls	r1, r1, #24
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dca:	4770      	bx	lr
 8002dcc:	00ffffff 	.word	0x00ffffff
 8002dd0:	e000e010 	.word	0xe000e010
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
  if(NULL == hdma)
 8002dde:	2c00      	cmp	r4, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de2:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de4:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de6:	1ca5      	adds	r5, r4, #2
 8002de8:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8002dea:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dee:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002df0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002df2:	6863      	ldr	r3, [r4, #4]
 8002df4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	68e1      	ldr	r1, [r4, #12]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6921      	ldr	r1, [r4, #16]
 8002dfc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	6961      	ldr	r1, [r4, #20]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	69a1      	ldr	r1, [r4, #24]
 8002e04:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	69e1      	ldr	r1, [r4, #28]
 8002e08:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002e0a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002e0c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_DMA_Init+0x64>)
 8002e10:	2114      	movs	r1, #20
 8002e12:	18c0      	adds	r0, r0, r3
 8002e14:	f7fd f98c 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e1a:	0080      	lsls	r0, r0, #2
 8002e1c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e1e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8002e20:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002e22:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8002e24:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002e26:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002e28:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002e2a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002e2e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002e30:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002e32:	77e0      	strb	r0, [r4, #31]
}  
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	ffffc00f 	.word	0xffffc00f
 8002e3c:	bffdfff8 	.word	0xbffdfff8
 8002e40:	40020000 	.word	0x40020000

08002e44 <HAL_DMA_Start_IT>:
{
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002e46:	1c46      	adds	r6, r0, #1
 8002e48:	7ff5      	ldrb	r5, [r6, #31]
 8002e4a:	2402      	movs	r4, #2
 8002e4c:	2d01      	cmp	r5, #1
 8002e4e:	d026      	beq.n	8002e9e <HAL_DMA_Start_IT+0x5a>
 8002e50:	2501      	movs	r5, #1
 8002e52:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e54:	1905      	adds	r5, r0, r4
 8002e56:	46ac      	mov	ip, r5
 8002e58:	7fed      	ldrb	r5, [r5, #31]
 8002e5a:	2700      	movs	r7, #0
 8002e5c:	b2ed      	uxtb	r5, r5
 8002e5e:	2d01      	cmp	r5, #1
 8002e60:	d129      	bne.n	8002eb6 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002e62:	4666      	mov	r6, ip
 8002e64:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e66:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e6a:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e6c:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e6e:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e70:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e72:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e74:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002e76:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002e78:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7a:	6843      	ldr	r3, [r0, #4]
 8002e7c:	6805      	ldr	r5, [r0, #0]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d10f      	bne.n	8002ea2 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8002e82:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e84:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e88:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e8e:	230e      	movs	r3, #14
 8002e90:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e92:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e94:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e98:	682a      	ldr	r2, [r5, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	602b      	str	r3, [r5, #0]
} 
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002ea2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ea4:	60e2      	str	r2, [r4, #12]
 8002ea6:	e7ee      	b.n	8002e86 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002eac:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002eae:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	e7ed      	b.n	8002e92 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8002eb6:	77f7      	strb	r7, [r6, #31]
 8002eb8:	e7f1      	b.n	8002e9e <HAL_DMA_Start_IT+0x5a>

08002eba <HAL_DMA_Abort_IT>:
{  
 8002eba:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ebc:	1c84      	adds	r4, r0, #2
 8002ebe:	7fe3      	ldrb	r3, [r4, #31]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002ec8:	3b03      	subs	r3, #3
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ece:	210e      	movs	r1, #14
 8002ed0:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ed2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eda:	2201      	movs	r2, #1
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	4391      	bics	r1, r2
 8002ee0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	40a9      	lsls	r1, r5
 8002ee6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002ee8:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002eea:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002eec:	2400      	movs	r4, #0
 8002eee:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8002ef0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002ef2:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002ef6:	42a2      	cmp	r2, r4
 8002ef8:	d0e7      	beq.n	8002eca <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002efa:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	0023      	movs	r3, r4
 8002efe:	e7e4      	b.n	8002eca <HAL_DMA_Abort_IT+0x10>

08002f00 <HAL_DMA_IRQHandler>:
{
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f02:	2704      	movs	r7, #4
 8002f04:	003e      	movs	r6, r7
 8002f06:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f0a:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f0c:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f12:	422e      	tst	r6, r5
 8002f14:	d00d      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x32>
 8002f16:	423c      	tst	r4, r7
 8002f18:	d00b      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	0689      	lsls	r1, r1, #26
 8002f1e:	d402      	bmi.n	8002f26 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	43b9      	bics	r1, r7
 8002f24:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f28:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d019      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8002f2e:	4798      	blx	r3
}  
 8002f30:	e017      	b.n	8002f62 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f32:	2702      	movs	r7, #2
 8002f34:	003e      	movs	r6, r7
 8002f36:	408e      	lsls	r6, r1
 8002f38:	422e      	tst	r6, r5
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x64>
 8002f3c:	423c      	tst	r4, r7
 8002f3e:	d011      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	0689      	lsls	r1, r1, #26
 8002f44:	d406      	bmi.n	8002f54 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f46:	240a      	movs	r4, #10
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	43a1      	bics	r1, r4
 8002f4c:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	2101      	movs	r1, #1
 8002f50:	19c3      	adds	r3, r0, r7
 8002f52:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f54:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002f56:	2200      	movs	r2, #0
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002f5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d1e5      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x2e>
}  
 8002f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f64:	2608      	movs	r6, #8
 8002f66:	0037      	movs	r7, r6
 8002f68:	408f      	lsls	r7, r1
 8002f6a:	423d      	tst	r5, r7
 8002f6c:	d0f9      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x62>
 8002f6e:	4234      	tst	r4, r6
 8002f70:	d0f7      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f72:	250e      	movs	r5, #14
 8002f74:	681c      	ldr	r4, [r3, #0]
 8002f76:	43ac      	bics	r4, r5
 8002f78:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	001c      	movs	r4, r3
 8002f7e:	408c      	lsls	r4, r1
 8002f80:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8002f82:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f84:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002f86:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002f88:	2200      	movs	r2, #0
 8002f8a:	18c3      	adds	r3, r0, r3
 8002f8c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8002f8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f90:	e7e5      	b.n	8002f5e <HAL_DMA_IRQHandler+0x5e>
	...

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002f96:	680b      	ldr	r3, [r1, #0]
{ 
 8002f98:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002f9a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8002f9c:	2300      	movs	r3, #0
{ 
 8002f9e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002fa0:	9a02      	ldr	r2, [sp, #8]
 8002fa2:	40da      	lsrs	r2, r3
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8002fa6:	b007      	add	sp, #28
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002faa:	2201      	movs	r2, #1
 8002fac:	409a      	lsls	r2, r3
 8002fae:	9203      	str	r2, [sp, #12]
 8002fb0:	9903      	ldr	r1, [sp, #12]
 8002fb2:	9a02      	ldr	r2, [sp, #8]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8002fb8:	d100      	bne.n	8002fbc <HAL_GPIO_Init+0x28>
 8002fba:	e08c      	b.n	80030d6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002fbc:	9a01      	ldr	r2, [sp, #4]
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	6852      	ldr	r2, [r2, #4]
 8002fc2:	0016      	movs	r6, r2
 8002fc4:	438e      	bics	r6, r1
 8002fc6:	2e02      	cmp	r6, #2
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002fca:	2507      	movs	r5, #7
 8002fcc:	401d      	ands	r5, r3
 8002fce:	00ad      	lsls	r5, r5, #2
 8002fd0:	3901      	subs	r1, #1
 8002fd2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8002fd4:	08dc      	lsrs	r4, r3, #3
 8002fd6:	00a4      	lsls	r4, r4, #2
 8002fd8:	1904      	adds	r4, r0, r4
 8002fda:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002fdc:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002fde:	9901      	ldr	r1, [sp, #4]
 8002fe0:	6909      	ldr	r1, [r1, #16]
 8002fe2:	40a9      	lsls	r1, r5
 8002fe4:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002fe6:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002fe8:	2403      	movs	r4, #3
 8002fea:	005f      	lsls	r7, r3, #1
 8002fec:	40bc      	lsls	r4, r7
 8002fee:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002ff0:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff2:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002ff4:	4025      	ands	r5, r4
 8002ff6:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	2503      	movs	r5, #3
 8002ffa:	4015      	ands	r5, r2
 8002ffc:	40bd      	lsls	r5, r7
 8002ffe:	4661      	mov	r1, ip
 8003000:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8003002:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003004:	2e01      	cmp	r6, #1
 8003006:	d80f      	bhi.n	8003028 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003008:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800300a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800300c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800300e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003010:	40bd      	lsls	r5, r7
 8003012:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003014:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003016:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003018:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800301a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800301c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800301e:	2101      	movs	r1, #1
 8003020:	400d      	ands	r5, r1
 8003022:	409d      	lsls	r5, r3
 8003024:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003026:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8003028:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800302a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800302e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003030:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003032:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003034:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003036:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003038:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800303a:	420a      	tst	r2, r1
 800303c:	d04b      	beq.n	80030d6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	2101      	movs	r1, #1
 8003040:	4c26      	ldr	r4, [pc, #152]	; (80030dc <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003042:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003044:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003046:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003048:	430d      	orrs	r5, r1
 800304a:	61a5      	str	r5, [r4, #24]
 800304c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800304e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003050:	400c      	ands	r4, r1
 8003052:	9405      	str	r4, [sp, #20]
 8003054:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003056:	240f      	movs	r4, #15
 8003058:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_GPIO_Init+0x14c>)
 800305a:	00ad      	lsls	r5, r5, #2
 800305c:	00b6      	lsls	r6, r6, #2
 800305e:	186d      	adds	r5, r5, r1
 8003060:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8003064:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003066:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003068:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	2400      	movs	r4, #0
 800306c:	4288      	cmp	r0, r1
 800306e:	d00c      	beq.n	800308a <HAL_GPIO_Init+0xf6>
 8003070:	491c      	ldr	r1, [pc, #112]	; (80030e4 <HAL_GPIO_Init+0x150>)
 8003072:	3401      	adds	r4, #1
 8003074:	4288      	cmp	r0, r1
 8003076:	d008      	beq.n	800308a <HAL_GPIO_Init+0xf6>
 8003078:	491b      	ldr	r1, [pc, #108]	; (80030e8 <HAL_GPIO_Init+0x154>)
 800307a:	3401      	adds	r4, #1
 800307c:	4288      	cmp	r0, r1
 800307e:	d004      	beq.n	800308a <HAL_GPIO_Init+0xf6>
 8003080:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_GPIO_Init+0x158>)
 8003082:	3403      	adds	r4, #3
 8003084:	4288      	cmp	r0, r1
 8003086:	d100      	bne.n	800308a <HAL_GPIO_Init+0xf6>
 8003088:	3c02      	subs	r4, #2
 800308a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800308c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8003090:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8003092:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8003094:	4c16      	ldr	r4, [pc, #88]	; (80030f0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003096:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8003098:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800309a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800309c:	03d1      	lsls	r1, r2, #15
 800309e:	d401      	bmi.n	80030a4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80030a0:	003e      	movs	r6, r7
 80030a2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80030a4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80030a6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80030a8:	9e00      	ldr	r6, [sp, #0]
 80030aa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ac:	0391      	lsls	r1, r2, #14
 80030ae:	d401      	bmi.n	80030b4 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80030b0:	003e      	movs	r6, r7
 80030b2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80030b4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80030b6:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80030b8:	9e00      	ldr	r6, [sp, #0]
 80030ba:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030bc:	02d1      	lsls	r1, r2, #11
 80030be:	d401      	bmi.n	80030c4 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80030c0:	003e      	movs	r6, r7
 80030c2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80030c4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80030c6:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80030c8:	9f00      	ldr	r7, [sp, #0]
 80030ca:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030cc:	0292      	lsls	r2, r2, #10
 80030ce:	d401      	bmi.n	80030d4 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80030d0:	402e      	ands	r6, r5
 80030d2:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80030d4:	60e7      	str	r7, [r4, #12]
    position++;
 80030d6:	3301      	adds	r3, #1
 80030d8:	e762      	b.n	8002fa0 <HAL_GPIO_Init+0xc>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40010000 	.word	0x40010000
 80030e4:	48000400 	.word	0x48000400
 80030e8:	48000800 	.word	0x48000800
 80030ec:	48000c00 	.word	0x48000c00
 80030f0:	40010400 	.word	0x40010400

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80030fa:	2c00      	cmp	r4, #0
 80030fc:	d03f      	beq.n	800317e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fe:	0025      	movs	r5, r4
 8003100:	3541      	adds	r5, #65	; 0x41
 8003102:	782b      	ldrb	r3, [r5, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800310a:	0022      	movs	r2, r4
 800310c:	3240      	adds	r2, #64	; 0x40
 800310e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003110:	0020      	movs	r0, r4
 8003112:	f001 fc11 	bl	8004938 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003116:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003118:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800311a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800311c:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68a6      	ldr	r6, [r4, #8]
 8003124:	438a      	bics	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003128:	6861      	ldr	r1, [r4, #4]
 800312a:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_I2C_Init+0xa0>)
 800312c:	400a      	ands	r2, r1
 800312e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_I2C_Init+0xa4>)
 8003134:	4011      	ands	r1, r2
 8003136:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003138:	2801      	cmp	r0, #1
 800313a:	d121      	bne.n	8003180 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	0209      	lsls	r1, r1, #8
 8003140:	4331      	orrs	r1, r6
 8003142:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003144:	6858      	ldr	r0, [r3, #4]
 8003146:	4915      	ldr	r1, [pc, #84]	; (800319c <HAL_I2C_Init+0xa8>)
 8003148:	4301      	orrs	r1, r0
 800314a:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314c:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003150:	400a      	ands	r2, r1
 8003152:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003154:	6961      	ldr	r1, [r4, #20]
 8003156:	6922      	ldr	r2, [r4, #16]
 8003158:	430a      	orrs	r2, r1
 800315a:	69a1      	ldr	r1, [r4, #24]
 800315c:	0209      	lsls	r1, r1, #8
 800315e:	430a      	orrs	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003162:	6a21      	ldr	r1, [r4, #32]
 8003164:	69e2      	ldr	r2, [r4, #28]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800316a:	2201      	movs	r2, #1
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003172:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003174:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003176:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003178:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	3442      	adds	r4, #66	; 0x42
 800317c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800317e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003180:	2184      	movs	r1, #132	; 0x84
 8003182:	0209      	lsls	r1, r1, #8
 8003184:	4331      	orrs	r1, r6
 8003186:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003188:	2802      	cmp	r0, #2
 800318a:	d1db      	bne.n	8003144 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	0109      	lsls	r1, r1, #4
 8003190:	6059      	str	r1, [r3, #4]
 8003192:	e7d7      	b.n	8003144 <HAL_I2C_Init+0x50>
 8003194:	f0ffffff 	.word	0xf0ffffff
 8003198:	ffff7fff 	.word	0xffff7fff
 800319c:	02008000 	.word	0x02008000

080031a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	0004      	movs	r4, r0
 80031a4:	3441      	adds	r4, #65	; 0x41
 80031a6:	7822      	ldrb	r2, [r4, #0]
{
 80031a8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	2a20      	cmp	r2, #32
 80031b0:	d118      	bne.n	80031e4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80031b2:	001d      	movs	r5, r3
 80031b4:	3540      	adds	r5, #64	; 0x40
 80031b6:	782e      	ldrb	r6, [r5, #0]
 80031b8:	2e01      	cmp	r6, #1
 80031ba:	d013      	beq.n	80031e4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80031bc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031be:	3022      	adds	r0, #34	; 0x22
 80031c0:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80031c2:	681e      	ldr	r6, [r3, #0]
 80031c4:	3823      	subs	r0, #35	; 0x23
 80031c6:	4386      	bics	r6, r0
 80031c8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031ca:	681e      	ldr	r6, [r3, #0]
 80031cc:	4f06      	ldr	r7, [pc, #24]	; (80031e8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80031ce:	403e      	ands	r6, r7
 80031d0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d2:	681e      	ldr	r6, [r3, #0]
 80031d4:	4331      	orrs	r1, r6
 80031d6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	4308      	orrs	r0, r1
 80031dc:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80031de:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80031e2:	7028      	strb	r0, [r5, #0]
  }
}
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	ffffefff 	.word	0xffffefff

080031ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	0005      	movs	r5, r0
 80031f0:	3541      	adds	r5, #65	; 0x41
 80031f2:	782a      	ldrb	r2, [r5, #0]
{
 80031f4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	2a20      	cmp	r2, #32
 80031fc:	d117      	bne.n	800322e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80031fe:	001c      	movs	r4, r3
 8003200:	3440      	adds	r4, #64	; 0x40
 8003202:	7826      	ldrb	r6, [r4, #0]
 8003204:	2e01      	cmp	r6, #1
 8003206:	d012      	beq.n	800322e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8003208:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	3022      	adds	r0, #34	; 0x22
 800320c:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800320e:	681e      	ldr	r6, [r3, #0]
 8003210:	3823      	subs	r0, #35	; 0x23
 8003212:	4386      	bics	r6, r0
 8003214:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003216:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003218:	4f05      	ldr	r7, [pc, #20]	; (8003230 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800321a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800321c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800321e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003220:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	4308      	orrs	r0, r1
 8003226:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003228:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800322c:	7020      	strb	r0, [r4, #0]
  }
}
 800322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003230:	fffff0ff 	.word	0xfffff0ff

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	6803      	ldr	r3, [r0, #0]
{
 8003238:	b085      	sub	sp, #20
 800323a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323c:	07db      	lsls	r3, r3, #31
 800323e:	d42f      	bmi.n	80032a0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	079b      	lsls	r3, r3, #30
 8003244:	d500      	bpl.n	8003248 <HAL_RCC_OscConfig+0x14>
 8003246:	e081      	b.n	800334c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	071b      	lsls	r3, r3, #28
 800324c:	d500      	bpl.n	8003250 <HAL_RCC_OscConfig+0x1c>
 800324e:	e0bc      	b.n	80033ca <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	075b      	lsls	r3, r3, #29
 8003254:	d500      	bpl.n	8003258 <HAL_RCC_OscConfig+0x24>
 8003256:	e0df      	b.n	8003418 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	06db      	lsls	r3, r3, #27
 800325c:	d51a      	bpl.n	8003294 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800325e:	696a      	ldr	r2, [r5, #20]
 8003260:	4cb5      	ldr	r4, [pc, #724]	; (8003538 <HAL_RCC_OscConfig+0x304>)
 8003262:	2304      	movs	r3, #4
 8003264:	2a01      	cmp	r2, #1
 8003266:	d000      	beq.n	800326a <HAL_RCC_OscConfig+0x36>
 8003268:	e14b      	b.n	8003502 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800326a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800326c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800326e:	430b      	orrs	r3, r1
 8003270:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003274:	431a      	orrs	r2, r3
 8003276:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003278:	f7ff fa8e 	bl	8002798 <HAL_GetTick>
 800327c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800327e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003280:	4233      	tst	r3, r6
 8003282:	d100      	bne.n	8003286 <HAL_RCC_OscConfig+0x52>
 8003284:	e136      	b.n	80034f4 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003286:	21f8      	movs	r1, #248	; 0xf8
 8003288:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800328a:	69ab      	ldr	r3, [r5, #24]
 800328c:	438a      	bics	r2, r1
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4313      	orrs	r3, r2
 8003292:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	6a29      	ldr	r1, [r5, #32]
 8003296:	2900      	cmp	r1, #0
 8003298:	d000      	beq.n	800329c <HAL_RCC_OscConfig+0x68>
 800329a:	e159      	b.n	8003550 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800329c:	2000      	movs	r0, #0
 800329e:	e013      	b.n	80032c8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032a0:	210c      	movs	r1, #12
 80032a2:	4ca5      	ldr	r4, [pc, #660]	; (8003538 <HAL_RCC_OscConfig+0x304>)
 80032a4:	6862      	ldr	r2, [r4, #4]
 80032a6:	400a      	ands	r2, r1
 80032a8:	2a04      	cmp	r2, #4
 80032aa:	d006      	beq.n	80032ba <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	400b      	ands	r3, r1
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	03db      	lsls	r3, r3, #15
 80032b8:	d508      	bpl.n	80032cc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	039b      	lsls	r3, r3, #14
 80032be:	d5bf      	bpl.n	8003240 <HAL_RCC_OscConfig+0xc>
 80032c0:	686b      	ldr	r3, [r5, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1bc      	bne.n	8003240 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
}
 80032c8:	b005      	add	sp, #20
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	686b      	ldr	r3, [r5, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d113      	bne.n	80032fa <HAL_RCC_OscConfig+0xc6>
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	4313      	orrs	r3, r2
 80032da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032dc:	f7ff fa5c 	bl	8002798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80032e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e4:	02b6      	lsls	r6, r6, #10
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	4233      	tst	r3, r6
 80032ea:	d1a9      	bne.n	8003240 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff fa54 	bl	8002798 <HAL_GetTick>
 80032f0:	1bc0      	subs	r0, r0, r7
 80032f2:	2864      	cmp	r0, #100	; 0x64
 80032f4:	d9f7      	bls.n	80032e6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80032f6:	2003      	movs	r0, #3
 80032f8:	e7e6      	b.n	80032c8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0xf8>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	4a8e      	ldr	r2, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	4013      	ands	r3, r2
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	4a8d      	ldr	r2, [pc, #564]	; (8003540 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330e:	4013      	ands	r3, r2
 8003310:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003312:	f7ff fa41 	bl	8002798 <HAL_GetTick>
 8003316:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	4233      	tst	r3, r6
 800331c:	d100      	bne.n	8003320 <HAL_RCC_OscConfig+0xec>
 800331e:	e78f      	b.n	8003240 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003320:	f7ff fa3a 	bl	8002798 <HAL_GetTick>
 8003324:	1bc0      	subs	r0, r0, r7
 8003326:	2864      	cmp	r0, #100	; 0x64
 8003328:	d9f6      	bls.n	8003318 <HAL_RCC_OscConfig+0xe4>
 800332a:	e7e4      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332c:	2b05      	cmp	r3, #5
 800332e:	d105      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	02db      	lsls	r3, r3, #11
 8003336:	4313      	orrs	r3, r2
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	e7ca      	b.n	80032d2 <HAL_RCC_OscConfig+0x9e>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	4a7f      	ldr	r2, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x308>)
 8003340:	4013      	ands	r3, r2
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x30c>)
 8003348:	4013      	ands	r3, r2
 800334a:	e7c6      	b.n	80032da <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800334c:	220c      	movs	r2, #12
 800334e:	4c7a      	ldr	r4, [pc, #488]	; (8003538 <HAL_RCC_OscConfig+0x304>)
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	4213      	tst	r3, r2
 8003354:	d006      	beq.n	8003364 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	4013      	ands	r3, r2
 800335a:	2b08      	cmp	r3, #8
 800335c:	d110      	bne.n	8003380 <HAL_RCC_OscConfig+0x14c>
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	03db      	lsls	r3, r3, #15
 8003362:	d40d      	bmi.n	8003380 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	079b      	lsls	r3, r3, #30
 8003368:	d502      	bpl.n	8003370 <HAL_RCC_OscConfig+0x13c>
 800336a:	68eb      	ldr	r3, [r5, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d1aa      	bne.n	80032c6 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	21f8      	movs	r1, #248	; 0xf8
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	692b      	ldr	r3, [r5, #16]
 8003376:	438a      	bics	r2, r1
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4313      	orrs	r3, r2
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	e763      	b.n	8003248 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003380:	68ea      	ldr	r2, [r5, #12]
 8003382:	2301      	movs	r3, #1
 8003384:	2a00      	cmp	r2, #0
 8003386:	d00f      	beq.n	80033a8 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8003388:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800338c:	4313      	orrs	r3, r2
 800338e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003390:	f7ff fa02 	bl	8002798 <HAL_GetTick>
 8003394:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	4233      	tst	r3, r6
 800339a:	d1e9      	bne.n	8003370 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339c:	f7ff f9fc 	bl	8002798 <HAL_GetTick>
 80033a0:	1bc0      	subs	r0, r0, r7
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d9f7      	bls.n	8003396 <HAL_RCC_OscConfig+0x162>
 80033a6:	e7a6      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80033a8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80033ac:	439a      	bics	r2, r3
 80033ae:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80033b0:	f7ff f9f2 	bl	8002798 <HAL_GetTick>
 80033b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	4233      	tst	r3, r6
 80033ba:	d100      	bne.n	80033be <HAL_RCC_OscConfig+0x18a>
 80033bc:	e744      	b.n	8003248 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7ff f9eb 	bl	8002798 <HAL_GetTick>
 80033c2:	1bc0      	subs	r0, r0, r7
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d9f6      	bls.n	80033b6 <HAL_RCC_OscConfig+0x182>
 80033c8:	e795      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ca:	69ea      	ldr	r2, [r5, #28]
 80033cc:	2301      	movs	r3, #1
 80033ce:	4c5a      	ldr	r4, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x304>)
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80033d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80033d8:	4313      	orrs	r3, r2
 80033da:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80033dc:	f7ff f9dc 	bl	8002798 <HAL_GetTick>
 80033e0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e4:	4233      	tst	r3, r6
 80033e6:	d000      	beq.n	80033ea <HAL_RCC_OscConfig+0x1b6>
 80033e8:	e732      	b.n	8003250 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7ff f9d5 	bl	8002798 <HAL_GetTick>
 80033ee:	1bc0      	subs	r0, r0, r7
 80033f0:	2802      	cmp	r0, #2
 80033f2:	d9f6      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1ae>
 80033f4:	e77f      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80033f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80033fa:	439a      	bics	r2, r3
 80033fc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80033fe:	f7ff f9cb 	bl	8002798 <HAL_GetTick>
 8003402:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003406:	4233      	tst	r3, r6
 8003408:	d100      	bne.n	800340c <HAL_RCC_OscConfig+0x1d8>
 800340a:	e721      	b.n	8003250 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7ff f9c4 	bl	8002798 <HAL_GetTick>
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	2802      	cmp	r0, #2
 8003414:	d9f6      	bls.n	8003404 <HAL_RCC_OscConfig+0x1d0>
 8003416:	e76e      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003418:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341c:	4c46      	ldr	r4, [pc, #280]	; (8003538 <HAL_RCC_OscConfig+0x304>)
 800341e:	0552      	lsls	r2, r2, #21
 8003420:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003422:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003424:	4213      	tst	r3, r2
 8003426:	d108      	bne.n	800343a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	69e3      	ldr	r3, [r4, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	61e3      	str	r3, [r4, #28]
 800342e:	69e3      	ldr	r3, [r4, #28]
 8003430:	4013      	ands	r3, r2
 8003432:	9303      	str	r3, [sp, #12]
 8003434:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	2780      	movs	r7, #128	; 0x80
 800343c:	4e41      	ldr	r6, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x310>)
 800343e:	007f      	lsls	r7, r7, #1
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	423b      	tst	r3, r7
 8003444:	d006      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003446:	68ab      	ldr	r3, [r5, #8]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d113      	bne.n	8003474 <HAL_RCC_OscConfig+0x240>
 800344c:	6a22      	ldr	r2, [r4, #32]
 800344e:	4313      	orrs	r3, r2
 8003450:	6223      	str	r3, [r4, #32]
 8003452:	e030      	b.n	80034b6 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003454:	6833      	ldr	r3, [r6, #0]
 8003456:	433b      	orrs	r3, r7
 8003458:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800345a:	f7ff f99d 	bl	8002798 <HAL_GetTick>
 800345e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	6833      	ldr	r3, [r6, #0]
 8003462:	423b      	tst	r3, r7
 8003464:	d1ef      	bne.n	8003446 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7ff f997 	bl	8002798 <HAL_GetTick>
 800346a:	9b01      	ldr	r3, [sp, #4]
 800346c:	1ac0      	subs	r0, r0, r3
 800346e:	2864      	cmp	r0, #100	; 0x64
 8003470:	d9f6      	bls.n	8003460 <HAL_RCC_OscConfig+0x22c>
 8003472:	e740      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
 8003474:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003476:	2b00      	cmp	r3, #0
 8003478:	d114      	bne.n	80034a4 <HAL_RCC_OscConfig+0x270>
 800347a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347e:	4393      	bics	r3, r2
 8003480:	6223      	str	r3, [r4, #32]
 8003482:	6a23      	ldr	r3, [r4, #32]
 8003484:	3203      	adds	r2, #3
 8003486:	4393      	bics	r3, r2
 8003488:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800348a:	f7ff f985 	bl	8002798 <HAL_GetTick>
 800348e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	6a23      	ldr	r3, [r4, #32]
 8003492:	423b      	tst	r3, r7
 8003494:	d025      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7ff f97f 	bl	8002798 <HAL_GetTick>
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x314>)
 800349c:	1b80      	subs	r0, r0, r6
 800349e:	4298      	cmp	r0, r3
 80034a0:	d9f6      	bls.n	8003490 <HAL_RCC_OscConfig+0x25c>
 80034a2:	e728      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d10b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x28c>
 80034a8:	6a21      	ldr	r1, [r4, #32]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6223      	str	r3, [r4, #32]
 80034b0:	6a23      	ldr	r3, [r4, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80034b6:	f7ff f96f 	bl	8002798 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80034bc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00d      	b.n	80034dc <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	6a23      	ldr	r3, [r4, #32]
 80034c2:	4393      	bics	r3, r2
 80034c4:	2204      	movs	r2, #4
 80034c6:	6223      	str	r3, [r4, #32]
 80034c8:	6a23      	ldr	r3, [r4, #32]
 80034ca:	4393      	bics	r3, r2
 80034cc:	e7c0      	b.n	8003450 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7ff f963 	bl	8002798 <HAL_GetTick>
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x314>)
 80034d4:	1b80      	subs	r0, r0, r6
 80034d6:	4298      	cmp	r0, r3
 80034d8:	d900      	bls.n	80034dc <HAL_RCC_OscConfig+0x2a8>
 80034da:	e70c      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	6a23      	ldr	r3, [r4, #32]
 80034de:	423b      	tst	r3, r7
 80034e0:	d0f5      	beq.n	80034ce <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80034e2:	9b00      	ldr	r3, [sp, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d000      	beq.n	80034ea <HAL_RCC_OscConfig+0x2b6>
 80034e8:	e6b6      	b.n	8003258 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	69e3      	ldr	r3, [r4, #28]
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_RCC_OscConfig+0x318>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	61e3      	str	r3, [r4, #28]
 80034f2:	e6b1      	b.n	8003258 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034f4:	f7ff f950 	bl	8002798 <HAL_GetTick>
 80034f8:	1bc0      	subs	r0, r0, r7
 80034fa:	2802      	cmp	r0, #2
 80034fc:	d800      	bhi.n	8003500 <HAL_RCC_OscConfig+0x2cc>
 80034fe:	e6be      	b.n	800327e <HAL_RCC_OscConfig+0x4a>
 8003500:	e6f9      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003502:	3205      	adds	r2, #5
 8003504:	d103      	bne.n	800350e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003506:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003508:	439a      	bics	r2, r3
 800350a:	6362      	str	r2, [r4, #52]	; 0x34
 800350c:	e6bb      	b.n	8003286 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800350e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003510:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003512:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003514:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003516:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800351a:	4393      	bics	r3, r2
 800351c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800351e:	f7ff f93b 	bl	8002798 <HAL_GetTick>
 8003522:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003526:	4233      	tst	r3, r6
 8003528:	d100      	bne.n	800352c <HAL_RCC_OscConfig+0x2f8>
 800352a:	e6b3      	b.n	8003294 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800352c:	f7ff f934 	bl	8002798 <HAL_GetTick>
 8003530:	1bc0      	subs	r0, r0, r7
 8003532:	2802      	cmp	r0, #2
 8003534:	d9f6      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 8003536:	e6de      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
 8003538:	40021000 	.word	0x40021000
 800353c:	fffeffff 	.word	0xfffeffff
 8003540:	fffbffff 	.word	0xfffbffff
 8003544:	40007000 	.word	0x40007000
 8003548:	00001388 	.word	0x00001388
 800354c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003550:	220c      	movs	r2, #12
 8003552:	4c26      	ldr	r4, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8003554:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	4013      	ands	r3, r2
 800355a:	2b08      	cmp	r3, #8
 800355c:	d100      	bne.n	8003560 <HAL_RCC_OscConfig+0x32c>
 800355e:	e6b3      	b.n	80032c8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <HAL_RCC_OscConfig+0x3bc>)
 8003564:	4013      	ands	r3, r2
 8003566:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003568:	2902      	cmp	r1, #2
 800356a:	d12f      	bne.n	80035cc <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 800356c:	f7ff f914 	bl	8002798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003572:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	04b6      	lsls	r6, r6, #18
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	4233      	tst	r3, r6
 800357a:	d121      	bne.n	80035c0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357c:	220f      	movs	r2, #15
 800357e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003580:	4393      	bics	r3, r2
 8003582:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003584:	4313      	orrs	r3, r2
 8003586:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003588:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800358a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800358c:	6862      	ldr	r2, [r4, #4]
 800358e:	430b      	orrs	r3, r1
 8003590:	4918      	ldr	r1, [pc, #96]	; (80035f4 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003592:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003594:	400a      	ands	r2, r1
 8003596:	4313      	orrs	r3, r2
 8003598:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	045b      	lsls	r3, r3, #17
 80035a0:	4313      	orrs	r3, r2
 80035a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035a4:	f7ff f8f8 	bl	8002798 <HAL_GetTick>
 80035a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035aa:	04ad      	lsls	r5, r5, #18
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	422b      	tst	r3, r5
 80035b0:	d000      	beq.n	80035b4 <HAL_RCC_OscConfig+0x380>
 80035b2:	e673      	b.n	800329c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7ff f8f0 	bl	8002798 <HAL_GetTick>
 80035b8:	1b80      	subs	r0, r0, r6
 80035ba:	2802      	cmp	r0, #2
 80035bc:	d9f6      	bls.n	80035ac <HAL_RCC_OscConfig+0x378>
 80035be:	e69a      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7ff f8ea 	bl	8002798 <HAL_GetTick>
 80035c4:	1bc0      	subs	r0, r0, r7
 80035c6:	2802      	cmp	r0, #2
 80035c8:	d9d5      	bls.n	8003576 <HAL_RCC_OscConfig+0x342>
 80035ca:	e694      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80035cc:	f7ff f8e4 	bl	8002798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80035d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	04ad      	lsls	r5, r5, #18
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	422b      	tst	r3, r5
 80035da:	d100      	bne.n	80035de <HAL_RCC_OscConfig+0x3aa>
 80035dc:	e65e      	b.n	800329c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7ff f8db 	bl	8002798 <HAL_GetTick>
 80035e2:	1b80      	subs	r0, r0, r6
 80035e4:	2802      	cmp	r0, #2
 80035e6:	d9f6      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
 80035e8:	e685      	b.n	80032f6 <HAL_RCC_OscConfig+0xc2>
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	40021000 	.word	0x40021000
 80035f0:	feffffff 	.word	0xfeffffff
 80035f4:	ffc2ffff 	.word	0xffc2ffff

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035fa:	4c14      	ldr	r4, [pc, #80]	; (800364c <HAL_RCC_GetSysClockFreq+0x54>)
{
 80035fc:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035fe:	2210      	movs	r2, #16
 8003600:	0021      	movs	r1, r4
 8003602:	4668      	mov	r0, sp
 8003604:	f001 fd8a 	bl	800511c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003608:	0021      	movs	r1, r4
 800360a:	ad04      	add	r5, sp, #16
 800360c:	2210      	movs	r2, #16
 800360e:	3110      	adds	r1, #16
 8003610:	0028      	movs	r0, r5
 8003612:	f001 fd83 	bl	800511c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003616:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003618:	4e0d      	ldr	r6, [pc, #52]	; (8003650 <HAL_RCC_GetSysClockFreq+0x58>)
 800361a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800361c:	401a      	ands	r2, r3
 800361e:	2a08      	cmp	r2, #8
 8003620:	d111      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003622:	200f      	movs	r0, #15
 8003624:	466a      	mov	r2, sp
 8003626:	0c99      	lsrs	r1, r3, #18
 8003628:	4001      	ands	r1, r0
 800362a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800362c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800362e:	4002      	ands	r2, r0
 8003630:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003632:	03db      	lsls	r3, r3, #15
 8003634:	d505      	bpl.n	8003642 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003636:	4807      	ldr	r0, [pc, #28]	; (8003654 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003638:	f7fc fd7a 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800363c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800363e:	b008      	add	sp, #32
 8003640:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <HAL_RCC_GetSysClockFreq+0x60>)
 8003644:	e7fa      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8003648:	e7f9      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x46>
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	08005158 	.word	0x08005158
 8003650:	40021000 	.word	0x40021000
 8003654:	007a1200 	.word	0x007a1200
 8003658:	003d0900 	.word	0x003d0900

0800365c <HAL_RCC_ClockConfig>:
{
 800365c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800365e:	2201      	movs	r2, #1
 8003660:	4c43      	ldr	r4, [pc, #268]	; (8003770 <HAL_RCC_ClockConfig+0x114>)
{
 8003662:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003664:	6823      	ldr	r3, [r4, #0]
{
 8003666:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003668:	4013      	ands	r3, r2
 800366a:	428b      	cmp	r3, r1
 800366c:	d31c      	bcc.n	80036a8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366e:	6832      	ldr	r2, [r6, #0]
 8003670:	0793      	lsls	r3, r2, #30
 8003672:	d423      	bmi.n	80036bc <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003674:	07d3      	lsls	r3, r2, #31
 8003676:	d429      	bmi.n	80036cc <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003678:	2301      	movs	r3, #1
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	401a      	ands	r2, r3
 800367e:	4297      	cmp	r7, r2
 8003680:	d367      	bcc.n	8003752 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003682:	6833      	ldr	r3, [r6, #0]
 8003684:	4c3b      	ldr	r4, [pc, #236]	; (8003774 <HAL_RCC_ClockConfig+0x118>)
 8003686:	075b      	lsls	r3, r3, #29
 8003688:	d46a      	bmi.n	8003760 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800368a:	f7ff ffb5 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 800368e:	6863      	ldr	r3, [r4, #4]
 8003690:	4a39      	ldr	r2, [pc, #228]	; (8003778 <HAL_RCC_ClockConfig+0x11c>)
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	0f1b      	lsrs	r3, r3, #28
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	40d8      	lsrs	r0, r3
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_RCC_ClockConfig+0x120>)
 800369c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800369e:	2000      	movs	r0, #0
 80036a0:	f7ff f850 	bl	8002744 <HAL_InitTick>
  return HAL_OK;
 80036a4:	2000      	movs	r0, #0
 80036a6:	e008      	b.n	80036ba <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	4393      	bics	r3, r2
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	4013      	ands	r3, r2
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d0da      	beq.n	800366e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
}
 80036ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	20f0      	movs	r0, #240	; 0xf0
 80036be:	492d      	ldr	r1, [pc, #180]	; (8003774 <HAL_RCC_ClockConfig+0x118>)
 80036c0:	684b      	ldr	r3, [r1, #4]
 80036c2:	4383      	bics	r3, r0
 80036c4:	68b0      	ldr	r0, [r6, #8]
 80036c6:	4303      	orrs	r3, r0
 80036c8:	604b      	str	r3, [r1, #4]
 80036ca:	e7d3      	b.n	8003674 <HAL_RCC_ClockConfig+0x18>
 80036cc:	4d29      	ldr	r5, [pc, #164]	; (8003774 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	2a01      	cmp	r2, #1
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	039b      	lsls	r3, r3, #14
 80036d8:	d5ee      	bpl.n	80036b8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	2103      	movs	r1, #3
 80036dc:	686b      	ldr	r3, [r5, #4]
 80036de:	438b      	bics	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80036e4:	f7ff f858 	bl	8002798 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80036ea:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d115      	bne.n	800371c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f0:	220c      	movs	r2, #12
 80036f2:	686b      	ldr	r3, [r5, #4]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d0be      	beq.n	8003678 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fa:	f7ff f84d 	bl	8002798 <HAL_GetTick>
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	1ac0      	subs	r0, r0, r3
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_RCC_ClockConfig+0x124>)
 8003704:	4298      	cmp	r0, r3
 8003706:	d9f3      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8003708:	2003      	movs	r0, #3
 800370a:	e7d6      	b.n	80036ba <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370c:	2a02      	cmp	r2, #2
 800370e:	d102      	bne.n	8003716 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	d4e2      	bmi.n	80036da <HAL_RCC_ClockConfig+0x7e>
 8003714:	e7d0      	b.n	80036b8 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	079b      	lsls	r3, r3, #30
 8003718:	d4df      	bmi.n	80036da <HAL_RCC_ClockConfig+0x7e>
 800371a:	e7cd      	b.n	80036b8 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371c:	2b02      	cmp	r3, #2
 800371e:	d012      	beq.n	8003746 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003720:	220c      	movs	r2, #12
 8003722:	686b      	ldr	r3, [r5, #4]
 8003724:	4213      	tst	r3, r2
 8003726:	d0a7      	beq.n	8003678 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7ff f836 	bl	8002798 <HAL_GetTick>
 800372c:	9b01      	ldr	r3, [sp, #4]
 800372e:	1ac0      	subs	r0, r0, r3
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_RCC_ClockConfig+0x124>)
 8003732:	4298      	cmp	r0, r3
 8003734:	d9f4      	bls.n	8003720 <HAL_RCC_ClockConfig+0xc4>
 8003736:	e7e7      	b.n	8003708 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7ff f82e 	bl	8002798 <HAL_GetTick>
 800373c:	9b01      	ldr	r3, [sp, #4]
 800373e:	1ac0      	subs	r0, r0, r3
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_RCC_ClockConfig+0x124>)
 8003742:	4298      	cmp	r0, r3
 8003744:	d8e0      	bhi.n	8003708 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003746:	220c      	movs	r2, #12
 8003748:	686b      	ldr	r3, [r5, #4]
 800374a:	4013      	ands	r3, r2
 800374c:	2b08      	cmp	r3, #8
 800374e:	d1f3      	bne.n	8003738 <HAL_RCC_ClockConfig+0xdc>
 8003750:	e792      	b.n	8003678 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	439a      	bics	r2, r3
 8003756:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	421a      	tst	r2, r3
 800375c:	d1ac      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x5c>
 800375e:	e790      	b.n	8003682 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_RCC_ClockConfig+0x128>)
 8003764:	4013      	ands	r3, r2
 8003766:	68f2      	ldr	r2, [r6, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	6063      	str	r3, [r4, #4]
 800376c:	e78d      	b.n	800368a <HAL_RCC_ClockConfig+0x2e>
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	0800523c 	.word	0x0800523c
 800377c:	20000000 	.word	0x20000000
 8003780:	00001388 	.word	0x00001388
 8003784:	fffff8ff 	.word	0xfffff8ff

08003788 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003788:	4b01      	ldr	r3, [pc, #4]	; (8003790 <HAL_RCC_GetHCLKFreq+0x8>)
 800378a:	6818      	ldr	r0, [r3, #0]
}
 800378c:	4770      	bx	lr
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	055b      	lsls	r3, r3, #21
 800379c:	0f5b      	lsrs	r3, r3, #29
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	40d8      	lsrs	r0, r3
}    
 80037a6:	4770      	bx	lr
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800524c 	.word	0x0800524c
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b6:	6803      	ldr	r3, [r0, #0]
{
 80037b8:	b085      	sub	sp, #20
 80037ba:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037bc:	03db      	lsls	r3, r3, #15
 80037be:	d528      	bpl.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c4:	4c37      	ldr	r4, [pc, #220]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80037c6:	0552      	lsls	r2, r2, #21
 80037c8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037cc:	4213      	tst	r3, r2
 80037ce:	d108      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	69e3      	ldr	r3, [r4, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61e3      	str	r3, [r4, #28]
 80037d6:	69e3      	ldr	r3, [r4, #28]
 80037d8:	4013      	ands	r3, r2
 80037da:	9303      	str	r3, [sp, #12]
 80037dc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80037de:	2301      	movs	r3, #1
 80037e0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	2780      	movs	r7, #128	; 0x80
 80037e4:	4e30      	ldr	r6, [pc, #192]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80037e6:	007f      	lsls	r7, r7, #1
 80037e8:	6833      	ldr	r3, [r6, #0]
 80037ea:	423b      	tst	r3, r7
 80037ec:	d026      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ee:	22c0      	movs	r2, #192	; 0xc0
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	4e2d      	ldr	r6, [pc, #180]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037f8:	d132      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fa:	6a23      	ldr	r3, [r4, #32]
 80037fc:	401e      	ands	r6, r3
 80037fe:	686b      	ldr	r3, [r5, #4]
 8003800:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003802:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003804:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8003806:	2b01      	cmp	r3, #1
 8003808:	d103      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	69e3      	ldr	r3, [r4, #28]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800380e:	4013      	ands	r3, r2
 8003810:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003812:	682a      	ldr	r2, [r5, #0]
 8003814:	07d3      	lsls	r3, r2, #31
 8003816:	d506      	bpl.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003818:	2003      	movs	r0, #3
 800381a:	4922      	ldr	r1, [pc, #136]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800381c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800381e:	4383      	bics	r3, r0
 8003820:	68a8      	ldr	r0, [r5, #8]
 8003822:	4303      	orrs	r3, r0
 8003824:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003828:	0693      	lsls	r3, r2, #26
 800382a:	d517      	bpl.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382c:	2110      	movs	r1, #16
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003830:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003832:	438b      	bics	r3, r1
 8003834:	68e9      	ldr	r1, [r5, #12]
 8003836:	430b      	orrs	r3, r1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	e00f      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	433b      	orrs	r3, r7
 8003840:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003842:	f7fe ffa9 	bl	8002798 <HAL_GetTick>
 8003846:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	423b      	tst	r3, r7
 800384c:	d1cf      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe ffa3 	bl	8002798 <HAL_GetTick>
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	1ac0      	subs	r0, r0, r3
 8003856:	2864      	cmp	r0, #100	; 0x64
 8003858:	d9f6      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 800385a:	2003      	movs	r0, #3
}
 800385c:	b005      	add	sp, #20
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003860:	6869      	ldr	r1, [r5, #4]
 8003862:	400a      	ands	r2, r1
 8003864:	4293      	cmp	r3, r2
 8003866:	d0c8      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003868:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800386a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800386c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800386e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	4303      	orrs	r3, r0
 8003874:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003876:	6a23      	ldr	r3, [r4, #32]
 8003878:	480e      	ldr	r0, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800387a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800387c:	4003      	ands	r3, r0
 800387e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003880:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003882:	07d3      	lsls	r3, r2, #31
 8003884:	d5b9      	bpl.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8003886:	f7fe ff87 	bl	8002798 <HAL_GetTick>
 800388a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	2202      	movs	r2, #2
 800388e:	6a23      	ldr	r3, [r4, #32]
 8003890:	4213      	tst	r3, r2
 8003892:	d1b2      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fe ff80 	bl	8002798 <HAL_GetTick>
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800389a:	1bc0      	subs	r0, r0, r7
 800389c:	4298      	cmp	r0, r3
 800389e:	d9f5      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80038a0:	e7db      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	fffffcff 	.word	0xfffffcff
 80038b0:	efffffff 	.word	0xefffffff
 80038b4:	fffeffff 	.word	0xfffeffff
 80038b8:	00001388 	.word	0x00001388

080038bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038bc:	2201      	movs	r2, #1
 80038be:	6a03      	ldr	r3, [r0, #32]
{
 80038c0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	4393      	bics	r3, r2
 80038c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ca:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038cc:	3272      	adds	r2, #114	; 0x72
 80038ce:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d0:	680a      	ldr	r2, [r1, #0]
 80038d2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d4:	2202      	movs	r2, #2
 80038d6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d8:	688a      	ldr	r2, [r1, #8]
 80038da:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC1_SetConfig+0x74>)
 80038de:	4290      	cmp	r0, r2
 80038e0:	d008      	beq.n	80038f4 <TIM_OC1_SetConfig+0x38>
 80038e2:	4e14      	ldr	r6, [pc, #80]	; (8003934 <TIM_OC1_SetConfig+0x78>)
 80038e4:	42b0      	cmp	r0, r6
 80038e6:	d005      	beq.n	80038f4 <TIM_OC1_SetConfig+0x38>
 80038e8:	4e13      	ldr	r6, [pc, #76]	; (8003938 <TIM_OC1_SetConfig+0x7c>)
 80038ea:	42b0      	cmp	r0, r6
 80038ec:	d002      	beq.n	80038f4 <TIM_OC1_SetConfig+0x38>
 80038ee:	4e13      	ldr	r6, [pc, #76]	; (800393c <TIM_OC1_SetConfig+0x80>)
 80038f0:	42b0      	cmp	r0, r6
 80038f2:	d116      	bne.n	8003922 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f4:	2608      	movs	r6, #8
 80038f6:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f8:	68ce      	ldr	r6, [r1, #12]
 80038fa:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fc:	2604      	movs	r6, #4
 80038fe:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	4290      	cmp	r0, r2
 8003902:	d008      	beq.n	8003916 <TIM_OC1_SetConfig+0x5a>
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <TIM_OC1_SetConfig+0x78>)
 8003906:	4290      	cmp	r0, r2
 8003908:	d005      	beq.n	8003916 <TIM_OC1_SetConfig+0x5a>
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <TIM_OC1_SetConfig+0x7c>)
 800390c:	4290      	cmp	r0, r2
 800390e:	d002      	beq.n	8003916 <TIM_OC1_SetConfig+0x5a>
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <TIM_OC1_SetConfig+0x80>)
 8003912:	4290      	cmp	r0, r2
 8003914:	d105      	bne.n	8003922 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003918:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800391a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800391c:	694c      	ldr	r4, [r1, #20]
 800391e:	4334      	orrs	r4, r6
 8003920:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003924:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003926:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003928:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	6203      	str	r3, [r0, #32]
}
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800
 8003940:	fffffcff 	.word	0xfffffcff

08003944 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003946:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003948:	6a03      	ldr	r3, [r0, #32]
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <TIM_OC3_SetConfig+0x64>)
 800394c:	4013      	ands	r3, r2
 800394e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003950:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003952:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003954:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003956:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	680d      	ldr	r5, [r1, #0]
 800395a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395c:	4d13      	ldr	r5, [pc, #76]	; (80039ac <TIM_OC3_SetConfig+0x68>)
 800395e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003960:	688d      	ldr	r5, [r1, #8]
 8003962:	022d      	lsls	r5, r5, #8
 8003964:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003966:	4d12      	ldr	r5, [pc, #72]	; (80039b0 <TIM_OC3_SetConfig+0x6c>)
 8003968:	42a8      	cmp	r0, r5
 800396a:	d10e      	bne.n	800398a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800396c:	4d11      	ldr	r5, [pc, #68]	; (80039b4 <TIM_OC3_SetConfig+0x70>)
 800396e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003970:	68cb      	ldr	r3, [r1, #12]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003976:	4d10      	ldr	r5, [pc, #64]	; (80039b8 <TIM_OC3_SetConfig+0x74>)
 8003978:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	4d10      	ldr	r5, [pc, #64]	; (80039bc <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003980:	698a      	ldr	r2, [r1, #24]
 8003982:	4332      	orrs	r2, r6
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	432a      	orrs	r2, r5
 8003988:	e008      	b.n	800399c <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	4d0d      	ldr	r5, [pc, #52]	; (80039c0 <TIM_OC3_SetConfig+0x7c>)
 800398c:	42a8      	cmp	r0, r5
 800398e:	d0f4      	beq.n	800397a <TIM_OC3_SetConfig+0x36>
 8003990:	4d0c      	ldr	r5, [pc, #48]	; (80039c4 <TIM_OC3_SetConfig+0x80>)
 8003992:	42a8      	cmp	r0, r5
 8003994:	d0f1      	beq.n	800397a <TIM_OC3_SetConfig+0x36>
 8003996:	4d0c      	ldr	r5, [pc, #48]	; (80039c8 <TIM_OC3_SetConfig+0x84>)
 8003998:	42a8      	cmp	r0, r5
 800399a:	d0ee      	beq.n	800397a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80039a2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a4:	6203      	str	r3, [r0, #32]
}
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	fffffeff 	.word	0xfffffeff
 80039ac:	fffffdff 	.word	0xfffffdff
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	fffff7ff 	.word	0xfffff7ff
 80039b8:	fffffbff 	.word	0xfffffbff
 80039bc:	ffffcfff 	.word	0xffffcfff
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039cc:	6a03      	ldr	r3, [r0, #32]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC4_SetConfig+0x54>)
{
 80039d0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d2:	4013      	ands	r3, r2
 80039d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d8:	4c12      	ldr	r4, [pc, #72]	; (8003a24 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80039da:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80039dc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039de:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	680c      	ldr	r4, [r1, #0]
 80039e2:	0224      	lsls	r4, r4, #8
 80039e4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e6:	4c10      	ldr	r4, [pc, #64]	; (8003a28 <TIM_OC4_SetConfig+0x5c>)
 80039e8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ea:	688c      	ldr	r4, [r1, #8]
 80039ec:	0324      	lsls	r4, r4, #12
 80039ee:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	4c0e      	ldr	r4, [pc, #56]	; (8003a2c <TIM_OC4_SetConfig+0x60>)
 80039f2:	42a0      	cmp	r0, r4
 80039f4:	d008      	beq.n	8003a08 <TIM_OC4_SetConfig+0x3c>
 80039f6:	4c0e      	ldr	r4, [pc, #56]	; (8003a30 <TIM_OC4_SetConfig+0x64>)
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d005      	beq.n	8003a08 <TIM_OC4_SetConfig+0x3c>
 80039fc:	4c0d      	ldr	r4, [pc, #52]	; (8003a34 <TIM_OC4_SetConfig+0x68>)
 80039fe:	42a0      	cmp	r0, r4
 8003a00:	d002      	beq.n	8003a08 <TIM_OC4_SetConfig+0x3c>
 8003a02:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <TIM_OC4_SetConfig+0x6c>)
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d104      	bne.n	8003a12 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a08:	4c0c      	ldr	r4, [pc, #48]	; (8003a3c <TIM_OC4_SetConfig+0x70>)
 8003a0a:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a0c:	694c      	ldr	r4, [r1, #20]
 8003a0e:	01a4      	lsls	r4, r4, #6
 8003a10:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a12:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a14:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003a16:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003a18:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	6202      	str	r2, [r0, #32]
}
 8003a1c:	bd30      	pop	{r4, r5, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	ffffefff 	.word	0xffffefff
 8003a24:	ffff8cff 	.word	0xffff8cff
 8003a28:	ffffdfff 	.word	0xffffdfff
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800
 8003a3c:	ffffbfff 	.word	0xffffbfff

08003a40 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <TIM_Base_SetConfig+0x74>)
{
 8003a42:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003a44:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a46:	4290      	cmp	r0, r2
 8003a48:	d002      	beq.n	8003a50 <TIM_Base_SetConfig+0x10>
 8003a4a:	4c1b      	ldr	r4, [pc, #108]	; (8003ab8 <TIM_Base_SetConfig+0x78>)
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	2470      	movs	r4, #112	; 0x70
 8003a52:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003a54:	684c      	ldr	r4, [r1, #4]
 8003a56:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a58:	4290      	cmp	r0, r2
 8003a5a:	d00e      	beq.n	8003a7a <TIM_Base_SetConfig+0x3a>
 8003a5c:	4c16      	ldr	r4, [pc, #88]	; (8003ab8 <TIM_Base_SetConfig+0x78>)
 8003a5e:	42a0      	cmp	r0, r4
 8003a60:	d00b      	beq.n	8003a7a <TIM_Base_SetConfig+0x3a>
 8003a62:	4c16      	ldr	r4, [pc, #88]	; (8003abc <TIM_Base_SetConfig+0x7c>)
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d008      	beq.n	8003a7a <TIM_Base_SetConfig+0x3a>
 8003a68:	4c15      	ldr	r4, [pc, #84]	; (8003ac0 <TIM_Base_SetConfig+0x80>)
 8003a6a:	42a0      	cmp	r0, r4
 8003a6c:	d005      	beq.n	8003a7a <TIM_Base_SetConfig+0x3a>
 8003a6e:	4c15      	ldr	r4, [pc, #84]	; (8003ac4 <TIM_Base_SetConfig+0x84>)
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d002      	beq.n	8003a7a <TIM_Base_SetConfig+0x3a>
 8003a74:	4c14      	ldr	r4, [pc, #80]	; (8003ac8 <TIM_Base_SetConfig+0x88>)
 8003a76:	42a0      	cmp	r0, r4
 8003a78:	d103      	bne.n	8003a82 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	4c14      	ldr	r4, [pc, #80]	; (8003acc <TIM_Base_SetConfig+0x8c>)
 8003a7c:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7e:	68cc      	ldr	r4, [r1, #12]
 8003a80:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a82:	2480      	movs	r4, #128	; 0x80
 8003a84:	43a3      	bics	r3, r4
 8003a86:	694c      	ldr	r4, [r1, #20]
 8003a88:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8003a8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	688b      	ldr	r3, [r1, #8]
 8003a8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a94:	4290      	cmp	r0, r2
 8003a96:	d008      	beq.n	8003aaa <TIM_Base_SetConfig+0x6a>
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <TIM_Base_SetConfig+0x80>)
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	d005      	beq.n	8003aaa <TIM_Base_SetConfig+0x6a>
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <TIM_Base_SetConfig+0x84>)
 8003aa0:	4298      	cmp	r0, r3
 8003aa2:	d002      	beq.n	8003aaa <TIM_Base_SetConfig+0x6a>
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <TIM_Base_SetConfig+0x88>)
 8003aa6:	4298      	cmp	r0, r3
 8003aa8:	d101      	bne.n	8003aae <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	6143      	str	r3, [r0, #20]
}
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40002000 	.word	0x40002000
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800
 8003acc:	fffffcff 	.word	0xfffffcff

08003ad0 <HAL_TIM_OC_Init>:
{
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ad4:	2001      	movs	r0, #1
  if(htim == NULL)
 8003ad6:	2c00      	cmp	r4, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_TIM_OC_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003ada:	0025      	movs	r5, r4
 8003adc:	353d      	adds	r5, #61	; 0x3d
 8003ade:	782b      	ldrb	r3, [r5, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	0022      	movs	r2, r4
 8003ae8:	323c      	adds	r2, #60	; 0x3c
 8003aea:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8003aec:	0020      	movs	r0, r4
 8003aee:	f001 f90f 	bl	8004d10 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003af2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003af4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003af6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003af8:	1d21      	adds	r1, r4, #4
 8003afa:	f7ff ffa1 	bl	8003a40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003afe:	2301      	movs	r3, #1
  return HAL_OK;
 8003b00:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003b02:	702b      	strb	r3, [r5, #0]
}
 8003b04:	bd70      	pop	{r4, r5, r6, pc}

08003b06 <HAL_TIM_PWM_Init>:
{
 8003b06:	b570      	push	{r4, r5, r6, lr}
 8003b08:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
  if(htim == NULL)
 8003b0c:	2c00      	cmp	r4, #0
 8003b0e:	d014      	beq.n	8003b3a <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003b10:	0025      	movs	r5, r4
 8003b12:	353d      	adds	r5, #61	; 0x3d
 8003b14:	782b      	ldrb	r3, [r5, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003b1c:	0022      	movs	r2, r4
 8003b1e:	323c      	adds	r2, #60	; 0x3c
 8003b20:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003b22:	0020      	movs	r0, r4
 8003b24:	f001 f8d0 	bl	8004cc8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003b28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003b2c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2e:	1d21      	adds	r1, r4, #4
 8003b30:	f7ff ff86 	bl	8003a40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003b34:	2301      	movs	r3, #1
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003b38:	702b      	strb	r3, [r5, #0]
}
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}

08003b3c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	6a03      	ldr	r3, [r0, #32]
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	4393      	bics	r3, r2
 8003b44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003b46:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b48:	4d16      	ldr	r5, [pc, #88]	; (8003ba4 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003b4a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b4c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b4e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	680d      	ldr	r5, [r1, #0]
 8003b52:	022d      	lsls	r5, r5, #8
 8003b54:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8003b56:	2520      	movs	r5, #32
 8003b58:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b5a:	688d      	ldr	r5, [r1, #8]
 8003b5c:	012d      	lsls	r5, r5, #4
 8003b5e:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b60:	4d11      	ldr	r5, [pc, #68]	; (8003ba8 <TIM_OC2_SetConfig+0x6c>)
 8003b62:	42a8      	cmp	r0, r5
 8003b64:	d10f      	bne.n	8003b86 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b66:	2580      	movs	r5, #128	; 0x80
 8003b68:	43aa      	bics	r2, r5
 8003b6a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b6c:	68ca      	ldr	r2, [r1, #12]
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b72:	2540      	movs	r5, #64	; 0x40
 8003b74:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b76:	4d0d      	ldr	r5, [pc, #52]	; (8003bac <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b78:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b7c:	698b      	ldr	r3, [r1, #24]
 8003b7e:	4333      	orrs	r3, r6
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	432b      	orrs	r3, r5
 8003b84:	e008      	b.n	8003b98 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	4d0a      	ldr	r5, [pc, #40]	; (8003bb0 <TIM_OC2_SetConfig+0x74>)
 8003b88:	42a8      	cmp	r0, r5
 8003b8a:	d0f4      	beq.n	8003b76 <TIM_OC2_SetConfig+0x3a>
 8003b8c:	4d09      	ldr	r5, [pc, #36]	; (8003bb4 <TIM_OC2_SetConfig+0x78>)
 8003b8e:	42a8      	cmp	r0, r5
 8003b90:	d0f1      	beq.n	8003b76 <TIM_OC2_SetConfig+0x3a>
 8003b92:	4d09      	ldr	r5, [pc, #36]	; (8003bb8 <TIM_OC2_SetConfig+0x7c>)
 8003b94:	42a8      	cmp	r0, r5
 8003b96:	d0ee      	beq.n	8003b76 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003b98:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ba0:	6202      	str	r2, [r0, #32]
}
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	ffff8cff 	.word	0xffff8cff
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	fffff3ff 	.word	0xfffff3ff
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800

08003bbc <HAL_TIM_OC_ConfigChannel>:
{
 8003bbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003bbe:	0004      	movs	r4, r0
 8003bc0:	2602      	movs	r6, #2
 8003bc2:	343c      	adds	r4, #60	; 0x3c
 8003bc4:	7825      	ldrb	r5, [r4, #0]
{
 8003bc6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003bc8:	0030      	movs	r0, r6
 8003bca:	2d01      	cmp	r5, #1
 8003bcc:	d017      	beq.n	8003bfe <HAL_TIM_OC_ConfigChannel+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bce:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8003bd0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8003bd4:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd6:	702e      	strb	r6, [r5, #0]
  switch (Channel)
 8003bd8:	2a0c      	cmp	r2, #12
 8003bda:	d80c      	bhi.n	8003bf6 <HAL_TIM_OC_ConfigChannel+0x3a>
 8003bdc:	0010      	movs	r0, r2
 8003bde:	f7fc fa9d 	bl	800011c <__gnu_thumb1_case_uqi>
 8003be2:	0a07      	.short	0x0a07
 8003be4:	0a0f0a0a 	.word	0x0a0f0a0a
 8003be8:	0a130a0a 	.word	0x0a130a0a
 8003bec:	0a0a      	.short	0x0a0a
 8003bee:	17          	.byte	0x17
 8003bef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f7ff fe63 	bl	80038bc <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003bf6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003bf8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003bfc:	7020      	strb	r0, [r4, #0]
}
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f7ff ff9b 	bl	8003b3c <TIM_OC2_SetConfig>
    break;
 8003c06:	e7f6      	b.n	8003bf6 <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	f7ff fe9b 	bl	8003944 <TIM_OC3_SetConfig>
    break;
 8003c0e:	e7f2      	b.n	8003bf6 <HAL_TIM_OC_ConfigChannel+0x3a>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f7ff fedb 	bl	80039cc <TIM_OC4_SetConfig>
    break;
 8003c16:	e7ee      	b.n	8003bf6 <HAL_TIM_OC_ConfigChannel+0x3a>

08003c18 <HAL_TIM_PWM_ConfigChannel>:
{
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003c1a:	0006      	movs	r6, r0
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	363c      	adds	r6, #60	; 0x3c
{
 8003c20:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003c22:	7831      	ldrb	r1, [r6, #0]
{
 8003c24:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003c26:	0018      	movs	r0, r3
 8003c28:	2901      	cmp	r1, #1
 8003c2a:	d025      	beq.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8003c2e:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8003c32:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8003c36:	2a0c      	cmp	r2, #12
 8003c38:	d81a      	bhi.n	8003c70 <HAL_TIM_PWM_ConfigChannel+0x58>
 8003c3a:	0010      	movs	r0, r2
 8003c3c:	f7fc fa6e 	bl	800011c <__gnu_thumb1_case_uqi>
 8003c40:	18181807 	.word	0x18181807
 8003c44:	1818181d 	.word	0x1818181d
 8003c48:	1818182f 	.word	0x1818182f
 8003c4c:	41          	.byte	0x41
 8003c4d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c4e:	0029      	movs	r1, r5
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	f7ff fe33 	bl	80038bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c56:	2208      	movs	r2, #8
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	6999      	ldr	r1, [r3, #24]
 8003c5c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c5e:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	438a      	bics	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003c72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8003c76:	7030      	strb	r0, [r6, #0]
}
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c7a:	0029      	movs	r1, r5
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	f7ff ff5d 	bl	8003b3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	4915      	ldr	r1, [pc, #84]	; (8003ce8 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c96:	692a      	ldr	r2, [r5, #16]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	0212      	lsls	r2, r2, #8
 8003c9c:	e7e6      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	0029      	movs	r1, r5
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	f7ff fe4f 	bl	8003944 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cae:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]
    break;
 8003cc0:	e7d6      	b.n	8003c70 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc2:	0029      	movs	r1, r5
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	f7ff fe81 	bl	80039cc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	69d9      	ldr	r1, [r3, #28]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cde:	692a      	ldr	r2, [r5, #16]
 8003ce0:	69d9      	ldr	r1, [r3, #28]
 8003ce2:	0212      	lsls	r2, r2, #8
 8003ce4:	e7ea      	b.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	fffffbff 	.word	0xfffffbff

08003cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cec:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003cee:	2401      	movs	r4, #1
 8003cf0:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003cf2:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003cf4:	6a03      	ldr	r3, [r0, #32]
 8003cf6:	43a3      	bics	r3, r4
 8003cf8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003cfa:	6a03      	ldr	r3, [r0, #32]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	6202      	str	r2, [r0, #32]
}
 8003d00:	bd10      	pop	{r4, pc}
	...

08003d04 <HAL_TIM_PWM_Start>:
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d08:	2201      	movs	r2, #1
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	f7ff ffee 	bl	8003cec <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_TIM_PWM_Start+0x3c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d008      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x26>
 8003d18:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <HAL_TIM_PWM_Start+0x40>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d005      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x26>
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_TIM_PWM_Start+0x44>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d002      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x26>
 8003d24:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_TIM_PWM_Start+0x48>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d104      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d2e:	0212      	lsls	r2, r2, #8
 8003d30:	430a      	orrs	r2, r1
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003d34:	2201      	movs	r2, #1
 8003d36:	6819      	ldr	r1, [r3, #0]
}
 8003d38:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40014400 	.word	0x40014400
 8003d4c:	40014800 	.word	0x40014800

08003d50 <HAL_TIM_OC_Start>:
 8003d50:	b510      	push	{r4, lr}
 8003d52:	f7ff ffd7 	bl	8003d04 <HAL_TIM_PWM_Start>
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <HAL_TIM_PWM_Start_IT>:
{
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	0004      	movs	r4, r0
  switch (Channel)
 8003d5c:	290c      	cmp	r1, #12
 8003d5e:	d80e      	bhi.n	8003d7e <HAL_TIM_PWM_Start_IT+0x26>
 8003d60:	0008      	movs	r0, r1
 8003d62:	f7fc f9db 	bl	800011c <__gnu_thumb1_case_uqi>
 8003d66:	0c07      	.short	0x0c07
 8003d68:	0c280c0c 	.word	0x0c280c0c
 8003d6c:	0c2c0c0c 	.word	0x0c2c0c0c
 8003d70:	0c0c      	.short	0x0c0c
 8003d72:	30          	.byte	0x30
 8003d73:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d74:	2302      	movs	r3, #2
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d7e:	2201      	movs	r2, #1
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	f7ff ffb3 	bl	8003cec <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <HAL_TIM_PWM_Start_IT+0x78>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d008      	beq.n	8003da0 <HAL_TIM_PWM_Start_IT+0x48>
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_TIM_PWM_Start_IT+0x7c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d005      	beq.n	8003da0 <HAL_TIM_PWM_Start_IT+0x48>
 8003d94:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <HAL_TIM_PWM_Start_IT+0x80>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d002      	beq.n	8003da0 <HAL_TIM_PWM_Start_IT+0x48>
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_TIM_PWM_Start_IT+0x84>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_PWM_Start_IT+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003da4:	0212      	lsls	r2, r2, #8
 8003da6:	430a      	orrs	r2, r1
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003daa:	2201      	movs	r2, #1
 8003dac:	6819      	ldr	r1, [r3, #0]
}
 8003dae:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	2304      	movs	r3, #4
 8003dba:	68d0      	ldr	r0, [r2, #12]
 8003dbc:	e7dd      	b.n	8003d7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	68d0      	ldr	r0, [r2, #12]
 8003dc4:	e7d9      	b.n	8003d7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	2310      	movs	r3, #16
 8003dca:	68d0      	ldr	r0, [r2, #12]
 8003dcc:	e7d5      	b.n	8003d7a <HAL_TIM_PWM_Start_IT+0x22>
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003de0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003de2:	0004      	movs	r4, r0
 8003de4:	343c      	adds	r4, #60	; 0x3c
 8003de6:	7822      	ldrb	r2, [r4, #0]
{
 8003de8:	0003      	movs	r3, r0
 8003dea:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003dec:	2a01      	cmp	r2, #1
 8003dee:	d017      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003df2:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	353d      	adds	r5, #61	; 0x3d
 8003df6:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	306e      	adds	r0, #110	; 0x6e
 8003dfc:	4382      	bics	r2, r0
 8003dfe:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003e04:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003e06:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003e08:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	4382      	bics	r2, r0
 8003e10:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003e12:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003e14:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003e1e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003e20:	bd30      	pop	{r4, r5, pc}
	...

08003e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e24:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e26:	0004      	movs	r4, r0
 8003e28:	343c      	adds	r4, #60	; 0x3c
 8003e2a:	7823      	ldrb	r3, [r4, #0]
{
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d024      	beq.n	8003e7e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	0015      	movs	r5, r2
 8003e36:	353d      	adds	r5, #61	; 0x3d
 8003e38:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003e3c:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e3e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e40:	4003      	ands	r3, r0
 8003e42:	6888      	ldr	r0, [r1, #8]
 8003e44:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e46:	480f      	ldr	r0, [pc, #60]	; (8003e84 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003e48:	4003      	ands	r3, r0
 8003e4a:	6848      	ldr	r0, [r1, #4]
 8003e4c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e4e:	480e      	ldr	r0, [pc, #56]	; (8003e88 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8003e50:	4003      	ands	r3, r0
 8003e52:	6808      	ldr	r0, [r1, #0]
 8003e54:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e56:	480d      	ldr	r0, [pc, #52]	; (8003e8c <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8003e58:	4003      	ands	r3, r0
 8003e5a:	6908      	ldr	r0, [r1, #16]
 8003e5c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e5e:	480c      	ldr	r0, [pc, #48]	; (8003e90 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8003e60:	4003      	ands	r3, r0
 8003e62:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e64:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e68:	480a      	ldr	r0, [pc, #40]	; (8003e94 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8003e6a:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e6c:	480a      	ldr	r0, [pc, #40]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e6e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e70:	4003      	ands	r3, r0
 8003e72:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003e76:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003e7c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003e7e:	bd30      	pop	{r4, r5, pc}
 8003e80:	fffffcff 	.word	0xfffffcff
 8003e84:	fffffbff 	.word	0xfffffbff
 8003e88:	fffff7ff 	.word	0xfffff7ff
 8003e8c:	ffffefff 	.word	0xffffefff
 8003e90:	ffffdfff 	.word	0xffffdfff
 8003e94:	ffffbfff 	.word	0xffffbfff
 8003e98:	ffff7fff 	.word	0xffff7fff

08003e9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9c:	6803      	ldr	r3, [r0, #0]
 8003e9e:	4906      	ldr	r1, [pc, #24]	; (8003eb8 <UART_EndRxTransfer+0x1c>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	3123      	adds	r1, #35	; 0x23
 8003eac:	31ff      	adds	r1, #255	; 0xff
 8003eae:	438a      	bics	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	7003      	strb	r3, [r0, #0]
}
 8003eb6:	4770      	bx	lr
 8003eb8:	fffffedf 	.word	0xfffffedf

08003ebc <HAL_UART_TxCpltCallback>:
 8003ebc:	4770      	bx	lr

08003ebe <HAL_UART_RxCpltCallback>:
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_ErrorCallback>:
 8003ec0:	4770      	bx	lr

08003ec2 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003ec2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	0002      	movs	r2, r0
{
 8003ec8:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003eca:	325a      	adds	r2, #90	; 0x5a
 8003ecc:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003ece:	3a08      	subs	r2, #8
 8003ed0:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003ed2:	f7ff fff5 	bl	8003ec0 <HAL_UART_ErrorCallback>
}
 8003ed6:	bd10      	pop	{r4, pc}

08003ed8 <UART_SetConfig>:
{
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003edc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ede:	69c2      	ldr	r2, [r0, #28]
 8003ee0:	6883      	ldr	r3, [r0, #8]
 8003ee2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ee4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee6:	4303      	orrs	r3, r0
 8003ee8:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eea:	4e3f      	ldr	r6, [pc, #252]	; (8003fe8 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eec:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003eee:	483f      	ldr	r0, [pc, #252]	; (8003fec <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ef0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ef2:	4001      	ands	r1, r0
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	686b      	ldr	r3, [r5, #4]
 8003efa:	493d      	ldr	r1, [pc, #244]	; (8003ff0 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003efc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efe:	400b      	ands	r3, r1
 8003f00:	68e1      	ldr	r1, [r4, #12]
 8003f02:	430b      	orrs	r3, r1
 8003f04:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f06:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003f08:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f0a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003f0c:	4839      	ldr	r0, [pc, #228]	; (8003ff4 <UART_SetConfig+0x11c>)
 8003f0e:	4001      	ands	r1, r0
 8003f10:	430b      	orrs	r3, r1
 8003f12:	60ab      	str	r3, [r5, #8]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f18:	42b5      	cmp	r5, r6
 8003f1a:	d110      	bne.n	8003f3e <UART_SetConfig+0x66>
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <UART_SetConfig+0x120>)
 8003f20:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8003f22:	4001      	ands	r1, r0
 8003f24:	4835      	ldr	r0, [pc, #212]	; (8003ffc <UART_SetConfig+0x124>)
 8003f26:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d013      	beq.n	8003f54 <UART_SetConfig+0x7c>
    switch (clocksource)
 8003f2c:	2808      	cmp	r0, #8
 8003f2e:	d858      	bhi.n	8003fe2 <UART_SetConfig+0x10a>
 8003f30:	f7fc f8f4 	bl	800011c <__gnu_thumb1_case_uqi>
 8003f34:	57425737 	.word	0x57425737
 8003f38:	5757574b 	.word	0x5757574b
 8003f3c:	50          	.byte	0x50
 8003f3d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3e:	4930      	ldr	r1, [pc, #192]	; (8004000 <UART_SetConfig+0x128>)
 8003f40:	428d      	cmp	r5, r1
 8003f42:	d14c      	bne.n	8003fde <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d12c      	bne.n	8003fa2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f48:	f7ff fc24 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	0040      	lsls	r0, r0, #1
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x94>
    switch (clocksource)
 8003f54:	2808      	cmp	r0, #8
 8003f56:	d821      	bhi.n	8003f9c <UART_SetConfig+0xc4>
 8003f58:	f7fc f8d6 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003f5c:	200520f6 	.word	0x200520f6
 8003f60:	20202018 	.word	0x20202018
 8003f64:	1b          	.byte	0x1b
 8003f65:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	0858      	lsrs	r0, r3, #1
 8003f6a:	4b26      	ldr	r3, [pc, #152]	; (8004004 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f6c:	18c0      	adds	r0, r0, r3
 8003f6e:	6861      	ldr	r1, [r4, #4]
 8003f70:	f7fc f8de 	bl	8000130 <__udivsi3>
 8003f74:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f76:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003f78:	220f      	movs	r2, #15
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	4391      	bics	r1, r2
 8003f7e:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8003f82:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f84:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
}
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f8c:	f7ff fb34 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8003f90:	e7dc      	b.n	8003f4c <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f92:	6863      	ldr	r3, [r4, #4]
 8003f94:	0858      	lsrs	r0, r3, #1
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	025b      	lsls	r3, r3, #9
 8003f9a:	e7e7      	b.n	8003f6c <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e7ea      	b.n	8003f78 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003fa2:	f7ff fbf7 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8003fa6:	6861      	ldr	r1, [r4, #4]
 8003fa8:	084b      	lsrs	r3, r1, #1
 8003faa:	1818      	adds	r0, r3, r0
 8003fac:	f7fc f8c0 	bl	8000130 <__udivsi3>
 8003fb0:	b280      	uxth	r0, r0
 8003fb2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb4:	2000      	movs	r0, #0
        break;
 8003fb6:	e7e8      	b.n	8003f8a <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003fb8:	6861      	ldr	r1, [r4, #4]
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <UART_SetConfig+0x130>)
 8003fbc:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fbe:	18c0      	adds	r0, r0, r3
 8003fc0:	f7fc f8b6 	bl	8000130 <__udivsi3>
 8003fc4:	b280      	uxth	r0, r0
 8003fc6:	60f0      	str	r0, [r6, #12]
 8003fc8:	e7f4      	b.n	8003fb4 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003fca:	f7ff fb15 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8003fce:	6861      	ldr	r1, [r4, #4]
 8003fd0:	084b      	lsrs	r3, r1, #1
 8003fd2:	e7f4      	b.n	8003fbe <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	6861      	ldr	r1, [r4, #4]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	0848      	lsrs	r0, r1, #1
 8003fdc:	e7ef      	b.n	8003fbe <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d0dc      	beq.n	8003f9c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8003fe2:	2001      	movs	r0, #1
  return ret;
 8003fe4:	e7d1      	b.n	8003f8a <UART_SetConfig+0xb2>
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	ffff69f3 	.word	0xffff69f3
 8003ff0:	ffffcfff 	.word	0xffffcfff
 8003ff4:	fffff4ff 	.word	0xfffff4ff
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08005238 	.word	0x08005238
 8004000:	40004400 	.word	0x40004400
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200

0800400c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800400e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004010:	07da      	lsls	r2, r3, #31
 8004012:	d506      	bpl.n	8004022 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004014:	6801      	ldr	r1, [r0, #0]
 8004016:	4c28      	ldr	r4, [pc, #160]	; (80040b8 <UART_AdvFeatureConfig+0xac>)
 8004018:	684a      	ldr	r2, [r1, #4]
 800401a:	4022      	ands	r2, r4
 800401c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800401e:	4322      	orrs	r2, r4
 8004020:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004022:	079a      	lsls	r2, r3, #30
 8004024:	d506      	bpl.n	8004034 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004026:	6801      	ldr	r1, [r0, #0]
 8004028:	4c24      	ldr	r4, [pc, #144]	; (80040bc <UART_AdvFeatureConfig+0xb0>)
 800402a:	684a      	ldr	r2, [r1, #4]
 800402c:	4022      	ands	r2, r4
 800402e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004030:	4322      	orrs	r2, r4
 8004032:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004034:	075a      	lsls	r2, r3, #29
 8004036:	d506      	bpl.n	8004046 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004038:	6801      	ldr	r1, [r0, #0]
 800403a:	4c21      	ldr	r4, [pc, #132]	; (80040c0 <UART_AdvFeatureConfig+0xb4>)
 800403c:	684a      	ldr	r2, [r1, #4]
 800403e:	4022      	ands	r2, r4
 8004040:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004042:	4322      	orrs	r2, r4
 8004044:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004046:	071a      	lsls	r2, r3, #28
 8004048:	d506      	bpl.n	8004058 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800404a:	6801      	ldr	r1, [r0, #0]
 800404c:	4c1d      	ldr	r4, [pc, #116]	; (80040c4 <UART_AdvFeatureConfig+0xb8>)
 800404e:	684a      	ldr	r2, [r1, #4]
 8004050:	4022      	ands	r2, r4
 8004052:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004054:	4322      	orrs	r2, r4
 8004056:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004058:	06da      	lsls	r2, r3, #27
 800405a:	d506      	bpl.n	800406a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800405c:	6801      	ldr	r1, [r0, #0]
 800405e:	4c1a      	ldr	r4, [pc, #104]	; (80040c8 <UART_AdvFeatureConfig+0xbc>)
 8004060:	688a      	ldr	r2, [r1, #8]
 8004062:	4022      	ands	r2, r4
 8004064:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004066:	4322      	orrs	r2, r4
 8004068:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800406a:	069a      	lsls	r2, r3, #26
 800406c:	d506      	bpl.n	800407c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800406e:	6801      	ldr	r1, [r0, #0]
 8004070:	4c16      	ldr	r4, [pc, #88]	; (80040cc <UART_AdvFeatureConfig+0xc0>)
 8004072:	688a      	ldr	r2, [r1, #8]
 8004074:	4022      	ands	r2, r4
 8004076:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004078:	4322      	orrs	r2, r4
 800407a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800407c:	065a      	lsls	r2, r3, #25
 800407e:	d510      	bpl.n	80040a2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	6801      	ldr	r1, [r0, #0]
 8004082:	4d13      	ldr	r5, [pc, #76]	; (80040d0 <UART_AdvFeatureConfig+0xc4>)
 8004084:	684a      	ldr	r2, [r1, #4]
 8004086:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004088:	402a      	ands	r2, r5
 800408a:	4322      	orrs	r2, r4
 800408c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	0352      	lsls	r2, r2, #13
 8004092:	4294      	cmp	r4, r2
 8004094:	d105      	bne.n	80040a2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004096:	684a      	ldr	r2, [r1, #4]
 8004098:	4c0e      	ldr	r4, [pc, #56]	; (80040d4 <UART_AdvFeatureConfig+0xc8>)
 800409a:	4022      	ands	r2, r4
 800409c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800409e:	4322      	orrs	r2, r4
 80040a0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	d506      	bpl.n	80040b4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a6:	6802      	ldr	r2, [r0, #0]
 80040a8:	490b      	ldr	r1, [pc, #44]	; (80040d8 <UART_AdvFeatureConfig+0xcc>)
 80040aa:	6853      	ldr	r3, [r2, #4]
 80040ac:	400b      	ands	r3, r1
 80040ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6053      	str	r3, [r2, #4]
}
 80040b4:	bd30      	pop	{r4, r5, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	fffdffff 	.word	0xfffdffff
 80040bc:	fffeffff 	.word	0xfffeffff
 80040c0:	fffbffff 	.word	0xfffbffff
 80040c4:	ffff7fff 	.word	0xffff7fff
 80040c8:	ffffefff 	.word	0xffffefff
 80040cc:	ffffdfff 	.word	0xffffdfff
 80040d0:	ffefffff 	.word	0xffefffff
 80040d4:	ff9fffff 	.word	0xff9fffff
 80040d8:	fff7ffff 	.word	0xfff7ffff

080040dc <HAL_UART_Init>:
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
}
 80040e4:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80040e6:	0005      	movs	r5, r0
 80040e8:	3569      	adds	r5, #105	; 0x69
 80040ea:	782b      	ldrb	r3, [r5, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80040f2:	0002      	movs	r2, r0
 80040f4:	3268      	adds	r2, #104	; 0x68
 80040f6:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80040f8:	f000 ff88 	bl	800500c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80040fe:	2101      	movs	r1, #1
 8004100:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004102:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004104:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004106:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004108:	438b      	bics	r3, r1
 800410a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800410c:	f7ff fee4 	bl	8003ed8 <UART_SetConfig>
 8004110:	2801      	cmp	r0, #1
 8004112:	d0e6      	beq.n	80040e2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800411a:	0020      	movs	r0, r4
 800411c:	f7ff ff76 	bl	800400c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	490b      	ldr	r1, [pc, #44]	; (8004150 <HAL_UART_Init+0x74>)
 8004124:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004126:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004128:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800412a:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800412c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	438a      	bics	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004134:	2201      	movs	r2, #1
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800413c:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800413e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8004144:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8004146:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800414a:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800414c:	e7ca      	b.n	80040e4 <HAL_UART_Init+0x8>
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	fffff7ff 	.word	0xfffff7ff

08004154 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004154:	0003      	movs	r3, r0
{
 8004156:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004158:	3369      	adds	r3, #105	; 0x69
 800415a:	781b      	ldrb	r3, [r3, #0]
{
 800415c:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800415e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d10f      	bne.n	8004184 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8004164:	0014      	movs	r4, r2
 8004166:	3452      	adds	r4, #82	; 0x52
 8004168:	8823      	ldrh	r3, [r4, #0]
 800416a:	6811      	ldr	r1, [r2, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004172:	680a      	ldr	r2, [r1, #0]
 8004174:	307e      	adds	r0, #126	; 0x7e
 8004176:	4382      	bics	r2, r0
 8004178:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	6808      	ldr	r0, [r1, #0]
 800417e:	4302      	orrs	r2, r0
 8004180:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8004182:	2000      	movs	r0, #0
  }
}
 8004184:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004186:	2080      	movs	r0, #128	; 0x80
 8004188:	6895      	ldr	r5, [r2, #8]
 800418a:	0140      	lsls	r0, r0, #5
 800418c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800418e:	4285      	cmp	r5, r0
 8004190:	d10d      	bne.n	80041ae <UART_Transmit_IT+0x5a>
 8004192:	6910      	ldr	r0, [r2, #16]
 8004194:	2800      	cmp	r0, #0
 8004196:	d10a      	bne.n	80041ae <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004198:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 800419a:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800419c:	05c0      	lsls	r0, r0, #23
 800419e:	0dc0      	lsrs	r0, r0, #23
 80041a0:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80041a2:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80041a4:	8823      	ldrh	r3, [r4, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8023      	strh	r3, [r4, #0]
 80041ac:	e7e9      	b.n	8004182 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80041ae:	1c58      	adds	r0, r3, #1
 80041b0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	850b      	strh	r3, [r1, #40]	; 0x28
 80041b6:	e7f5      	b.n	80041a4 <UART_Transmit_IT+0x50>

080041b8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b8:	2140      	movs	r1, #64	; 0x40
 80041ba:	6802      	ldr	r2, [r0, #0]
{
 80041bc:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	438b      	bics	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	0003      	movs	r3, r0
 80041c6:	2220      	movs	r2, #32
 80041c8:	3369      	adds	r3, #105	; 0x69
 80041ca:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80041cc:	f7ff fe76 	bl	8003ebc <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80041d0:	2000      	movs	r0, #0
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d4:	0002      	movs	r2, r0
{
 80041d6:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d8:	326a      	adds	r2, #106	; 0x6a
 80041da:	7811      	ldrb	r1, [r2, #0]
 80041dc:	6803      	ldr	r3, [r0, #0]
 80041de:	2922      	cmp	r1, #34	; 0x22
 80041e0:	d12d      	bne.n	800423e <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80041e2:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80041e6:	315c      	adds	r1, #92	; 0x5c
 80041e8:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ea:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	0164      	lsls	r4, r4, #5
 80041ee:	4029      	ands	r1, r5
 80041f0:	6885      	ldr	r5, [r0, #8]
 80041f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80041f4:	42a5      	cmp	r5, r4
 80041f6:	d11e      	bne.n	8004236 <UART_Receive_IT+0x62>
 80041f8:	6904      	ldr	r4, [r0, #16]
 80041fa:	2c00      	cmp	r4, #0
 80041fc:	d11b      	bne.n	8004236 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80041fe:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8004200:	3302      	adds	r3, #2
 8004202:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8004204:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8004206:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8004208:	315a      	adds	r1, #90	; 0x5a
 800420a:	880b      	ldrh	r3, [r1, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	800b      	strh	r3, [r1, #0]
 8004212:	42a3      	cmp	r3, r4
 8004214:	d10d      	bne.n	8004232 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004216:	6803      	ldr	r3, [r0, #0]
 8004218:	4d0c      	ldr	r5, [pc, #48]	; (800424c <UART_Receive_IT+0x78>)
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	4029      	ands	r1, r5
 800421e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	3523      	adds	r5, #35	; 0x23
 8004224:	35ff      	adds	r5, #255	; 0xff
 8004226:	43a9      	bics	r1, r5
 8004228:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800422a:	2320      	movs	r3, #32
 800422c:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800422e:	f7ff fe46 	bl	8003ebe <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8004232:	0020      	movs	r0, r4
 8004234:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004236:	1c5c      	adds	r4, r3, #1
 8004238:	6544      	str	r4, [r0, #84]	; 0x54
 800423a:	7019      	strb	r1, [r3, #0]
 800423c:	e7e2      	b.n	8004204 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800423e:	2208      	movs	r2, #8
 8004240:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8004242:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004244:	430a      	orrs	r2, r1
 8004246:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8004248:	e7f3      	b.n	8004232 <UART_Receive_IT+0x5e>
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	fffffedf 	.word	0xfffffedf

08004250 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004250:	220f      	movs	r2, #15
{
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004256:	6800      	ldr	r0, [r0, #0]
 8004258:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800425a:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800425c:	401a      	ands	r2, r3
  if (errorflags == RESET)
 800425e:	d108      	bne.n	8004272 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004260:	2520      	movs	r5, #32
 8004262:	422b      	tst	r3, r5
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0x22>
 8004266:	4229      	tst	r1, r5
 8004268:	d003      	beq.n	8004272 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800426a:	0020      	movs	r0, r4
 800426c:	f7ff ffb2 	bl	80041d4 <UART_Receive_IT>
}
 8004270:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8004272:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8004274:	2a00      	cmp	r2, #0
 8004276:	d060      	beq.n	800433a <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004278:	2201      	movs	r2, #1
 800427a:	4015      	ands	r5, r2
 800427c:	d103      	bne.n	8004286 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800427e:	2690      	movs	r6, #144	; 0x90
 8004280:	0076      	lsls	r6, r6, #1
 8004282:	4231      	tst	r1, r6
 8004284:	d059      	beq.n	800433a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004286:	4213      	tst	r3, r2
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0x46>
 800428a:	05ce      	lsls	r6, r1, #23
 800428c:	d503      	bpl.n	8004296 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800428e:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004290:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004292:	4332      	orrs	r2, r6
 8004294:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004296:	2202      	movs	r2, #2
 8004298:	4213      	tst	r3, r2
 800429a:	d006      	beq.n	80042aa <HAL_UART_IRQHandler+0x5a>
 800429c:	2d00      	cmp	r5, #0
 800429e:	d004      	beq.n	80042aa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80042a0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80042a4:	1892      	adds	r2, r2, r2
 80042a6:	4332      	orrs	r2, r6
 80042a8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042aa:	2204      	movs	r2, #4
 80042ac:	4213      	tst	r3, r2
 80042ae:	d006      	beq.n	80042be <HAL_UART_IRQHandler+0x6e>
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	d004      	beq.n	80042be <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80042b4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80042b8:	3a02      	subs	r2, #2
 80042ba:	4332      	orrs	r2, r6
 80042bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80042be:	071a      	lsls	r2, r3, #28
 80042c0:	d508      	bpl.n	80042d4 <HAL_UART_IRQHandler+0x84>
 80042c2:	068a      	lsls	r2, r1, #26
 80042c4:	d401      	bmi.n	80042ca <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	d004      	beq.n	80042d4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80042ca:	2208      	movs	r2, #8
 80042cc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80042d0:	4302      	orrs	r2, r0
 80042d2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d0ca      	beq.n	8004270 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042da:	2220      	movs	r2, #32
 80042dc:	4213      	tst	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_UART_IRQHandler+0x9a>
 80042e0:	4211      	tst	r1, r2
 80042e2:	d002      	beq.n	80042ea <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 80042e4:	0020      	movs	r0, r4
 80042e6:	f7ff ff75 	bl	80041d4 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80042ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80042ec:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80042ee:	071b      	lsls	r3, r3, #28
 80042f0:	d404      	bmi.n	80042fc <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	689d      	ldr	r5, [r3, #8]
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80042fa:	d01a      	beq.n	8004332 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 80042fc:	f7ff fdce 	bl	8003e9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	420a      	tst	r2, r1
 8004308:	d00f      	beq.n	800432a <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800430c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	438a      	bics	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004312:	2800      	cmp	r0, #0
 8004314:	d009      	beq.n	800432a <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004316:	4b13      	ldr	r3, [pc, #76]	; (8004364 <HAL_UART_IRQHandler+0x114>)
 8004318:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431a:	f7fe fdce 	bl	8002eba <HAL_DMA_Abort_IT>
 800431e:	2800      	cmp	r0, #0
 8004320:	d0a6      	beq.n	8004270 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004322:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004324:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004326:	4798      	blx	r3
 8004328:	e7a2      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800432a:	0020      	movs	r0, r4
 800432c:	f7ff fdc8 	bl	8003ec0 <HAL_UART_ErrorCallback>
 8004330:	e79e      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8004332:	f7ff fdc5 	bl	8003ec0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004338:	e79a      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	4213      	tst	r3, r2
 800433e:	d005      	beq.n	800434c <HAL_UART_IRQHandler+0xfc>
 8004340:	4211      	tst	r1, r2
 8004342:	d003      	beq.n	800434c <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8004344:	0020      	movs	r0, r4
 8004346:	f7ff ff05 	bl	8004154 <UART_Transmit_IT>
    return;
 800434a:	e791      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	4213      	tst	r3, r2
 8004350:	d100      	bne.n	8004354 <HAL_UART_IRQHandler+0x104>
 8004352:	e78d      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
 8004354:	4211      	tst	r1, r2
 8004356:	d100      	bne.n	800435a <HAL_UART_IRQHandler+0x10a>
 8004358:	e78a      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 800435a:	0020      	movs	r0, r4
 800435c:	f7ff ff2c 	bl	80041b8 <UART_EndTransmit_IT>
    return;
 8004360:	e786      	b.n	8004270 <HAL_UART_IRQHandler+0x20>
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	08003ec3 	.word	0x08003ec3

08004368 <HAL_ADC_MspInit>:
  HAL_ADC_MspInit(&hadc);

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	0005      	movs	r5, r0
 800436c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436e:	2214      	movs	r2, #20
 8004370:	2100      	movs	r1, #0
 8004372:	a803      	add	r0, sp, #12
 8004374:	f000 fedb 	bl	800512e <memset>
  if(adcHandle->Instance==ADC1)
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_ADC_MspInit+0x98>)
 800437a:	682a      	ldr	r2, [r5, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d13d      	bne.n	80043fc <HAL_ADC_MspInit+0x94>
  {

    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004380:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_ADC_MspInit+0x9c>)
 8004386:	00b6      	lsls	r6, r6, #2
 8004388:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	0280      	lsls	r0, r0, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800438c:	4332      	orrs	r2, r6
 800438e:	619a      	str	r2, [r3, #24]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	4032      	ands	r2, r6
 8004394:	9200      	str	r2, [sp, #0]
 8004396:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004398:	6959      	ldr	r1, [r3, #20]
 800439a:	4301      	orrs	r1, r0
 800439c:	6159      	str	r1, [r3, #20]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800439e:	2101      	movs	r1, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	4002      	ands	r2, r0
 80043a4:	9201      	str	r2, [sp, #4]
 80043a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80043a8:	695a      	ldr	r2, [r3, #20]
    */
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
                          |CURRENT_PHASE_V_Pin|CURRENT_PHASE_W_Pin|THROTTLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043aa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_DMA1_CLK_ENABLE();
 80043ac:	430a      	orrs	r2, r1
 80043ae:	615a      	str	r2, [r3, #20]
 80043b0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_DMA1_CLK_ENABLE();
 80043b4:	400b      	ands	r3, r1
 80043b6:	9302      	str	r3, [sp, #8]
 80043b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 80043ba:	237f      	movs	r3, #127	; 0x7f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 80043be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043c0:	3b7c      	subs	r3, #124	; 0x7c
 80043c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c4:	f7fe fde6 	bl	8002f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80043c8:	4c0f      	ldr	r4, [pc, #60]	; (8004408 <HAL_ADC_MspInit+0xa0>)
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_ADC_MspInit+0xa4>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80043cc:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 80043ce:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043d0:	2300      	movs	r3, #0
 80043d2:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d4:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80043d6:	3380      	adds	r3, #128	; 0x80
 80043d8:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80043e0:	2320      	movs	r3, #32
 80043e2:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043e8:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80043ea:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80043ec:	f7fe fcf4 	bl	8002dd8 <HAL_DMA_Init>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 80043f4:	f000 fb7a 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80043f8:	63ec      	str	r4, [r5, #60]	; 0x3c
 80043fa:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80043fc:	b008      	add	sp, #32
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	40012400 	.word	0x40012400
 8004404:	40021000 	.word	0x40021000
 8004408:	20000064 	.word	0x20000064
 800440c:	40020008 	.word	0x40020008

08004410 <MX_ADC_Init>:
{
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004414:	220c      	movs	r2, #12
 8004416:	2100      	movs	r1, #0
 8004418:	a801      	add	r0, sp, #4
 800441a:	f000 fe88 	bl	800512e <memset>
  hadc.Instance = ADC1;
 800441e:	4c3c      	ldr	r4, [pc, #240]	; (8004510 <MX_ADC_Init+0x100>)
 8004420:	4b3c      	ldr	r3, [pc, #240]	; (8004514 <MX_ADC_Init+0x104>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004422:	2500      	movs	r5, #0
  hadc.Instance = ADC1;
 8004424:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004426:	2301      	movs	r3, #1
 8004428:	6123      	str	r3, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 800442a:	6223      	str	r3, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800442c:	23c2      	movs	r3, #194	; 0xc2
 800442e:	33ff      	adds	r3, #255	; 0xff
 8004430:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004432:	2380      	movs	r3, #128	; 0x80
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004434:	2208      	movs	r2, #8
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004436:	00db      	lsls	r3, r3, #3
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004438:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800443a:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800443c:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800443e:	60e5      	str	r5, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004440:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004442:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004444:	61e5      	str	r5, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004446:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004448:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800444a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800444c:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800444e:	f7fe f9f5 	bl	800283c <HAL_ADC_Init>
 8004452:	42a8      	cmp	r0, r5
 8004454:	d001      	beq.n	800445a <MX_ADC_Init+0x4a>
    Error_Handler();
 8004456:	f000 fb49 	bl	8004aec <Error_Handler>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	015b      	lsls	r3, r3, #5
 800445e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004460:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004462:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004464:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004466:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8004468:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800446a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800446c:	f7fe fb96 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8004470:	2800      	cmp	r0, #0
 8004472:	d001      	beq.n	8004478 <MX_ADC_Init+0x68>
    Error_Handler();
 8004474:	f000 fb3a 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_1;
 8004478:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800447a:	a901      	add	r1, sp, #4
 800447c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800447e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004480:	f7fe fb8c 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8004484:	2800      	cmp	r0, #0
 8004486:	d001      	beq.n	800448c <MX_ADC_Init+0x7c>
    Error_Handler();
 8004488:	f000 fb30 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_2;
 800448c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800448e:	a901      	add	r1, sp, #4
 8004490:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8004492:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004494:	f7fe fb82 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8004498:	2800      	cmp	r0, #0
 800449a:	d001      	beq.n	80044a0 <MX_ADC_Init+0x90>
    Error_Handler();
 800449c:	f000 fb26 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_3;
 80044a0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044a2:	a901      	add	r1, sp, #4
 80044a4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80044a6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044a8:	f7fe fb78 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d001      	beq.n	80044b4 <MX_ADC_Init+0xa4>
    Error_Handler();
 80044b0:	f000 fb1c 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_4;
 80044b4:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044b6:	a901      	add	r1, sp, #4
 80044b8:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80044ba:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044bc:	f7fe fb6e 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d001      	beq.n	80044c8 <MX_ADC_Init+0xb8>
    Error_Handler();
 80044c4:	f000 fb12 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_5;
 80044c8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044ca:	a901      	add	r1, sp, #4
 80044cc:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80044ce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044d0:	f7fe fb64 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d001      	beq.n	80044dc <MX_ADC_Init+0xcc>
    Error_Handler();
 80044d8:	f000 fb08 	bl	8004aec <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_6;
 80044dc:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044de:	a901      	add	r1, sp, #4
 80044e0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 80044e2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044e4:	f7fe fb5a 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d001      	beq.n	80044f0 <MX_ADC_Init+0xe0>
    Error_Handler();
 80044ec:	f000 fafe 	bl	8004aec <Error_Handler>
  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80044f0:	2200      	movs	r2, #0
 80044f2:	200c      	movs	r0, #12
 80044f4:	0011      	movs	r1, r2
 80044f6:	f7fe fc1b 	bl	8002d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80044fa:	200c      	movs	r0, #12
 80044fc:	f7fe fc48 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  HAL_ADCEx_Calibration_Start(&hadc);
 8004500:	0020      	movs	r0, r4
 8004502:	f7fe fbc1 	bl	8002c88 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_MspInit(&hadc);
 8004506:	0020      	movs	r0, r4
 8004508:	f7ff ff2e 	bl	8004368 <HAL_ADC_MspInit>
}
 800450c:	b005      	add	sp, #20
 800450e:	bd30      	pop	{r4, r5, pc}
 8004510:	200000ac 	.word	0x200000ac
 8004514:	40012400 	.word	0x40012400

08004518 <UpdateWaveform>:
  * @brief Function to update a specific phase waveform
  * @param phase to update
  * @retval none
  */
void UpdateWaveform(phase_t phase)
{
 8004518:	b570      	push	{r4, r5, r6, lr}
	switch(phase)
 800451a:	2800      	cmp	r0, #0
 800451c:	d003      	beq.n	8004526 <UpdateWaveform+0xe>
 800451e:	2801      	cmp	r0, #1
 8004520:	d100      	bne.n	8004524 <UpdateWaveform+0xc>
 8004522:	e07e      	b.n	8004622 <UpdateWaveform+0x10a>
	case phase_W:
		return;
	default:
		return;
	}
}
 8004524:	bd70      	pop	{r4, r5, r6, pc}
	    if(waveformU_state == waveform_running)
 8004526:	4a5b      	ldr	r2, [pc, #364]	; (8004694 <UpdateWaveform+0x17c>)
 8004528:	7813      	ldrb	r3, [r2, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d14d      	bne.n	80045ca <UpdateWaveform+0xb2>
	        waveformU_switchCount++;
 800452e:	4c5a      	ldr	r4, [pc, #360]	; (8004698 <UpdateWaveform+0x180>)
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8004530:	495a      	ldr	r1, [pc, #360]	; (800469c <UpdateWaveform+0x184>)
	        waveformU_switchCount++;
 8004532:	6823      	ldr	r3, [r4, #0]
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8004534:	680e      	ldr	r6, [r1, #0]
	        waveformU_switchCount++;
 8004536:	3301      	adds	r3, #1
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	4959      	ldr	r1, [pc, #356]	; (80046a0 <UpdateWaveform+0x188>)
 800453c:	4d59      	ldr	r5, [pc, #356]	; (80046a4 <UpdateWaveform+0x18c>)
	        if(waveformU_switchCount >= waveform_maxSwitches)
 800453e:	42b3      	cmp	r3, r6
 8004540:	d311      	bcc.n	8004566 <UpdateWaveform+0x4e>
	        	if(phaseU_low_state == switchOff)
 8004542:	4e59      	ldr	r6, [pc, #356]	; (80046a8 <UpdateWaveform+0x190>)
 8004544:	7833      	ldrb	r3, [r6, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d132      	bne.n	80045b0 <UpdateWaveform+0x98>
	        		phaseU_low_state = switchClosing;
 800454a:	2002      	movs	r0, #2
 800454c:	7030      	strb	r0, [r6, #0]
	        		TIM1->CCR1 = 0;
 800454e:	4e57      	ldr	r6, [pc, #348]	; (80046ac <UpdateWaveform+0x194>)
	        		phaseU_high_state = switchOff;
 8004550:	700b      	strb	r3, [r1, #0]
	        		TIM1->CCR1 = 0;
 8004552:	6373      	str	r3, [r6, #52]	; 0x34
	        		phaseV_low_state = switchOff;
 8004554:	4e56      	ldr	r6, [pc, #344]	; (80046b0 <UpdateWaveform+0x198>)
 8004556:	7033      	strb	r3, [r6, #0]
	        		TIM3->CCR2 = 0;
 8004558:	4e56      	ldr	r6, [pc, #344]	; (80046b4 <UpdateWaveform+0x19c>)
 800455a:	63b3      	str	r3, [r6, #56]	; 0x38
	        		phaseV_high_state = switchClosing;
 800455c:	7028      	strb	r0, [r5, #0]
	        	waveformU_switchCount = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	6023      	str	r3, [r4, #0]
	        	waveformU_state = waveform_deadTime;
 8004562:	3302      	adds	r3, #2
 8004564:	7013      	strb	r3, [r2, #0]
	        if(phaseU_high_state == switchOn)
 8004566:	780b      	ldrb	r3, [r1, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10e      	bne.n	800458a <UpdateWaveform+0x72>
	        	float pwm_target = waveformAmplitude * sine_lookup[waveformU_switchCount];
 800456c:	4b52      	ldr	r3, [pc, #328]	; (80046b8 <UpdateWaveform+0x1a0>)
 800456e:	8818      	ldrh	r0, [r3, #0]
 8004570:	f7fc fa7e 	bl	8000a70 <__aeabi_i2f>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	4a51      	ldr	r2, [pc, #324]	; (80046bc <UpdateWaveform+0x1a4>)
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	5899      	ldr	r1, [r3, r2]
 800457c:	f7fb ff9c 	bl	80004b8 <__aeabi_fmul>
	        	TIM1->CCR1 = (uint16_t) pwm_target;
 8004580:	f7fb feda 	bl	8000338 <__aeabi_f2uiz>
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <UpdateWaveform+0x194>)
 8004586:	b280      	uxth	r0, r0
 8004588:	6358      	str	r0, [r3, #52]	; 0x34
	        if(phaseV_high_state == switchOn)
 800458a:	782b      	ldrb	r3, [r5, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d1c9      	bne.n	8004524 <UpdateWaveform+0xc>
	        	float pwm_target = waveformAmplitude * sine_lookup[waveformU_switchCount];
 8004590:	4b49      	ldr	r3, [pc, #292]	; (80046b8 <UpdateWaveform+0x1a0>)
 8004592:	8818      	ldrh	r0, [r3, #0]
 8004594:	f7fc fa6c 	bl	8000a70 <__aeabi_i2f>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4a48      	ldr	r2, [pc, #288]	; (80046bc <UpdateWaveform+0x1a4>)
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	5899      	ldr	r1, [r3, r2]
 80045a0:	f7fb ff8a 	bl	80004b8 <__aeabi_fmul>
	        	TIM1->CCR2 = (uint16_t) pwm_target;
 80045a4:	f7fb fec8 	bl	8000338 <__aeabi_f2uiz>
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <UpdateWaveform+0x194>)
 80045aa:	b280      	uxth	r0, r0
 80045ac:	6398      	str	r0, [r3, #56]	; 0x38
 80045ae:	e7b9      	b.n	8004524 <UpdateWaveform+0xc>
	        	else if(phaseU_low_state == switchOn)
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d1d4      	bne.n	800455e <UpdateWaveform+0x46>
	        		TIM3->CCR1 = 0;
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <UpdateWaveform+0x19c>)
	        		phaseU_low_state = switchOff;
 80045b6:	7030      	strb	r0, [r6, #0]
	        		TIM3->CCR1 = 0;
 80045b8:	6358      	str	r0, [r3, #52]	; 0x34
	        		phaseU_high_state = switchClosing;
 80045ba:	2302      	movs	r3, #2
	        		phaseV_low_state = switchClosing;
 80045bc:	4e3c      	ldr	r6, [pc, #240]	; (80046b0 <UpdateWaveform+0x198>)
	        		phaseU_high_state = switchClosing;
 80045be:	700b      	strb	r3, [r1, #0]
	        		phaseV_low_state = switchClosing;
 80045c0:	7033      	strb	r3, [r6, #0]
	        		TIM1->CCR2 = 0;
 80045c2:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <UpdateWaveform+0x194>)
	        		phaseV_high_state = switchOff;
 80045c4:	7028      	strb	r0, [r5, #0]
	        		TIM1->CCR2 = 0;
 80045c6:	6398      	str	r0, [r3, #56]	; 0x38
 80045c8:	e7c9      	b.n	800455e <UpdateWaveform+0x46>
	    else if(waveformU_state == waveform_deadTime)
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d1aa      	bne.n	8004524 <UpdateWaveform+0xc>
	        waveformU_switchCount++;
 80045ce:	4932      	ldr	r1, [pc, #200]	; (8004698 <UpdateWaveform+0x180>)
 80045d0:	680b      	ldr	r3, [r1, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	600b      	str	r3, [r1, #0]
	        if(waveformU_switchCount >= WAVEFORM_DEADTIME)
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0a4      	beq.n	8004524 <UpdateWaveform+0xc>
	        	if(phaseU_low_state == switchClosing)
 80045da:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <UpdateWaveform+0x190>)
 80045dc:	7818      	ldrb	r0, [r3, #0]
 80045de:	2802      	cmp	r0, #2
 80045e0:	d105      	bne.n	80045ee <UpdateWaveform+0xd6>
	        		TIM3->CCR1 = TIM_PERIOD;
 80045e2:	24c8      	movs	r4, #200	; 0xc8
 80045e4:	4833      	ldr	r0, [pc, #204]	; (80046b4 <UpdateWaveform+0x19c>)
 80045e6:	00a4      	lsls	r4, r4, #2
 80045e8:	6344      	str	r4, [r0, #52]	; 0x34
	        		phaseU_low_state = switchOn;
 80045ea:	2001      	movs	r0, #1
 80045ec:	7018      	strb	r0, [r3, #0]
	        	if(phaseU_high_state == switchClosing)
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <UpdateWaveform+0x188>)
 80045f0:	7818      	ldrb	r0, [r3, #0]
 80045f2:	2802      	cmp	r0, #2
 80045f4:	d101      	bne.n	80045fa <UpdateWaveform+0xe2>
	        		phaseU_high_state = switchOn;
 80045f6:	3801      	subs	r0, #1
 80045f8:	7018      	strb	r0, [r3, #0]
	        	if(phaseV_low_state == switchClosing)
 80045fa:	4b2d      	ldr	r3, [pc, #180]	; (80046b0 <UpdateWaveform+0x198>)
 80045fc:	7818      	ldrb	r0, [r3, #0]
 80045fe:	2802      	cmp	r0, #2
 8004600:	d105      	bne.n	800460e <UpdateWaveform+0xf6>
	        		TIM3->CCR2 = TIM_PERIOD;
 8004602:	24c8      	movs	r4, #200	; 0xc8
 8004604:	482b      	ldr	r0, [pc, #172]	; (80046b4 <UpdateWaveform+0x19c>)
 8004606:	00a4      	lsls	r4, r4, #2
 8004608:	6384      	str	r4, [r0, #56]	; 0x38
	        		phaseV_low_state = switchOn;
 800460a:	2001      	movs	r0, #1
	        		phaseV_low_state = switchOn;
 800460c:	7018      	strb	r0, [r3, #0]
	        	if(phaseV_high_state == switchClosing)
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <UpdateWaveform+0x18c>)
 8004610:	7818      	ldrb	r0, [r3, #0]
 8004612:	2802      	cmp	r0, #2
 8004614:	d101      	bne.n	800461a <UpdateWaveform+0x102>
	        		phaseV_high_state = switchOn;
 8004616:	3801      	subs	r0, #1
 8004618:	7018      	strb	r0, [r3, #0]
	        	waveformV_switchCount = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_running;
 800461e:	3301      	adds	r3, #1
 8004620:	e019      	b.n	8004656 <UpdateWaveform+0x13e>
	    if(waveformV_state == waveform_running)
 8004622:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <UpdateWaveform+0x1a8>)
 8004624:	7813      	ldrb	r3, [r2, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d121      	bne.n	800466e <UpdateWaveform+0x156>
	        waveformV_switchCount++;
 800462a:	4926      	ldr	r1, [pc, #152]	; (80046c4 <UpdateWaveform+0x1ac>)
	        if(waveformV_switchCount >= waveform_maxSwitches)
 800462c:	481b      	ldr	r0, [pc, #108]	; (800469c <UpdateWaveform+0x184>)
	        waveformV_switchCount++;
 800462e:	680b      	ldr	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8004630:	6800      	ldr	r0, [r0, #0]
	        waveformV_switchCount++;
 8004632:	3301      	adds	r3, #1
 8004634:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8004636:	4283      	cmp	r3, r0
 8004638:	d200      	bcs.n	800463c <UpdateWaveform+0x124>
 800463a:	e773      	b.n	8004524 <UpdateWaveform+0xc>
	        	if(phaseV_low_state == switchOff)
 800463c:	481c      	ldr	r0, [pc, #112]	; (80046b0 <UpdateWaveform+0x198>)
 800463e:	7803      	ldrb	r3, [r0, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <UpdateWaveform+0x142>
	        		phaseV_low_state = switchClosing;
 8004644:	2402      	movs	r4, #2
 8004646:	7004      	strb	r4, [r0, #0]
	        		phaseV_high_state = switchOff;
 8004648:	4816      	ldr	r0, [pc, #88]	; (80046a4 <UpdateWaveform+0x18c>)
 800464a:	7003      	strb	r3, [r0, #0]
	        		TIM1->CCR2 = 0;
 800464c:	4817      	ldr	r0, [pc, #92]	; (80046ac <UpdateWaveform+0x194>)
 800464e:	6383      	str	r3, [r0, #56]	; 0x38
	        	waveformV_switchCount = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_deadTime;
 8004654:	3302      	adds	r3, #2
	        	waveformV_state = waveform_running;
 8004656:	7013      	strb	r3, [r2, #0]
 8004658:	e764      	b.n	8004524 <UpdateWaveform+0xc>
	        	else if(phaseV_low_state == switchOn)
 800465a:	2b01      	cmp	r3, #1
 800465c:	d1f8      	bne.n	8004650 <UpdateWaveform+0x138>
	        		phaseV_low_state = switchOff;
 800465e:	2300      	movs	r3, #0
 8004660:	7003      	strb	r3, [r0, #0]
	        		TIM3->CCR2 = 0;
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <UpdateWaveform+0x19c>)
 8004664:	6383      	str	r3, [r0, #56]	; 0x38
	        		phaseV_high_state = switchClosing;
 8004666:	2002      	movs	r0, #2
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <UpdateWaveform+0x18c>)
 800466a:	7018      	strb	r0, [r3, #0]
 800466c:	e7f0      	b.n	8004650 <UpdateWaveform+0x138>
	    else if(waveformV_state == waveform_deadTime)
 800466e:	2b02      	cmp	r3, #2
 8004670:	d000      	beq.n	8004674 <UpdateWaveform+0x15c>
 8004672:	e757      	b.n	8004524 <UpdateWaveform+0xc>
	        waveformV_switchCount++;
 8004674:	4913      	ldr	r1, [pc, #76]	; (80046c4 <UpdateWaveform+0x1ac>)
 8004676:	680b      	ldr	r3, [r1, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= WAVEFORM_DEADTIME)
 800467c:	2b00      	cmp	r3, #0
 800467e:	d100      	bne.n	8004682 <UpdateWaveform+0x16a>
 8004680:	e750      	b.n	8004524 <UpdateWaveform+0xc>
	        	if(phaseV_low_state == switchClosing)
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <UpdateWaveform+0x198>)
 8004684:	781c      	ldrb	r4, [r3, #0]
 8004686:	2c02      	cmp	r4, #2
 8004688:	d1c1      	bne.n	800460e <UpdateWaveform+0xf6>
	        		TIM3->CCR2 = TIM_PERIOD;
 800468a:	25c8      	movs	r5, #200	; 0xc8
 800468c:	4c09      	ldr	r4, [pc, #36]	; (80046b4 <UpdateWaveform+0x19c>)
 800468e:	00ad      	lsls	r5, r5, #2
 8004690:	63a5      	str	r5, [r4, #56]	; 0x38
 8004692:	e7bb      	b.n	800460c <UpdateWaveform+0xf4>
 8004694:	20000035 	.word	0x20000035
 8004698:	2000003c 	.word	0x2000003c
 800469c:	20000030 	.word	0x20000030
 80046a0:	20000034 	.word	0x20000034
 80046a4:	20001098 	.word	0x20001098
 80046a8:	20000024 	.word	0x20000024
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	20000038 	.word	0x20000038
 80046b4:	40000400 	.word	0x40000400
 80046b8:	20000026 	.word	0x20000026
 80046bc:	200000f8 	.word	0x200000f8
 80046c0:	2000002a 	.word	0x2000002a
 80046c4:	2000005c 	.word	0x2000005c

080046c8 <fast_sin>:
  * @brief Use the fast sin algorithm to calculate sin(x)
  * @param x = input to sin(x)
  * @retval floating point value of result
  */
float fast_sin(float x)
{
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	1c04      	adds	r4, r0, #0
	// If a value outside of -Pi - Pi is given, correct it
	if(x < -(PI))
 80046cc:	f7fd ff40 	bl	8002550 <__aeabi_f2d>
 80046d0:	4a42      	ldr	r2, [pc, #264]	; (80047dc <fast_sin+0x114>)
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <fast_sin+0x118>)
 80046d4:	0006      	movs	r6, r0
 80046d6:	000f      	movs	r7, r1
 80046d8:	f7fb fdcc 	bl	8000274 <__aeabi_dcmplt>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d04e      	beq.n	800477e <fast_sin+0xb6>
	{
		x += TWO_PI;
 80046e0:	4a40      	ldr	r2, [pc, #256]	; (80047e4 <fast_sin+0x11c>)
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <fast_sin+0x120>)
 80046e4:	0030      	movs	r0, r6
 80046e6:	0039      	movs	r1, r7
 80046e8:	f7fc fa58 	bl	8000b9c <__aeabi_dadd>
	}
	else if(x > PI)
	{
		x -= TWO_PI;
 80046ec:	f7fd ff82 	bl	80025f4 <__aeabi_d2f>
 80046f0:	1c04      	adds	r4, r0, #0
	}

	// Compute the approximation of sine
	float sine;
	// Compute the brunt of the calculation using sin(x) ~ (4/pi)x +- (4/(pi^2))x^2
	if(x < 0)
 80046f2:	2100      	movs	r1, #0
 80046f4:	1c20      	adds	r0, r4, #0
 80046f6:	f7fb fdf7 	bl	80002e8 <__aeabi_fcmplt>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d04e      	beq.n	800479c <fast_sin+0xd4>
	{
		sine = (FOUR_OVER_PI * x) + (FOUR_OVER_PI2 * x * x);
 80046fe:	1c20      	adds	r0, r4, #0
 8004700:	f7fd ff26 	bl	8002550 <__aeabi_f2d>
 8004704:	0004      	movs	r4, r0
 8004706:	000d      	movs	r5, r1
 8004708:	4a38      	ldr	r2, [pc, #224]	; (80047ec <fast_sin+0x124>)
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <fast_sin+0x128>)
 800470c:	f7fd f98a 	bl	8001a24 <__aeabi_dmul>
 8004710:	0022      	movs	r2, r4
 8004712:	002b      	movs	r3, r5
 8004714:	f7fd f986 	bl	8001a24 <__aeabi_dmul>
 8004718:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <fast_sin+0x12c>)
 800471a:	0006      	movs	r6, r0
 800471c:	000f      	movs	r7, r1
 800471e:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <fast_sin+0x130>)
 8004720:	0020      	movs	r0, r4
 8004722:	0029      	movs	r1, r5
 8004724:	f7fd f97e 	bl	8001a24 <__aeabi_dmul>
 8004728:	0002      	movs	r2, r0
 800472a:	000b      	movs	r3, r1
 800472c:	0030      	movs	r0, r6
 800472e:	0039      	movs	r1, r7
 8004730:	f7fc fa34 	bl	8000b9c <__aeabi_dadd>
	}
	else
	{
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 8004734:	f7fd ff5e 	bl	80025f4 <__aeabi_d2f>
	}
	// Make the calculation more accurate by = .225 * (+-(sine)^2 - sine) + sine
    if (sine < 0)
 8004738:	2100      	movs	r1, #0
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 800473a:	1c04      	adds	r4, r0, #0
    if (sine < 0)
 800473c:	f7fb fdd4 	bl	80002e8 <__aeabi_fcmplt>
 8004740:	2800      	cmp	r0, #0
 8004742:	d047      	beq.n	80047d4 <fast_sin+0x10c>
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * -1 * sine - sine) + sine;
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	18e0      	adds	r0, r4, r3
 800474a:	1c21      	adds	r1, r4, #0
    }
    else
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 800474c:	f7fb feb4 	bl	80004b8 <__aeabi_fmul>
 8004750:	1c21      	adds	r1, r4, #0
 8004752:	f7fb ffd1 	bl	80006f8 <__aeabi_fsub>
 8004756:	f7fd fefb 	bl	8002550 <__aeabi_f2d>
 800475a:	4a28      	ldr	r2, [pc, #160]	; (80047fc <fast_sin+0x134>)
 800475c:	4b28      	ldr	r3, [pc, #160]	; (8004800 <fast_sin+0x138>)
 800475e:	f7fd f961 	bl	8001a24 <__aeabi_dmul>
 8004762:	0006      	movs	r6, r0
 8004764:	1c20      	adds	r0, r4, #0
 8004766:	000f      	movs	r7, r1
 8004768:	f7fd fef2 	bl	8002550 <__aeabi_f2d>
 800476c:	0002      	movs	r2, r0
 800476e:	000b      	movs	r3, r1
 8004770:	0030      	movs	r0, r6
 8004772:	0039      	movs	r1, r7
 8004774:	f7fc fa12 	bl	8000b9c <__aeabi_dadd>
 8004778:	f7fd ff3c 	bl	80025f4 <__aeabi_d2f>
    }
    // Return the calculated value
    return sine;
}
 800477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(x > PI)
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <fast_sin+0x114>)
 8004780:	4b20      	ldr	r3, [pc, #128]	; (8004804 <fast_sin+0x13c>)
 8004782:	0030      	movs	r0, r6
 8004784:	0039      	movs	r1, r7
 8004786:	f7fb fd89 	bl	800029c <__aeabi_dcmpgt>
 800478a:	2800      	cmp	r0, #0
 800478c:	d0b1      	beq.n	80046f2 <fast_sin+0x2a>
		x -= TWO_PI;
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <fast_sin+0x11c>)
 8004790:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <fast_sin+0x120>)
 8004792:	0030      	movs	r0, r6
 8004794:	0039      	movs	r1, r7
 8004796:	f7fd fbc5 	bl	8001f24 <__aeabi_dsub>
 800479a:	e7a7      	b.n	80046ec <fast_sin+0x24>
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 800479c:	1c20      	adds	r0, r4, #0
 800479e:	f7fd fed7 	bl	8002550 <__aeabi_f2d>
 80047a2:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <fast_sin+0x12c>)
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <fast_sin+0x130>)
 80047a6:	0004      	movs	r4, r0
 80047a8:	000d      	movs	r5, r1
 80047aa:	f7fd f93b 	bl	8001a24 <__aeabi_dmul>
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <fast_sin+0x124>)
 80047b0:	0006      	movs	r6, r0
 80047b2:	000f      	movs	r7, r1
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <fast_sin+0x128>)
 80047b6:	0020      	movs	r0, r4
 80047b8:	0029      	movs	r1, r5
 80047ba:	f7fd f933 	bl	8001a24 <__aeabi_dmul>
 80047be:	0022      	movs	r2, r4
 80047c0:	002b      	movs	r3, r5
 80047c2:	f7fd f92f 	bl	8001a24 <__aeabi_dmul>
 80047c6:	0002      	movs	r2, r0
 80047c8:	000b      	movs	r3, r1
 80047ca:	0030      	movs	r0, r6
 80047cc:	0039      	movs	r1, r7
 80047ce:	f7fd fba9 	bl	8001f24 <__aeabi_dsub>
 80047d2:	e7af      	b.n	8004734 <fast_sin+0x6c>
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 80047d4:	1c21      	adds	r1, r4, #0
 80047d6:	1c20      	adds	r0, r4, #0
 80047d8:	e7b8      	b.n	800474c <fast_sin+0x84>
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	53c8d4f1 	.word	0x53c8d4f1
 80047e0:	c00921fb 	.word	0xc00921fb
 80047e4:	5474a168 	.word	0x5474a168
 80047e8:	401921fb 	.word	0x401921fb
 80047ec:	62992759 	.word	0x62992759
 80047f0:	3fd9f02f 	.word	0x3fd9f02f
 80047f4:	6c8462a6 	.word	0x6c8462a6
 80047f8:	3ff45f30 	.word	0x3ff45f30
 80047fc:	cccccccd 	.word	0xcccccccd
 8004800:	3fcccccc 	.word	0x3fcccccc
 8004804:	400921fb 	.word	0x400921fb

08004808 <Create_SineTable>:
  * @brief Creates a lookup table for the sine wave
  * @param none
  * @retval none
  */
void Create_SineTable(void)
{
 8004808:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 800480a:	25fa      	movs	r5, #250	; 0xfa
{
 800480c:	2400      	movs	r4, #0
	{
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 800480e:	4e0c      	ldr	r6, [pc, #48]	; (8004840 <Create_SineTable+0x38>)
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004810:	00ad      	lsls	r5, r5, #2
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 8004812:	b2a0      	uxth	r0, r4
 8004814:	f7fc f97c 	bl	8000b10 <__aeabi_ui2f>
 8004818:	f7fd fe9a 	bl	8002550 <__aeabi_f2d>
 800481c:	4a09      	ldr	r2, [pc, #36]	; (8004844 <Create_SineTable+0x3c>)
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <Create_SineTable+0x40>)
 8004820:	f7fd f900 	bl	8001a24 <__aeabi_dmul>
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <Create_SineTable+0x44>)
 8004826:	2200      	movs	r2, #0
 8004828:	f7fc fcc8 	bl	80011bc <__aeabi_ddiv>
 800482c:	f7fd fee2 	bl	80025f4 <__aeabi_d2f>
 8004830:	f7ff ff4a 	bl	80046c8 <fast_sin>
 8004834:	00a3      	lsls	r3, r4, #2
 8004836:	3401      	adds	r4, #1
 8004838:	50f0      	str	r0, [r6, r3]
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 800483a:	42ac      	cmp	r4, r5
 800483c:	d1e9      	bne.n	8004812 <Create_SineTable+0xa>
	}
}
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	200000f8 	.word	0x200000f8
 8004844:	53c8d4f1 	.word	0x53c8d4f1
 8004848:	400921fb 	.word	0x400921fb
 800484c:	408f4000 	.word	0x408f4000

08004850 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004850:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004852:	2001      	movs	r0, #1
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <MX_DMA_Init+0x28>)
 8004856:	6951      	ldr	r1, [r2, #20]
 8004858:	4301      	orrs	r1, r0
 800485a:	6151      	str	r1, [r2, #20]
 800485c:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800485e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004860:	4003      	ands	r3, r0
 8004862:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004864:	0011      	movs	r1, r2
 8004866:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004868:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800486a:	f7fe fa61 	bl	8002d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800486e:	2009      	movs	r0, #9
 8004870:	f7fe fa8e 	bl	8002d90 <HAL_NVIC_EnableIRQ>

}
 8004874:	bd07      	pop	{r0, r1, r2, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	40021000 	.word	0x40021000

0800487c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800487c:	b500      	push	{lr}
 800487e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	2214      	movs	r2, #20
 8004882:	2100      	movs	r1, #0
 8004884:	a803      	add	r0, sp, #12
 8004886:	f000 fc52 	bl	800512e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	2080      	movs	r0, #128	; 0x80
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <MX_GPIO_Init+0x58>)
 800488e:	0280      	lsls	r0, r0, #10
 8004890:	6959      	ldr	r1, [r3, #20]
 8004892:	4301      	orrs	r1, r0
 8004894:	6159      	str	r1, [r3, #20]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800489a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800489c:	9200      	str	r2, [sp, #0]
 800489e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	02c0      	lsls	r0, r0, #11
 80048a4:	4301      	orrs	r1, r0
 80048a6:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ac:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ae:	4002      	ands	r2, r0
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b4:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b6:	4808      	ldr	r0, [pc, #32]	; (80048d8 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b8:	430a      	orrs	r2, r1
 80048ba:	615a      	str	r2, [r3, #20]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	400b      	ands	r3, r1
 80048c0:	9302      	str	r3, [sp, #8]
 80048c2:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 80048c4:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048cc:	f7fe fb62 	bl	8002f94 <HAL_GPIO_Init>

}
 80048d0:	b009      	add	sp, #36	; 0x24
 80048d2:	bd00      	pop	{pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	48000400 	.word	0x48000400

080048dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80048dc:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <MX_I2C1_Init+0x50>)
 80048e0:	4c13      	ldr	r4, [pc, #76]	; (8004930 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048e2:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80048e4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80048e6:	4b13      	ldr	r3, [pc, #76]	; (8004934 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048e8:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 80048ea:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048ec:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048ee:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80048f0:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048f2:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80048f4:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048f6:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048f8:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048fa:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048fc:	f7fe fbfa 	bl	80030f4 <HAL_I2C_Init>
 8004900:	2800      	cmp	r0, #0
 8004902:	d001      	beq.n	8004908 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8004904:	f000 f8f2 	bl	8004aec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004908:	2100      	movs	r1, #0
 800490a:	0020      	movs	r0, r4
 800490c:	f7fe fc48 	bl	80031a0 <HAL_I2CEx_ConfigAnalogFilter>
 8004910:	2800      	cmp	r0, #0
 8004912:	d001      	beq.n	8004918 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8004914:	f000 f8ea 	bl	8004aec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004918:	2100      	movs	r1, #0
 800491a:	0020      	movs	r0, r4
 800491c:	f7fe fc66 	bl	80031ec <HAL_I2CEx_ConfigDigitalFilter>
 8004920:	2800      	cmp	r0, #0
 8004922:	d001      	beq.n	8004928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004924:	f000 f8e2 	bl	8004aec <Error_Handler>
  }

}
 8004928:	bd10      	pop	{r4, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	40005400 	.word	0x40005400
 8004930:	2000109c 	.word	0x2000109c
 8004934:	2000090e 	.word	0x2000090e

08004938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004938:	b510      	push	{r4, lr}
 800493a:	0004      	movs	r4, r0
 800493c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493e:	2214      	movs	r2, #20
 8004940:	2100      	movs	r1, #0
 8004942:	a803      	add	r0, sp, #12
 8004944:	f000 fbf3 	bl	800512e <memset>
  if(i2cHandle->Instance==I2C1)
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_I2C_MspInit+0x60>)
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d120      	bne.n	8004992 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	4c12      	ldr	r4, [pc, #72]	; (800499c <HAL_I2C_MspInit+0x64>)
 8004954:	02c9      	lsls	r1, r1, #11
 8004956:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004958:	4811      	ldr	r0, [pc, #68]	; (80049a0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800495a:	430a      	orrs	r2, r1
 800495c:	6162      	str	r2, [r4, #20]
 800495e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004960:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004962:	400b      	ands	r3, r1
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004968:	23c0      	movs	r3, #192	; 0xc0
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800496e:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004970:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004972:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004974:	3b11      	subs	r3, #17
 8004976:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004978:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800497a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497c:	f7fe fb0a 	bl	8002f94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	69e2      	ldr	r2, [r4, #28]
 8004984:	0389      	lsls	r1, r1, #14
 8004986:	430a      	orrs	r2, r1
 8004988:	61e2      	str	r2, [r4, #28]
 800498a:	69e3      	ldr	r3, [r4, #28]
 800498c:	400b      	ands	r3, r1
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004992:	b008      	add	sp, #32
 8004994:	bd10      	pop	{r4, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	40005400 	.word	0x40005400
 800499c:	40021000 	.word	0x40021000
 80049a0:	48000400 	.word	0x48000400

080049a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a4:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a6:	2410      	movs	r4, #16
{
 80049a8:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049aa:	2230      	movs	r2, #48	; 0x30
 80049ac:	2100      	movs	r1, #0
 80049ae:	a808      	add	r0, sp, #32
 80049b0:	f000 fbbd 	bl	800512e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049b4:	0022      	movs	r2, r4
 80049b6:	2100      	movs	r1, #0
 80049b8:	4668      	mov	r0, sp
 80049ba:	f000 fbb8 	bl	800512e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049be:	0022      	movs	r2, r4
 80049c0:	2100      	movs	r1, #0
 80049c2:	a804      	add	r0, sp, #16
 80049c4:	f000 fbb3 	bl	800512e <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80049c8:	2312      	movs	r3, #18
 80049ca:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80049cc:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049ce:	2501      	movs	r5, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049d0:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80049d2:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80049d4:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049d6:	3c0e      	subs	r4, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049d8:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049da:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80049dc:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049de:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80049e0:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049e2:	f7fe fc27 	bl	8003234 <HAL_RCC_OscConfig>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d000      	beq.n	80049ec <SystemClock_Config+0x48>
 80049ea:	e7fe      	b.n	80049ea <SystemClock_Config+0x46>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ec:	2307      	movs	r3, #7
							  |RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049ee:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049f0:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80049f2:	0029      	movs	r1, r5
 80049f4:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049f6:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049f8:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80049fa:	f7fe fe2f 	bl	800365c <HAL_RCC_ClockConfig>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d000      	beq.n	8004a04 <SystemClock_Config+0x60>
 8004a02:	e7fe      	b.n	8004a02 <SystemClock_Config+0x5e>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004a04:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a06:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004a08:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a0a:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004a0c:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a0e:	f7fe fed1 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d000      	beq.n	8004a18 <SystemClock_Config+0x74>
 8004a16:	e7fe      	b.n	8004a16 <SystemClock_Config+0x72>
	{
		Error_Handler();
	}
}
 8004a18:	b015      	add	sp, #84	; 0x54
 8004a1a:	bd30      	pop	{r4, r5, pc}

08004a1c <main>:
	waveform_frequency = WAVEFORM_FREQ_HZ;
 8004a1c:	2232      	movs	r2, #50	; 0x32
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <main+0x8c>)
{
 8004a20:	b510      	push	{r4, lr}
	waveform_frequency = WAVEFORM_FREQ_HZ;
 8004a22:	801a      	strh	r2, [r3, #0]
	waveform_maxSwitches = WAVEFORM_MAX_COUNT;
 8004a24:	22fa      	movs	r2, #250	; 0xfa
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <main+0x90>)
 8004a28:	0092      	lsls	r2, r2, #2
 8004a2a:	601a      	str	r2, [r3, #0]
	waveformU_switchCount = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <main+0x94>)
 8004a30:	6013      	str	r3, [r2, #0]
	waveformV_switchCount = 0;
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <main+0x98>)
 8004a34:	6013      	str	r3, [r2, #0]
	waveformW_switchCount = 0;
 8004a36:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <main+0x9c>)
 8004a38:	6013      	str	r3, [r2, #0]
	phaseU_low_state = switchOff;
 8004a3a:	4a20      	ldr	r2, [pc, #128]	; (8004abc <main+0xa0>)
 8004a3c:	7013      	strb	r3, [r2, #0]
	phaseW_low_state = switchOff;
 8004a3e:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <main+0xa4>)
 8004a40:	7013      	strb	r3, [r2, #0]
	phaseV_low_state = switchOff;
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <main+0xa8>)
 8004a44:	7013      	strb	r3, [r2, #0]
	phaseU_high_state = switchOff;
 8004a46:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <main+0xac>)
 8004a48:	7013      	strb	r3, [r2, #0]
	phaseW_high_state = switchOff;
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <main+0xb0>)
 8004a4c:	7013      	strb	r3, [r2, #0]
	phaseV_high_state = switchOff;
 8004a4e:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <main+0xb4>)
 8004a50:	7013      	strb	r3, [r2, #0]
	waveformU_state = waveform_running;
 8004a52:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <main+0xb8>)
 8004a54:	3301      	adds	r3, #1
 8004a56:	7013      	strb	r3, [r2, #0]
	waveformV_state = waveform_running;
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <main+0xbc>)
 8004a5a:	7013      	strb	r3, [r2, #0]
	waveformW_state = waveform_running;
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <main+0xc0>)
 8004a5e:	7013      	strb	r3, [r2, #0]
	waveformAmplitude = TIM_PERIOD / 2;
 8004a60:	22c8      	movs	r2, #200	; 0xc8
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <main+0xc4>)
 8004a64:	0052      	lsls	r2, r2, #1
 8004a66:	801a      	strh	r2, [r3, #0]
	Create_SineTable();
 8004a68:	f7ff fece 	bl	8004808 <Create_SineTable>
	HAL_Init();
 8004a6c:	f7fd fe7c 	bl	8002768 <HAL_Init>
	SystemClock_Config();
 8004a70:	f7ff ff98 	bl	80049a4 <SystemClock_Config>
	MX_GPIO_Init();
 8004a74:	f7ff ff02 	bl	800487c <MX_GPIO_Init>
	MX_DMA_Init();
 8004a78:	f7ff feea 	bl	8004850 <MX_DMA_Init>
	MX_ADC_Init();
 8004a7c:	f7ff fcc8 	bl	8004410 <MX_ADC_Init>
	MX_I2C1_Init();
 8004a80:	f7ff ff2c 	bl	80048dc <MX_I2C1_Init>
	MX_TIM1_Init();
 8004a84:	f000 f9b0 	bl	8004de8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8004a88:	f000 fa28 	bl	8004edc <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8004a8c:	f000 faa2 	bl	8004fd4 <MX_USART1_UART_Init>
	MX_TIM15_Init();
 8004a90:	f000 f8ac 	bl	8004bec <MX_TIM15_Init>
	if(HAL_ADC_Start_DMA(&hadc, adc_buffer, NUM_ADC_CHANNEL) != HAL_OK)
 8004a94:	2207      	movs	r2, #7
 8004a96:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <main+0xc8>)
 8004a98:	4813      	ldr	r0, [pc, #76]	; (8004ae8 <main+0xcc>)
 8004a9a:	f7fd ff75 	bl	8002988 <HAL_ADC_Start_DMA>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d000      	beq.n	8004aa4 <main+0x88>
 8004aa2:	e7fe      	b.n	8004aa2 <main+0x86>
 8004aa4:	e7fe      	b.n	8004aa4 <main+0x88>
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	2000002c 	.word	0x2000002c
 8004aac:	20000030 	.word	0x20000030
 8004ab0:	2000003c 	.word	0x2000003c
 8004ab4:	2000005c 	.word	0x2000005c
 8004ab8:	200000a8 	.word	0x200000a8
 8004abc:	20000024 	.word	0x20000024
 8004ac0:	20000028 	.word	0x20000028
 8004ac4:	20000038 	.word	0x20000038
 8004ac8:	20000034 	.word	0x20000034
 8004acc:	20000060 	.word	0x20000060
 8004ad0:	20001098 	.word	0x20001098
 8004ad4:	20000035 	.word	0x20000035
 8004ad8:	2000002a 	.word	0x2000002a
 8004adc:	20000029 	.word	0x20000029
 8004ae0:	20000026 	.word	0x20000026
 8004ae4:	20000040 	.word	0x20000040
 8004ae8:	200000ac 	.word	0x200000ac

08004aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aec:	e7fe      	b.n	8004aec <Error_Handler>
	...

08004af0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af0:	2001      	movs	r0, #1
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_MspInit+0x2c>)
{
 8004af4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	6999      	ldr	r1, [r3, #24]
 8004af8:	4301      	orrs	r1, r0
 8004afa:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b02:	4002      	ands	r2, r0
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	61da      	str	r2, [r3, #28]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	400b      	ands	r3, r1
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b16:	b002      	add	sp, #8
 8004b18:	4770      	bx	lr
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	40021000 	.word	0x40021000

08004b20 <NMI_Handler>:
 8004b20:	4770      	bx	lr

08004b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b22:	e7fe      	b.n	8004b22 <HardFault_Handler>

08004b24 <SVC_Handler>:
 8004b24:	4770      	bx	lr

08004b26 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b26:	4770      	bx	lr

08004b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b2a:	f7fd fe2d 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004b32:	4802      	ldr	r0, [pc, #8]	; (8004b3c <DMA1_Channel1_IRQHandler+0xc>)
 8004b34:	f7fe f9e4 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	20000064 	.word	0x20000064

08004b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b42:	4802      	ldr	r0, [pc, #8]	; (8004b4c <USART1_IRQHandler+0xc>)
 8004b44:	f7ff fb84 	bl	8004250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	200011a8 	.word	0x200011a8

08004b50 <TIM3_IRQHandler>:
// Interrupt handler
void TIM3_IRQHandler(void)
{

	// Check for CC1 interrupt
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8004b50:	2202      	movs	r2, #2
{
 8004b52:	b510      	push	{r4, lr}
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8004b54:	4c08      	ldr	r4, [pc, #32]	; (8004b78 <TIM3_IRQHandler+0x28>)
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	6919      	ldr	r1, [r3, #16]
 8004b5a:	4211      	tst	r1, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM3_IRQHandler+0x26>
	{
		if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) !=RESET)
 8004b5e:	68d9      	ldr	r1, [r3, #12]
 8004b60:	4211      	tst	r1, r2
 8004b62:	d008      	beq.n	8004b76 <TIM3_IRQHandler+0x26>
		{
			// Clear the interrupt
		    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 8004b64:	3a05      	subs	r2, #5
 8004b66:	611a      	str	r2, [r3, #16]
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b68:	2301      	movs	r3, #1

		    UpdateWaveform(phase_U);
 8004b6a:	2000      	movs	r0, #0
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6c:	7723      	strb	r3, [r4, #28]
		    UpdateWaveform(phase_U);
 8004b6e:	f7ff fcd3 	bl	8004518 <UpdateWaveform>

			htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	2300      	movs	r3, #0
 8004b74:	7723      	strb	r3, [r4, #28]
		}
	}

}
 8004b76:	bd10      	pop	{r4, pc}
 8004b78:	20001128 	.word	0x20001128

08004b7c <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8004b7c:	b510      	push	{r4, lr}
	HAL_ADC_IRQHandler(&hadc);
 8004b7e:	4802      	ldr	r0, [pc, #8]	; (8004b88 <ADC1_IRQHandler+0xc>)
 8004b80:	f7fd ff9c 	bl	8002abc <HAL_ADC_IRQHandler>
}
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	200000ac 	.word	0x200000ac

08004b8c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004b90:	4811      	ldr	r0, [pc, #68]	; (8004bd8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	4002      	ands	r2, r0
 8004b9c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	480e      	ldr	r0, [pc, #56]	; (8004bdc <SystemInit+0x50>)
 8004ba2:	4002      	ands	r2, r0
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	480d      	ldr	r0, [pc, #52]	; (8004be0 <SystemInit+0x54>)
 8004baa:	4002      	ands	r2, r0
 8004bac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	480c      	ldr	r0, [pc, #48]	; (8004be4 <SystemInit+0x58>)
 8004bb2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004bb4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004bb6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	4382      	bics	r2, r0
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8004bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc0:	4809      	ldr	r0, [pc, #36]	; (8004be8 <SystemInit+0x5c>)
 8004bc2:	4002      	ands	r2, r0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc8:	438a      	bics	r2, r1
 8004bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]

}
 8004bd0:	4770      	bx	lr
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08ffb80c 	.word	0x08ffb80c
 8004bdc:	fef6ffff 	.word	0xfef6ffff
 8004be0:	fffbffff 	.word	0xfffbffff
 8004be4:	ffc0ffff 	.word	0xffc0ffff
 8004be8:	fffffeec 	.word	0xfffffeec

08004bec <MX_TIM15_Init>:
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004bec:	b530      	push	{r4, r5, lr}
 8004bee:	b093      	sub	sp, #76	; 0x4c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	a802      	add	r0, sp, #8
 8004bf6:	f000 fa9a 	bl	800512e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004bfa:	221c      	movs	r2, #28
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	a804      	add	r0, sp, #16
 8004c00:	f000 fa95 	bl	800512e <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c04:	221c      	movs	r2, #28
 8004c06:	2100      	movs	r1, #0
 8004c08:	a80b      	add	r0, sp, #44	; 0x2c
 8004c0a:	f000 fa90 	bl	800512e <memset>

	htim15.Instance = TIM15;
 8004c0e:	4d2b      	ldr	r5, [pc, #172]	; (8004cbc <MX_TIM15_Init+0xd0>)
 8004c10:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <MX_TIM15_Init+0xd4>)
	htim15.Init.Prescaler = 0;
 8004c12:	2400      	movs	r4, #0
	htim15.Instance = TIM15;
 8004c14:	602b      	str	r3, [r5, #0]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim15.Init.Period = 1000;
 8004c16:	23fa      	movs	r3, #250	; 0xfa
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim15.Init.RepetitionCounter = 0;
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8004c18:	0028      	movs	r0, r5
	htim15.Init.Period = 1000;
 8004c1a:	009b      	lsls	r3, r3, #2
	htim15.Init.Prescaler = 0;
 8004c1c:	606c      	str	r4, [r5, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1e:	60ac      	str	r4, [r5, #8]
	htim15.Init.Period = 1000;
 8004c20:	60eb      	str	r3, [r5, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c22:	612c      	str	r4, [r5, #16]
	htim15.Init.RepetitionCounter = 0;
 8004c24:	616c      	str	r4, [r5, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c26:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8004c28:	f7fe ff52 	bl	8003ad0 <HAL_TIM_OC_Init>
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d001      	beq.n	8004c34 <MX_TIM15_Init+0x48>
	{
		Error_Handler();
 8004c30:	f7ff ff5c 	bl	8004aec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004c34:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004c36:	a902      	add	r1, sp, #8
 8004c38:	0028      	movs	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c3a:	9402      	str	r4, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004c3c:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004c3e:	f7ff f8cf 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d001      	beq.n	8004c4a <MX_TIM15_Init+0x5e>
	{
		Error_Handler();
 8004c46:	f7ff ff51 	bl	8004aec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004c4a:	2400      	movs	r4, #0
	sConfigOC.Pulse = 500;
 8004c4c:	23fa      	movs	r3, #250	; 0xfa
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c4e:	0022      	movs	r2, r4
	sConfigOC.Pulse = 500;
 8004c50:	005b      	lsls	r3, r3, #1
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c52:	a904      	add	r1, sp, #16
 8004c54:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004c56:	9404      	str	r4, [sp, #16]
	sConfigOC.Pulse = 500;
 8004c58:	9305      	str	r3, [sp, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c5a:	9406      	str	r4, [sp, #24]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c5c:	9407      	str	r4, [sp, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c5e:	9408      	str	r4, [sp, #32]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c60:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c62:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c64:	f7fe ffaa 	bl	8003bbc <HAL_TIM_OC_ConfigChannel>
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d001      	beq.n	8004c70 <MX_TIM15_Init+0x84>
	{
		Error_Handler();
 8004c6c:	f7ff ff3e 	bl	8004aec <Error_Handler>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c70:	2380      	movs	r3, #128	; 0x80
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004c72:	a90b      	add	r1, sp, #44	; 0x2c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c74:	019b      	lsls	r3, r3, #6
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004c76:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c78:	940b      	str	r4, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c7a:	940c      	str	r4, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c7c:	940d      	str	r4, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.DeadTime = 0;
 8004c7e:	940e      	str	r4, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c80:	940f      	str	r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c82:	9310      	str	r3, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c84:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004c86:	f7ff f8cd 	bl	8003e24 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d001      	beq.n	8004c92 <MX_TIM15_Init+0xa6>
	{
		Error_Handler();
 8004c8e:	f7ff ff2d 	bl	8004aec <Error_Handler>
	}

	// Enable clock tree
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004c92:	2080      	movs	r0, #128	; 0x80
 8004c94:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <MX_TIM15_Init+0xd8>)
 8004c96:	0240      	lsls	r0, r0, #9
 8004c98:	6991      	ldr	r1, [r2, #24]
 8004c9a:	4301      	orrs	r1, r0
 8004c9c:	6191      	str	r1, [r2, #24]
 8004c9e:	6993      	ldr	r3, [r2, #24]

	// Start Waveform
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004ca0:	2100      	movs	r1, #0
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004ca2:	4003      	ands	r3, r0
 8004ca4:	9301      	str	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004ca6:	0028      	movs	r0, r5
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004ca8:	9b01      	ldr	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004caa:	f7ff f851 	bl	8003d50 <HAL_TIM_OC_Start>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_TIM15_Init+0xca>
	{
		Error_Handler();
 8004cb2:	f7ff ff1b 	bl	8004aec <Error_Handler>
	}
}
 8004cb6:	b013      	add	sp, #76	; 0x4c
 8004cb8:	bd30      	pop	{r4, r5, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	200010e8 	.word	0x200010e8
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8004cc8:	6803      	ldr	r3, [r0, #0]
 8004cca:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <HAL_TIM_PWM_MspInit+0x3c>)
{
 8004ccc:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10b      	bne.n	8004cea <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cd2:	2080      	movs	r0, #128	; 0x80
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <HAL_TIM_PWM_MspInit+0x40>)
 8004cd6:	0100      	lsls	r0, r0, #4
 8004cd8:	6991      	ldr	r1, [r2, #24]
 8004cda:	4301      	orrs	r1, r0
 8004cdc:	6191      	str	r1, [r2, #24]
 8004cde:	6993      	ldr	r3, [r2, #24]
 8004ce0:	4003      	ands	r3, r0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004ce6:	b002      	add	sp, #8
 8004ce8:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <HAL_TIM_PWM_MspInit+0x44>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d1fa      	bne.n	8004ce6 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cf0:	2002      	movs	r0, #2
 8004cf2:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <HAL_TIM_PWM_MspInit+0x40>)
 8004cf4:	69d1      	ldr	r1, [r2, #28]
 8004cf6:	4301      	orrs	r1, r0
 8004cf8:	61d1      	str	r1, [r2, #28]
 8004cfa:	69d3      	ldr	r3, [r2, #28]
 8004cfc:	4003      	ands	r3, r0
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9b01      	ldr	r3, [sp, #4]
}
 8004d02:	e7f0      	b.n	8004ce6 <HAL_TIM_PWM_MspInit+0x1e>
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40000400 	.word	0x40000400

08004d10 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM15)
 8004d10:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <HAL_TIM_OC_MspInit+0x24>)
 8004d12:	6802      	ldr	r2, [r0, #0]
{
 8004d14:	b082      	sub	sp, #8
  if(tim_ocHandle->Instance==TIM15)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d109      	bne.n	8004d2e <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d1a:	2080      	movs	r0, #128	; 0x80
 8004d1c:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <HAL_TIM_OC_MspInit+0x28>)
 8004d1e:	0240      	lsls	r0, r0, #9
 8004d20:	6991      	ldr	r1, [r2, #24]
 8004d22:	4301      	orrs	r1, r0
 8004d24:	6191      	str	r1, [r2, #24]
 8004d26:	6993      	ldr	r3, [r2, #24]
 8004d28:	4003      	ands	r3, r0
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004d2e:	b002      	add	sp, #8
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40021000 	.word	0x40021000

08004d3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	0004      	movs	r4, r0
 8004d40:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d42:	2214      	movs	r2, #20
 8004d44:	2100      	movs	r1, #0
 8004d46:	a803      	add	r0, sp, #12
 8004d48:	f000 f9f1 	bl	800512e <memset>
  if(timHandle->Instance==TIM1)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <HAL_TIM_MspPostInit+0x98>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d116      	bne.n	8004d82 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d54:	2080      	movs	r0, #128	; 0x80
 8004d56:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <HAL_TIM_MspPostInit+0x9c>)
 8004d58:	0280      	lsls	r0, r0, #10
 8004d5a:	6951      	ldr	r1, [r2, #20]
 8004d5c:	4301      	orrs	r1, r0
 8004d5e:	6151      	str	r1, [r2, #20]
 8004d60:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d62:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d64:	4003      	ands	r3, r0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
 8004d6a:	23e0      	movs	r3, #224	; 0xe0
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d70:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d74:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004d78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d7a:	f7fe f90b 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d7e:	b008      	add	sp, #32
 8004d80:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <HAL_TIM_MspPostInit+0xa0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d1fa      	bne.n	8004d7e <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d88:	2080      	movs	r0, #128	; 0x80
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <HAL_TIM_MspPostInit+0x9c>)
 8004d8c:	02c0      	lsls	r0, r0, #11
 8004d8e:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	4301      	orrs	r1, r0
 8004d94:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d96:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d98:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d9a:	0309      	lsls	r1, r1, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9c:	4002      	ands	r2, r0
 8004d9e:	9201      	str	r2, [sp, #4]
 8004da0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004da2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004da4:	480e      	ldr	r0, [pc, #56]	; (8004de0 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004da6:	430a      	orrs	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]
 8004daa:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dae:	400b      	ands	r3, r1
 8004db0:	9302      	str	r3, [sp, #8]
 8004db2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004db4:	2301      	movs	r3, #1
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004db6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004db8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004dba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004dbc:	f7fe f8ea 	bl	8002f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 8004dc0:	23c0      	movs	r3, #192	; 0xc0
 8004dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004dcc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dce:	a903      	add	r1, sp, #12
 8004dd0:	4804      	ldr	r0, [pc, #16]	; (8004de4 <HAL_TIM_MspPostInit+0xa8>)
 8004dd2:	e7d2      	b.n	8004d7a <HAL_TIM_MspPostInit+0x3e>
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	48000400 	.word	0x48000400
 8004de4:	48000800 	.word	0x48000800

08004de8 <MX_TIM1_Init>:
{
 8004de8:	b530      	push	{r4, r5, lr}
 8004dea:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dec:	2208      	movs	r2, #8
 8004dee:	2100      	movs	r1, #0
 8004df0:	a801      	add	r0, sp, #4
 8004df2:	f000 f99c 	bl	800512e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004df6:	221c      	movs	r2, #28
 8004df8:	2100      	movs	r1, #0
 8004dfa:	a803      	add	r0, sp, #12
 8004dfc:	f000 f997 	bl	800512e <memset>
	htim1.Instance = TIM1;
 8004e00:	4c33      	ldr	r4, [pc, #204]	; (8004ed0 <MX_TIM1_Init+0xe8>)
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <MX_TIM1_Init+0xec>)
	htim1.Init.Prescaler = 0;
 8004e04:	2500      	movs	r5, #0
	htim1.Instance = TIM1;
 8004e06:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = TIM_PERIOD;
 8004e08:	23c8      	movs	r3, #200	; 0xc8
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	60e3      	str	r3, [r4, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e0e:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e10:	0020      	movs	r0, r4
	htim1.Init.Prescaler = 0;
 8004e12:	6065      	str	r5, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e14:	60a5      	str	r5, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e16:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8004e18:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e1a:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e1c:	f7fe fe73 	bl	8003b06 <HAL_TIM_PWM_Init>
 8004e20:	42a8      	cmp	r0, r5
 8004e22:	d001      	beq.n	8004e28 <MX_TIM1_Init+0x40>
		Error_Handler();
 8004e24:	f7ff fe62 	bl	8004aec <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e28:	a901      	add	r1, sp, #4
 8004e2a:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e2c:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e2e:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e30:	f7fe ffd6 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM1_Init+0x54>
		Error_Handler();
 8004e38:	f7ff fe58 	bl	8004aec <Error_Handler>
	sConfigOC.Pulse = 0;
 8004e3c:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e3e:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e40:	a903      	add	r1, sp, #12
 8004e42:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e44:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8004e46:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e48:	9205      	str	r2, [sp, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e4a:	9206      	str	r2, [sp, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e4c:	9207      	str	r2, [sp, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e4e:	9208      	str	r2, [sp, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e50:	9209      	str	r2, [sp, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e52:	f7fe fee1 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d001      	beq.n	8004e5e <MX_TIM1_Init+0x76>
		Error_Handler();
 8004e5a:	f7ff fe47 	bl	8004aec <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e5e:	2204      	movs	r2, #4
 8004e60:	a903      	add	r1, sp, #12
 8004e62:	0020      	movs	r0, r4
 8004e64:	f7fe fed8 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM1_Init+0x88>
		Error_Handler();
 8004e6c:	f7ff fe3e 	bl	8004aec <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e70:	2208      	movs	r2, #8
 8004e72:	a903      	add	r1, sp, #12
 8004e74:	0020      	movs	r0, r4
 8004e76:	f7fe fecf 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d001      	beq.n	8004e82 <MX_TIM1_Init+0x9a>
		Error_Handler();
 8004e7e:	f7ff fe35 	bl	8004aec <Error_Handler>
	HAL_TIM_MspPostInit(&htim1);
 8004e82:	0020      	movs	r0, r4
 8004e84:	f7ff ff5a 	bl	8004d3c <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004e88:	2080      	movs	r0, #128	; 0x80
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <MX_TIM1_Init+0xf0>)
 8004e8c:	0100      	lsls	r0, r0, #4
 8004e8e:	6991      	ldr	r1, [r2, #24]
 8004e90:	4301      	orrs	r1, r0
 8004e92:	6191      	str	r1, [r2, #24]
 8004e94:	6993      	ldr	r3, [r2, #24]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004e96:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004e98:	4003      	ands	r3, r0
 8004e9a:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004e9c:	0020      	movs	r0, r4
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004e9e:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004ea0:	f7fe ff30 	bl	8003d04 <HAL_TIM_PWM_Start>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d001      	beq.n	8004eac <MX_TIM1_Init+0xc4>
		Error_Handler();
 8004ea8:	f7ff fe20 	bl	8004aec <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8004eac:	2104      	movs	r1, #4
 8004eae:	0020      	movs	r0, r4
 8004eb0:	f7fe ff28 	bl	8003d04 <HAL_TIM_PWM_Start>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_TIM1_Init+0xd4>
		Error_Handler();
 8004eb8:	f7ff fe18 	bl	8004aec <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	0020      	movs	r0, r4
 8004ec0:	f7fe ff20 	bl	8003d04 <HAL_TIM_PWM_Start>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_TIM1_Init+0xe4>
		Error_Handler();
 8004ec8:	f7ff fe10 	bl	8004aec <Error_Handler>
}
 8004ecc:	b00b      	add	sp, #44	; 0x2c
 8004ece:	bd30      	pop	{r4, r5, pc}
 8004ed0:	20001168 	.word	0x20001168
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40021000 	.word	0x40021000

08004edc <MX_TIM3_Init>:
{
 8004edc:	b530      	push	{r4, r5, lr}
 8004ede:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	a801      	add	r0, sp, #4
 8004ee6:	f000 f922 	bl	800512e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004eea:	221c      	movs	r2, #28
 8004eec:	2100      	movs	r1, #0
 8004eee:	a803      	add	r0, sp, #12
 8004ef0:	f000 f91d 	bl	800512e <memset>
	htim3.Instance = TIM3;
 8004ef4:	4c34      	ldr	r4, [pc, #208]	; (8004fc8 <MX_TIM3_Init+0xec>)
 8004ef6:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <MX_TIM3_Init+0xf0>)
	htim3.Init.Prescaler = 0;
 8004ef8:	2500      	movs	r5, #0
	htim3.Instance = TIM3;
 8004efa:	6023      	str	r3, [r4, #0]
	htim3.Init.Period = TIM_PERIOD;
 8004efc:	23c8      	movs	r3, #200	; 0xc8
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004efe:	0020      	movs	r0, r4
	htim3.Init.Period = TIM_PERIOD;
 8004f00:	009b      	lsls	r3, r3, #2
	htim3.Init.Prescaler = 0;
 8004f02:	6065      	str	r5, [r4, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f04:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = TIM_PERIOD;
 8004f06:	60e3      	str	r3, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f08:	6125      	str	r5, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0a:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f0c:	f7fe fdfb 	bl	8003b06 <HAL_TIM_PWM_Init>
 8004f10:	42a8      	cmp	r0, r5
 8004f12:	d001      	beq.n	8004f18 <MX_TIM3_Init+0x3c>
		Error_Handler();
 8004f14:	f7ff fdea 	bl	8004aec <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f18:	a901      	add	r1, sp, #4
 8004f1a:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f1c:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f1e:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f20:	f7fe ff5e 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d001      	beq.n	8004f2c <MX_TIM3_Init+0x50>
		Error_Handler();
 8004f28:	f7ff fde0 	bl	8004aec <Error_Handler>
	sConfigOC.Pulse = 0;
 8004f2c:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f2e:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f30:	a903      	add	r1, sp, #12
 8004f32:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f34:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8004f36:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f38:	9205      	str	r2, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f3a:	9207      	str	r2, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f3c:	f7fe fe6c 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d001      	beq.n	8004f48 <MX_TIM3_Init+0x6c>
		Error_Handler();
 8004f44:	f7ff fdd2 	bl	8004aec <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f48:	2204      	movs	r2, #4
 8004f4a:	a903      	add	r1, sp, #12
 8004f4c:	0020      	movs	r0, r4
 8004f4e:	f7fe fe63 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM3_Init+0x7e>
		Error_Handler();
 8004f56:	f7ff fdc9 	bl	8004aec <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	a903      	add	r1, sp, #12
 8004f5e:	0020      	movs	r0, r4
 8004f60:	f7fe fe5a 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d001      	beq.n	8004f6c <MX_TIM3_Init+0x90>
		Error_Handler();
 8004f68:	f7ff fdc0 	bl	8004aec <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8004f6c:	0020      	movs	r0, r4
 8004f6e:	f7ff fee5 	bl	8004d3c <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004f72:	2002      	movs	r0, #2
 8004f74:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <MX_TIM3_Init+0xf4>)
 8004f76:	69d1      	ldr	r1, [r2, #28]
 8004f78:	4301      	orrs	r1, r0
 8004f7a:	61d1      	str	r1, [r2, #28]
 8004f7c:	69d3      	ldr	r3, [r2, #28]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8004f7e:	2100      	movs	r1, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004f80:	4003      	ands	r3, r0
 8004f82:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8004f84:	0020      	movs	r0, r4
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004f86:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8004f88:	f7fe fee6 	bl	8003d58 <HAL_TIM_PWM_Start_IT>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM3_Init+0xb8>
		Error_Handler();
 8004f90:	f7ff fdac 	bl	8004aec <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8004f94:	2104      	movs	r1, #4
 8004f96:	0020      	movs	r0, r4
 8004f98:	f7fe feb4 	bl	8003d04 <HAL_TIM_PWM_Start>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_TIM3_Init+0xc8>
		Error_Handler();
 8004fa0:	f7ff fda4 	bl	8004aec <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8004fa4:	2108      	movs	r1, #8
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f7fe feac 	bl	8003d04 <HAL_TIM_PWM_Start>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM3_Init+0xd8>
		Error_Handler();
 8004fb0:	f7ff fd9c 	bl	8004aec <Error_Handler>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	0011      	movs	r1, r2
 8004fba:	f7fd feb9 	bl	8002d30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004fbe:	2010      	movs	r0, #16
 8004fc0:	f7fd fee6 	bl	8002d90 <HAL_NVIC_EnableIRQ>
}
 8004fc4:	b00b      	add	sp, #44	; 0x2c
 8004fc6:	bd30      	pop	{r4, r5, pc}
 8004fc8:	20001128 	.word	0x20001128
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8004fd4:	480b      	ldr	r0, [pc, #44]	; (8005004 <MX_USART1_UART_Init+0x30>)
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <MX_USART1_UART_Init+0x34>)
{
 8004fd8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8004fda:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8004fdc:	2396      	movs	r3, #150	; 0x96
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fe2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fe6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fec:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ff0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ff2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ff4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ff6:	f7ff f871 	bl	80040dc <HAL_UART_Init>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d001      	beq.n	8005002 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8004ffe:	f7ff fd75 	bl	8004aec <Error_Handler>
  }

}
 8005002:	bd10      	pop	{r4, pc}
 8005004:	200011a8 	.word	0x200011a8
 8005008:	40013800 	.word	0x40013800

0800500c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800500c:	b510      	push	{r4, lr}
 800500e:	0004      	movs	r4, r0
 8005010:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005012:	2214      	movs	r2, #20
 8005014:	2100      	movs	r1, #0
 8005016:	a803      	add	r0, sp, #12
 8005018:	f000 f889 	bl	800512e <memset>
  if(uartHandle->Instance==USART1)
 800501c:	4b15      	ldr	r3, [pc, #84]	; (8005074 <HAL_UART_MspInit+0x68>)
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d124      	bne.n	800506e <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005024:	2080      	movs	r0, #128	; 0x80
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <HAL_UART_MspInit+0x6c>)
 8005028:	01c0      	lsls	r0, r0, #7
 800502a:	6999      	ldr	r1, [r3, #24]
 800502c:	4301      	orrs	r1, r0
 800502e:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005030:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8005032:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005034:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 8005036:	4002      	ands	r2, r0
 8005038:	9201      	str	r2, [sp, #4]
 800503a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800503c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503e:	480f      	ldr	r0, [pc, #60]	; (800507c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005040:	430a      	orrs	r2, r1
 8005042:	615a      	str	r2, [r3, #20]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	400b      	ands	r3, r1
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800504c:	23c0      	movs	r3, #192	; 0xc0
 800504e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005050:	3bbe      	subs	r3, #190	; 0xbe
 8005052:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005054:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005056:	3301      	adds	r3, #1
 8005058:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505a:	f7fd ff9b 	bl	8002f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800505e:	2200      	movs	r2, #0
 8005060:	201b      	movs	r0, #27
 8005062:	0011      	movs	r1, r2
 8005064:	f7fd fe64 	bl	8002d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005068:	201b      	movs	r0, #27
 800506a:	f7fd fe91 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800506e:	b008      	add	sp, #32
 8005070:	bd10      	pop	{r4, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	40013800 	.word	0x40013800
 8005078:	40021000 	.word	0x40021000
 800507c:	48000400 	.word	0x48000400

08005080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005080:	480d      	ldr	r0, [pc, #52]	; (80050b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005084:	480d      	ldr	r0, [pc, #52]	; (80050bc <LoopForever+0x6>)
  ldr r1, =_edata
 8005086:	490e      	ldr	r1, [pc, #56]	; (80050c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <LoopForever+0xe>)
  movs r3, #0
 800508a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800508c:	e002      	b.n	8005094 <LoopCopyDataInit>

0800508e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800508e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005092:	3304      	adds	r3, #4

08005094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005098:	d3f9      	bcc.n	800508e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509a:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800509c:	4c0b      	ldr	r4, [pc, #44]	; (80050cc <LoopForever+0x16>)
  movs r3, #0
 800509e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a0:	e001      	b.n	80050a6 <LoopFillZerobss>

080050a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a4:	3204      	adds	r2, #4

080050a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050a8:	d3fb      	bcc.n	80050a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80050aa:	f7ff fd6f 	bl	8004b8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80050ae:	f000 f811 	bl	80050d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050b2:	f7ff fcb3 	bl	8004a1c <main>

080050b6 <LoopForever>:

LoopForever:
    b LoopForever
 80050b6:	e7fe      	b.n	80050b6 <LoopForever>
  ldr   r0, =_estack
 80050b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80050c4:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 80050c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80050cc:	20001218 	.word	0x20001218

080050d0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050d0:	e7fe      	b.n	80050d0 <DMA1_Channel2_3_IRQHandler>
	...

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	2600      	movs	r6, #0
 80050d8:	4d0c      	ldr	r5, [pc, #48]	; (800510c <__libc_init_array+0x38>)
 80050da:	4c0d      	ldr	r4, [pc, #52]	; (8005110 <__libc_init_array+0x3c>)
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	2600      	movs	r6, #0
 80050e6:	f000 f82b 	bl	8005140 <_init>
 80050ea:	4d0a      	ldr	r5, [pc, #40]	; (8005114 <__libc_init_array+0x40>)
 80050ec:	4c0a      	ldr	r4, [pc, #40]	; (8005118 <__libc_init_array+0x44>)
 80050ee:	1b64      	subs	r4, r4, r5
 80050f0:	10a4      	asrs	r4, r4, #2
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	00b3      	lsls	r3, r6, #2
 80050fa:	58eb      	ldr	r3, [r5, r3]
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	00b3      	lsls	r3, r6, #2
 8005104:	58eb      	ldr	r3, [r5, r3]
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	08005254 	.word	0x08005254
 8005110:	08005254 	.word	0x08005254
 8005114:	08005254 	.word	0x08005254
 8005118:	08005258 	.word	0x08005258

0800511c <memcpy>:
 800511c:	2300      	movs	r3, #0
 800511e:	b510      	push	{r4, lr}
 8005120:	429a      	cmp	r2, r3
 8005122:	d100      	bne.n	8005126 <memcpy+0xa>
 8005124:	bd10      	pop	{r4, pc}
 8005126:	5ccc      	ldrb	r4, [r1, r3]
 8005128:	54c4      	strb	r4, [r0, r3]
 800512a:	3301      	adds	r3, #1
 800512c:	e7f8      	b.n	8005120 <memcpy+0x4>

0800512e <memset>:
 800512e:	0003      	movs	r3, r0
 8005130:	1882      	adds	r2, r0, r2
 8005132:	4293      	cmp	r3, r2
 8005134:	d100      	bne.n	8005138 <memset+0xa>
 8005136:	4770      	bx	lr
 8005138:	7019      	strb	r1, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	e7f9      	b.n	8005132 <memset+0x4>
	...

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
