
MotorDriver_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080052d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001214  20000004  080052dc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001218  080052dc  00021218  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002537b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e6d  00000000  00000000  000453a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b520  00000000  00000000  00049214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d00  00000000  00000000  00054738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001320  00000000  00000000  00055438  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008cfe  00000000  00000000  00056758  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000046cf  00000000  00000000  0005f456  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00063b25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b88  00000000  00000000  00063ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051bc 	.word	0x080051bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080051bc 	.word	0x080051bc

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 fb81 	bl	8001b34 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f001 fadb 	bl	80019f8 <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fb73 	bl	8001b34 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fb69 	bl	8001b34 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fafb 	bl	8001a6c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 faf1 	bl	8001a6c <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_cfrcmple>:
 8000498:	4684      	mov	ip, r0
 800049a:	1c08      	adds	r0, r1, #0
 800049c:	4661      	mov	r1, ip
 800049e:	e7ff      	b.n	80004a0 <__aeabi_cfcmpeq>

080004a0 <__aeabi_cfcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f000 f8b1 	bl	8000608 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cfcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_fcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f000 f843 	bl	800053c <__eqsf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_fcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f8a3 	bl	8000608 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_fcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f899 	bl	8000608 <__lesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_fcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 f84f 	bl	8000588 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_fcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 f845 	bl	8000588 <__gesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_fcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_f2uiz>:
 800050c:	219e      	movs	r1, #158	; 0x9e
 800050e:	b510      	push	{r4, lr}
 8000510:	05c9      	lsls	r1, r1, #23
 8000512:	1c04      	adds	r4, r0, #0
 8000514:	f7ff fff0 	bl	80004f8 <__aeabi_fcmpge>
 8000518:	2800      	cmp	r0, #0
 800051a:	d103      	bne.n	8000524 <__aeabi_f2uiz+0x18>
 800051c:	1c20      	adds	r0, r4, #0
 800051e:	f000 fb71 	bl	8000c04 <__aeabi_f2iz>
 8000522:	bd10      	pop	{r4, pc}
 8000524:	219e      	movs	r1, #158	; 0x9e
 8000526:	1c20      	adds	r0, r4, #0
 8000528:	05c9      	lsls	r1, r1, #23
 800052a:	f000 f9cf 	bl	80008cc <__aeabi_fsub>
 800052e:	f000 fb69 	bl	8000c04 <__aeabi_f2iz>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	061b      	lsls	r3, r3, #24
 8000536:	469c      	mov	ip, r3
 8000538:	4460      	add	r0, ip
 800053a:	e7f2      	b.n	8000522 <__aeabi_f2uiz+0x16>

0800053c <__eqsf2>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	0042      	lsls	r2, r0, #1
 8000540:	0245      	lsls	r5, r0, #9
 8000542:	024e      	lsls	r6, r1, #9
 8000544:	004c      	lsls	r4, r1, #1
 8000546:	0fc3      	lsrs	r3, r0, #31
 8000548:	0a6d      	lsrs	r5, r5, #9
 800054a:	0e12      	lsrs	r2, r2, #24
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	0e24      	lsrs	r4, r4, #24
 8000550:	0fc9      	lsrs	r1, r1, #31
 8000552:	2001      	movs	r0, #1
 8000554:	2aff      	cmp	r2, #255	; 0xff
 8000556:	d006      	beq.n	8000566 <__eqsf2+0x2a>
 8000558:	2cff      	cmp	r4, #255	; 0xff
 800055a:	d003      	beq.n	8000564 <__eqsf2+0x28>
 800055c:	42a2      	cmp	r2, r4
 800055e:	d101      	bne.n	8000564 <__eqsf2+0x28>
 8000560:	42b5      	cmp	r5, r6
 8000562:	d006      	beq.n	8000572 <__eqsf2+0x36>
 8000564:	bd70      	pop	{r4, r5, r6, pc}
 8000566:	2d00      	cmp	r5, #0
 8000568:	d1fc      	bne.n	8000564 <__eqsf2+0x28>
 800056a:	2cff      	cmp	r4, #255	; 0xff
 800056c:	d1fa      	bne.n	8000564 <__eqsf2+0x28>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__eqsf2+0x28>
 8000572:	428b      	cmp	r3, r1
 8000574:	d006      	beq.n	8000584 <__eqsf2+0x48>
 8000576:	2001      	movs	r0, #1
 8000578:	2a00      	cmp	r2, #0
 800057a:	d1f3      	bne.n	8000564 <__eqsf2+0x28>
 800057c:	0028      	movs	r0, r5
 800057e:	1e45      	subs	r5, r0, #1
 8000580:	41a8      	sbcs	r0, r5
 8000582:	e7ef      	b.n	8000564 <__eqsf2+0x28>
 8000584:	2000      	movs	r0, #0
 8000586:	e7ed      	b.n	8000564 <__eqsf2+0x28>

08000588 <__gesf2>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	0042      	lsls	r2, r0, #1
 800058c:	0245      	lsls	r5, r0, #9
 800058e:	024c      	lsls	r4, r1, #9
 8000590:	0fc3      	lsrs	r3, r0, #31
 8000592:	0048      	lsls	r0, r1, #1
 8000594:	0a6d      	lsrs	r5, r5, #9
 8000596:	0e12      	lsrs	r2, r2, #24
 8000598:	0a64      	lsrs	r4, r4, #9
 800059a:	0e00      	lsrs	r0, r0, #24
 800059c:	0fc9      	lsrs	r1, r1, #31
 800059e:	2aff      	cmp	r2, #255	; 0xff
 80005a0:	d01e      	beq.n	80005e0 <__gesf2+0x58>
 80005a2:	28ff      	cmp	r0, #255	; 0xff
 80005a4:	d021      	beq.n	80005ea <__gesf2+0x62>
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d10a      	bne.n	80005c0 <__gesf2+0x38>
 80005aa:	426e      	negs	r6, r5
 80005ac:	416e      	adcs	r6, r5
 80005ae:	b2f6      	uxtb	r6, r6
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d10f      	bne.n	80005d4 <__gesf2+0x4c>
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d10d      	bne.n	80005d4 <__gesf2+0x4c>
 80005b8:	2000      	movs	r0, #0
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d009      	beq.n	80005d2 <__gesf2+0x4a>
 80005be:	e005      	b.n	80005cc <__gesf2+0x44>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d101      	bne.n	80005c8 <__gesf2+0x40>
 80005c4:	2c00      	cmp	r4, #0
 80005c6:	d001      	beq.n	80005cc <__gesf2+0x44>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d011      	beq.n	80005f0 <__gesf2+0x68>
 80005cc:	2101      	movs	r1, #1
 80005ce:	4258      	negs	r0, r3
 80005d0:	4308      	orrs	r0, r1
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d0f7      	beq.n	80005c8 <__gesf2+0x40>
 80005d8:	2001      	movs	r0, #1
 80005da:	3901      	subs	r1, #1
 80005dc:	4308      	orrs	r0, r1
 80005de:	e7f8      	b.n	80005d2 <__gesf2+0x4a>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d0de      	beq.n	80005a2 <__gesf2+0x1a>
 80005e4:	2002      	movs	r0, #2
 80005e6:	4240      	negs	r0, r0
 80005e8:	e7f3      	b.n	80005d2 <__gesf2+0x4a>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d0db      	beq.n	80005a6 <__gesf2+0x1e>
 80005ee:	e7f9      	b.n	80005e4 <__gesf2+0x5c>
 80005f0:	4282      	cmp	r2, r0
 80005f2:	dceb      	bgt.n	80005cc <__gesf2+0x44>
 80005f4:	db04      	blt.n	8000600 <__gesf2+0x78>
 80005f6:	42a5      	cmp	r5, r4
 80005f8:	d8e8      	bhi.n	80005cc <__gesf2+0x44>
 80005fa:	2000      	movs	r0, #0
 80005fc:	42a5      	cmp	r5, r4
 80005fe:	d2e8      	bcs.n	80005d2 <__gesf2+0x4a>
 8000600:	2101      	movs	r1, #1
 8000602:	1e58      	subs	r0, r3, #1
 8000604:	4308      	orrs	r0, r1
 8000606:	e7e4      	b.n	80005d2 <__gesf2+0x4a>

08000608 <__lesf2>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	0042      	lsls	r2, r0, #1
 800060c:	024d      	lsls	r5, r1, #9
 800060e:	004c      	lsls	r4, r1, #1
 8000610:	0246      	lsls	r6, r0, #9
 8000612:	0a76      	lsrs	r6, r6, #9
 8000614:	0e12      	lsrs	r2, r2, #24
 8000616:	0fc3      	lsrs	r3, r0, #31
 8000618:	0a6d      	lsrs	r5, r5, #9
 800061a:	0e24      	lsrs	r4, r4, #24
 800061c:	0fc9      	lsrs	r1, r1, #31
 800061e:	2aff      	cmp	r2, #255	; 0xff
 8000620:	d016      	beq.n	8000650 <__lesf2+0x48>
 8000622:	2cff      	cmp	r4, #255	; 0xff
 8000624:	d018      	beq.n	8000658 <__lesf2+0x50>
 8000626:	2a00      	cmp	r2, #0
 8000628:	d10a      	bne.n	8000640 <__lesf2+0x38>
 800062a:	4270      	negs	r0, r6
 800062c:	4170      	adcs	r0, r6
 800062e:	b2c0      	uxtb	r0, r0
 8000630:	2c00      	cmp	r4, #0
 8000632:	d015      	beq.n	8000660 <__lesf2+0x58>
 8000634:	2800      	cmp	r0, #0
 8000636:	d005      	beq.n	8000644 <__lesf2+0x3c>
 8000638:	2001      	movs	r0, #1
 800063a:	3901      	subs	r1, #1
 800063c:	4308      	orrs	r0, r1
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000640:	2c00      	cmp	r4, #0
 8000642:	d013      	beq.n	800066c <__lesf2+0x64>
 8000644:	4299      	cmp	r1, r3
 8000646:	d014      	beq.n	8000672 <__lesf2+0x6a>
 8000648:	2001      	movs	r0, #1
 800064a:	425b      	negs	r3, r3
 800064c:	4318      	orrs	r0, r3
 800064e:	e7f6      	b.n	800063e <__lesf2+0x36>
 8000650:	2002      	movs	r0, #2
 8000652:	2e00      	cmp	r6, #0
 8000654:	d1f3      	bne.n	800063e <__lesf2+0x36>
 8000656:	e7e4      	b.n	8000622 <__lesf2+0x1a>
 8000658:	2002      	movs	r0, #2
 800065a:	2d00      	cmp	r5, #0
 800065c:	d1ef      	bne.n	800063e <__lesf2+0x36>
 800065e:	e7e2      	b.n	8000626 <__lesf2+0x1e>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d1e7      	bne.n	8000634 <__lesf2+0x2c>
 8000664:	2000      	movs	r0, #0
 8000666:	2e00      	cmp	r6, #0
 8000668:	d0e9      	beq.n	800063e <__lesf2+0x36>
 800066a:	e7ed      	b.n	8000648 <__lesf2+0x40>
 800066c:	2d00      	cmp	r5, #0
 800066e:	d1e9      	bne.n	8000644 <__lesf2+0x3c>
 8000670:	e7ea      	b.n	8000648 <__lesf2+0x40>
 8000672:	42a2      	cmp	r2, r4
 8000674:	dc06      	bgt.n	8000684 <__lesf2+0x7c>
 8000676:	dbdf      	blt.n	8000638 <__lesf2+0x30>
 8000678:	42ae      	cmp	r6, r5
 800067a:	d803      	bhi.n	8000684 <__lesf2+0x7c>
 800067c:	2000      	movs	r0, #0
 800067e:	42ae      	cmp	r6, r5
 8000680:	d3da      	bcc.n	8000638 <__lesf2+0x30>
 8000682:	e7dc      	b.n	800063e <__lesf2+0x36>
 8000684:	2001      	movs	r0, #1
 8000686:	4249      	negs	r1, r1
 8000688:	4308      	orrs	r0, r1
 800068a:	e7d8      	b.n	800063e <__lesf2+0x36>

0800068c <__aeabi_fmul>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	4657      	mov	r7, sl
 8000690:	464e      	mov	r6, r9
 8000692:	4645      	mov	r5, r8
 8000694:	46de      	mov	lr, fp
 8000696:	b5e0      	push	{r5, r6, r7, lr}
 8000698:	0247      	lsls	r7, r0, #9
 800069a:	0046      	lsls	r6, r0, #1
 800069c:	4688      	mov	r8, r1
 800069e:	0a7f      	lsrs	r7, r7, #9
 80006a0:	0e36      	lsrs	r6, r6, #24
 80006a2:	0fc4      	lsrs	r4, r0, #31
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d047      	beq.n	8000738 <__aeabi_fmul+0xac>
 80006a8:	2eff      	cmp	r6, #255	; 0xff
 80006aa:	d024      	beq.n	80006f6 <__aeabi_fmul+0x6a>
 80006ac:	00fb      	lsls	r3, r7, #3
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	04ff      	lsls	r7, r7, #19
 80006b2:	431f      	orrs	r7, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	4699      	mov	r9, r3
 80006b8:	469a      	mov	sl, r3
 80006ba:	3e7f      	subs	r6, #127	; 0x7f
 80006bc:	4643      	mov	r3, r8
 80006be:	025d      	lsls	r5, r3, #9
 80006c0:	0058      	lsls	r0, r3, #1
 80006c2:	0fdb      	lsrs	r3, r3, #31
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	0e00      	lsrs	r0, r0, #24
 80006c8:	4698      	mov	r8, r3
 80006ca:	d043      	beq.n	8000754 <__aeabi_fmul+0xc8>
 80006cc:	28ff      	cmp	r0, #255	; 0xff
 80006ce:	d03b      	beq.n	8000748 <__aeabi_fmul+0xbc>
 80006d0:	00eb      	lsls	r3, r5, #3
 80006d2:	2580      	movs	r5, #128	; 0x80
 80006d4:	2200      	movs	r2, #0
 80006d6:	04ed      	lsls	r5, r5, #19
 80006d8:	431d      	orrs	r5, r3
 80006da:	387f      	subs	r0, #127	; 0x7f
 80006dc:	1836      	adds	r6, r6, r0
 80006de:	1c73      	adds	r3, r6, #1
 80006e0:	4641      	mov	r1, r8
 80006e2:	469b      	mov	fp, r3
 80006e4:	464b      	mov	r3, r9
 80006e6:	4061      	eors	r1, r4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d864      	bhi.n	80007b8 <__aeabi_fmul+0x12c>
 80006ee:	4875      	ldr	r0, [pc, #468]	; (80008c4 <__aeabi_fmul+0x238>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	58c3      	ldr	r3, [r0, r3]
 80006f4:	469f      	mov	pc, r3
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d142      	bne.n	8000780 <__aeabi_fmul+0xf4>
 80006fa:	2308      	movs	r3, #8
 80006fc:	4699      	mov	r9, r3
 80006fe:	3b06      	subs	r3, #6
 8000700:	26ff      	movs	r6, #255	; 0xff
 8000702:	469a      	mov	sl, r3
 8000704:	e7da      	b.n	80006bc <__aeabi_fmul+0x30>
 8000706:	4641      	mov	r1, r8
 8000708:	2a02      	cmp	r2, #2
 800070a:	d028      	beq.n	800075e <__aeabi_fmul+0xd2>
 800070c:	2a03      	cmp	r2, #3
 800070e:	d100      	bne.n	8000712 <__aeabi_fmul+0x86>
 8000710:	e0ce      	b.n	80008b0 <__aeabi_fmul+0x224>
 8000712:	2a01      	cmp	r2, #1
 8000714:	d000      	beq.n	8000718 <__aeabi_fmul+0x8c>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fmul+0x1e6>
 8000718:	4011      	ands	r1, r2
 800071a:	2000      	movs	r0, #0
 800071c:	2200      	movs	r2, #0
 800071e:	b2cc      	uxtb	r4, r1
 8000720:	0240      	lsls	r0, r0, #9
 8000722:	05d2      	lsls	r2, r2, #23
 8000724:	0a40      	lsrs	r0, r0, #9
 8000726:	07e4      	lsls	r4, r4, #31
 8000728:	4310      	orrs	r0, r2
 800072a:	4320      	orrs	r0, r4
 800072c:	bc3c      	pop	{r2, r3, r4, r5}
 800072e:	4690      	mov	r8, r2
 8000730:	4699      	mov	r9, r3
 8000732:	46a2      	mov	sl, r4
 8000734:	46ab      	mov	fp, r5
 8000736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000738:	2f00      	cmp	r7, #0
 800073a:	d115      	bne.n	8000768 <__aeabi_fmul+0xdc>
 800073c:	2304      	movs	r3, #4
 800073e:	4699      	mov	r9, r3
 8000740:	3b03      	subs	r3, #3
 8000742:	2600      	movs	r6, #0
 8000744:	469a      	mov	sl, r3
 8000746:	e7b9      	b.n	80006bc <__aeabi_fmul+0x30>
 8000748:	20ff      	movs	r0, #255	; 0xff
 800074a:	2202      	movs	r2, #2
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0c5      	beq.n	80006dc <__aeabi_fmul+0x50>
 8000750:	2203      	movs	r2, #3
 8000752:	e7c3      	b.n	80006dc <__aeabi_fmul+0x50>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d119      	bne.n	800078c <__aeabi_fmul+0x100>
 8000758:	2000      	movs	r0, #0
 800075a:	2201      	movs	r2, #1
 800075c:	e7be      	b.n	80006dc <__aeabi_fmul+0x50>
 800075e:	2401      	movs	r4, #1
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	400c      	ands	r4, r1
 8000764:	2000      	movs	r0, #0
 8000766:	e7db      	b.n	8000720 <__aeabi_fmul+0x94>
 8000768:	0038      	movs	r0, r7
 800076a:	f002 f8b7 	bl	80028dc <__clzsi2>
 800076e:	2676      	movs	r6, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409f      	lsls	r7, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4276      	negs	r6, r6
 8000778:	1a36      	subs	r6, r6, r0
 800077a:	4699      	mov	r9, r3
 800077c:	469a      	mov	sl, r3
 800077e:	e79d      	b.n	80006bc <__aeabi_fmul+0x30>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	26ff      	movs	r6, #255	; 0xff
 8000788:	469a      	mov	sl, r3
 800078a:	e797      	b.n	80006bc <__aeabi_fmul+0x30>
 800078c:	0028      	movs	r0, r5
 800078e:	f002 f8a5 	bl	80028dc <__clzsi2>
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	409d      	lsls	r5, r3
 8000796:	2376      	movs	r3, #118	; 0x76
 8000798:	425b      	negs	r3, r3
 800079a:	1a18      	subs	r0, r3, r0
 800079c:	2200      	movs	r2, #0
 800079e:	e79d      	b.n	80006dc <__aeabi_fmul+0x50>
 80007a0:	2080      	movs	r0, #128	; 0x80
 80007a2:	2400      	movs	r4, #0
 80007a4:	03c0      	lsls	r0, r0, #15
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	e7ba      	b.n	8000720 <__aeabi_fmul+0x94>
 80007aa:	003d      	movs	r5, r7
 80007ac:	4652      	mov	r2, sl
 80007ae:	e7ab      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b0:	003d      	movs	r5, r7
 80007b2:	0021      	movs	r1, r4
 80007b4:	4652      	mov	r2, sl
 80007b6:	e7a7      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b8:	0c3b      	lsrs	r3, r7, #16
 80007ba:	469c      	mov	ip, r3
 80007bc:	042a      	lsls	r2, r5, #16
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	0c2b      	lsrs	r3, r5, #16
 80007c2:	0014      	movs	r4, r2
 80007c4:	4660      	mov	r0, ip
 80007c6:	4665      	mov	r5, ip
 80007c8:	043f      	lsls	r7, r7, #16
 80007ca:	0c3f      	lsrs	r7, r7, #16
 80007cc:	437c      	muls	r4, r7
 80007ce:	4342      	muls	r2, r0
 80007d0:	435d      	muls	r5, r3
 80007d2:	437b      	muls	r3, r7
 80007d4:	0c27      	lsrs	r7, r4, #16
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	18ff      	adds	r7, r7, r3
 80007da:	42ba      	cmp	r2, r7
 80007dc:	d903      	bls.n	80007e6 <__aeabi_fmul+0x15a>
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	469c      	mov	ip, r3
 80007e4:	4465      	add	r5, ip
 80007e6:	0424      	lsls	r4, r4, #16
 80007e8:	043a      	lsls	r2, r7, #16
 80007ea:	0c24      	lsrs	r4, r4, #16
 80007ec:	1912      	adds	r2, r2, r4
 80007ee:	0193      	lsls	r3, r2, #6
 80007f0:	1e5c      	subs	r4, r3, #1
 80007f2:	41a3      	sbcs	r3, r4
 80007f4:	0c3f      	lsrs	r7, r7, #16
 80007f6:	0e92      	lsrs	r2, r2, #26
 80007f8:	197d      	adds	r5, r7, r5
 80007fa:	431a      	orrs	r2, r3
 80007fc:	01ad      	lsls	r5, r5, #6
 80007fe:	4315      	orrs	r5, r2
 8000800:	012b      	lsls	r3, r5, #4
 8000802:	d504      	bpl.n	800080e <__aeabi_fmul+0x182>
 8000804:	2301      	movs	r3, #1
 8000806:	465e      	mov	r6, fp
 8000808:	086a      	lsrs	r2, r5, #1
 800080a:	401d      	ands	r5, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	0032      	movs	r2, r6
 8000810:	327f      	adds	r2, #127	; 0x7f
 8000812:	2a00      	cmp	r2, #0
 8000814:	dd25      	ble.n	8000862 <__aeabi_fmul+0x1d6>
 8000816:	076b      	lsls	r3, r5, #29
 8000818:	d004      	beq.n	8000824 <__aeabi_fmul+0x198>
 800081a:	230f      	movs	r3, #15
 800081c:	402b      	ands	r3, r5
 800081e:	2b04      	cmp	r3, #4
 8000820:	d000      	beq.n	8000824 <__aeabi_fmul+0x198>
 8000822:	3504      	adds	r5, #4
 8000824:	012b      	lsls	r3, r5, #4
 8000826:	d503      	bpl.n	8000830 <__aeabi_fmul+0x1a4>
 8000828:	0032      	movs	r2, r6
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <__aeabi_fmul+0x23c>)
 800082c:	3280      	adds	r2, #128	; 0x80
 800082e:	401d      	ands	r5, r3
 8000830:	2afe      	cmp	r2, #254	; 0xfe
 8000832:	dc94      	bgt.n	800075e <__aeabi_fmul+0xd2>
 8000834:	2401      	movs	r4, #1
 8000836:	01a8      	lsls	r0, r5, #6
 8000838:	0a40      	lsrs	r0, r0, #9
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	400c      	ands	r4, r1
 800083e:	e76f      	b.n	8000720 <__aeabi_fmul+0x94>
 8000840:	2080      	movs	r0, #128	; 0x80
 8000842:	03c0      	lsls	r0, r0, #15
 8000844:	4207      	tst	r7, r0
 8000846:	d007      	beq.n	8000858 <__aeabi_fmul+0x1cc>
 8000848:	4205      	tst	r5, r0
 800084a:	d105      	bne.n	8000858 <__aeabi_fmul+0x1cc>
 800084c:	4328      	orrs	r0, r5
 800084e:	0240      	lsls	r0, r0, #9
 8000850:	0a40      	lsrs	r0, r0, #9
 8000852:	4644      	mov	r4, r8
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	e763      	b.n	8000720 <__aeabi_fmul+0x94>
 8000858:	4338      	orrs	r0, r7
 800085a:	0240      	lsls	r0, r0, #9
 800085c:	0a40      	lsrs	r0, r0, #9
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	e75e      	b.n	8000720 <__aeabi_fmul+0x94>
 8000862:	2401      	movs	r4, #1
 8000864:	1aa3      	subs	r3, r4, r2
 8000866:	2b1b      	cmp	r3, #27
 8000868:	dd05      	ble.n	8000876 <__aeabi_fmul+0x1ea>
 800086a:	400c      	ands	r4, r1
 800086c:	2200      	movs	r2, #0
 800086e:	2000      	movs	r0, #0
 8000870:	e756      	b.n	8000720 <__aeabi_fmul+0x94>
 8000872:	465e      	mov	r6, fp
 8000874:	e7cb      	b.n	800080e <__aeabi_fmul+0x182>
 8000876:	002a      	movs	r2, r5
 8000878:	2020      	movs	r0, #32
 800087a:	40da      	lsrs	r2, r3
 800087c:	1ac3      	subs	r3, r0, r3
 800087e:	409d      	lsls	r5, r3
 8000880:	002b      	movs	r3, r5
 8000882:	1e5d      	subs	r5, r3, #1
 8000884:	41ab      	sbcs	r3, r5
 8000886:	4313      	orrs	r3, r2
 8000888:	075a      	lsls	r2, r3, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fmul+0x20a>
 800088c:	220f      	movs	r2, #15
 800088e:	401a      	ands	r2, r3
 8000890:	2a04      	cmp	r2, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fmul+0x20a>
 8000894:	3304      	adds	r3, #4
 8000896:	015a      	lsls	r2, r3, #5
 8000898:	d504      	bpl.n	80008a4 <__aeabi_fmul+0x218>
 800089a:	2401      	movs	r4, #1
 800089c:	2201      	movs	r2, #1
 800089e:	400c      	ands	r4, r1
 80008a0:	2000      	movs	r0, #0
 80008a2:	e73d      	b.n	8000720 <__aeabi_fmul+0x94>
 80008a4:	2401      	movs	r4, #1
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	0a58      	lsrs	r0, r3, #9
 80008aa:	400c      	ands	r4, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	e737      	b.n	8000720 <__aeabi_fmul+0x94>
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	2401      	movs	r4, #1
 80008b4:	03c0      	lsls	r0, r0, #15
 80008b6:	4328      	orrs	r0, r5
 80008b8:	0240      	lsls	r0, r0, #9
 80008ba:	0a40      	lsrs	r0, r0, #9
 80008bc:	400c      	ands	r4, r1
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	e72e      	b.n	8000720 <__aeabi_fmul+0x94>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	080051f4 	.word	0x080051f4
 80008c8:	f7ffffff 	.word	0xf7ffffff

080008cc <__aeabi_fsub>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	464f      	mov	r7, r9
 80008d0:	46d6      	mov	lr, sl
 80008d2:	4646      	mov	r6, r8
 80008d4:	0044      	lsls	r4, r0, #1
 80008d6:	b5c0      	push	{r6, r7, lr}
 80008d8:	0fc2      	lsrs	r2, r0, #31
 80008da:	0247      	lsls	r7, r0, #9
 80008dc:	0248      	lsls	r0, r1, #9
 80008de:	0a40      	lsrs	r0, r0, #9
 80008e0:	4684      	mov	ip, r0
 80008e2:	4666      	mov	r6, ip
 80008e4:	0a7b      	lsrs	r3, r7, #9
 80008e6:	0048      	lsls	r0, r1, #1
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	469a      	mov	sl, r3
 80008ec:	0e24      	lsrs	r4, r4, #24
 80008ee:	0015      	movs	r5, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	0e00      	lsrs	r0, r0, #24
 80008f4:	4689      	mov	r9, r1
 80008f6:	00f6      	lsls	r6, r6, #3
 80008f8:	28ff      	cmp	r0, #255	; 0xff
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x32>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fsub+0x152>
 80008fe:	2101      	movs	r1, #1
 8000900:	464f      	mov	r7, r9
 8000902:	404f      	eors	r7, r1
 8000904:	0039      	movs	r1, r7
 8000906:	4291      	cmp	r1, r2
 8000908:	d066      	beq.n	80009d8 <__aeabi_fsub+0x10c>
 800090a:	1a22      	subs	r2, r4, r0
 800090c:	2a00      	cmp	r2, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fsub+0x46>
 8000910:	e09d      	b.n	8000a4e <__aeabi_fsub+0x182>
 8000912:	2800      	cmp	r0, #0
 8000914:	d13d      	bne.n	8000992 <__aeabi_fsub+0xc6>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x50>
 800091a:	e08b      	b.n	8000a34 <__aeabi_fsub+0x168>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2900      	cmp	r1, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_fsub+0x58>
 8000922:	e0b5      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000924:	2401      	movs	r4, #1
 8000926:	1b9b      	subs	r3, r3, r6
 8000928:	015a      	lsls	r2, r3, #5
 800092a:	d544      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	099f      	lsrs	r7, r3, #6
 8000930:	0038      	movs	r0, r7
 8000932:	f001 ffd3 	bl	80028dc <__clzsi2>
 8000936:	3805      	subs	r0, #5
 8000938:	4087      	lsls	r7, r0
 800093a:	4284      	cmp	r4, r0
 800093c:	dd00      	ble.n	8000940 <__aeabi_fsub+0x74>
 800093e:	e096      	b.n	8000a6e <__aeabi_fsub+0x1a2>
 8000940:	1b04      	subs	r4, r0, r4
 8000942:	003a      	movs	r2, r7
 8000944:	2020      	movs	r0, #32
 8000946:	3401      	adds	r4, #1
 8000948:	40e2      	lsrs	r2, r4
 800094a:	1b04      	subs	r4, r0, r4
 800094c:	40a7      	lsls	r7, r4
 800094e:	003b      	movs	r3, r7
 8000950:	1e5f      	subs	r7, r3, #1
 8000952:	41bb      	sbcs	r3, r7
 8000954:	2400      	movs	r4, #0
 8000956:	4313      	orrs	r3, r2
 8000958:	075a      	lsls	r2, r3, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fsub+0x9a>
 800095c:	220f      	movs	r2, #15
 800095e:	401a      	ands	r2, r3
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fsub+0x9a>
 8000964:	3304      	adds	r3, #4
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	d527      	bpl.n	80009ba <__aeabi_fsub+0xee>
 800096a:	3401      	adds	r4, #1
 800096c:	2cff      	cmp	r4, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0xa6>
 8000970:	e079      	b.n	8000a66 <__aeabi_fsub+0x19a>
 8000972:	2201      	movs	r2, #1
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	b2e4      	uxtb	r4, r4
 800097a:	402a      	ands	r2, r5
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	05e4      	lsls	r4, r4, #23
 8000980:	0a58      	lsrs	r0, r3, #9
 8000982:	07d2      	lsls	r2, r2, #31
 8000984:	4320      	orrs	r0, r4
 8000986:	4310      	orrs	r0, r2
 8000988:	bc1c      	pop	{r2, r3, r4}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d0e0      	beq.n	8000958 <__aeabi_fsub+0x8c>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	04c9      	lsls	r1, r1, #19
 800099a:	430e      	orrs	r6, r1
 800099c:	2a1b      	cmp	r2, #27
 800099e:	dc7b      	bgt.n	8000a98 <__aeabi_fsub+0x1cc>
 80009a0:	0031      	movs	r1, r6
 80009a2:	2020      	movs	r0, #32
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	1a82      	subs	r2, r0, r2
 80009a8:	4096      	lsls	r6, r2
 80009aa:	1e72      	subs	r2, r6, #1
 80009ac:	4196      	sbcs	r6, r2
 80009ae:	430e      	orrs	r6, r1
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	015a      	lsls	r2, r3, #5
 80009b4:	d4ba      	bmi.n	800092c <__aeabi_fsub+0x60>
 80009b6:	075a      	lsls	r2, r3, #29
 80009b8:	d1d0      	bne.n	800095c <__aeabi_fsub+0x90>
 80009ba:	2201      	movs	r2, #1
 80009bc:	08df      	lsrs	r7, r3, #3
 80009be:	402a      	ands	r2, r5
 80009c0:	2cff      	cmp	r4, #255	; 0xff
 80009c2:	d133      	bne.n	8000a2c <__aeabi_fsub+0x160>
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0xfe>
 80009c8:	e0a8      	b.n	8000b1c <__aeabi_fsub+0x250>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	03db      	lsls	r3, r3, #15
 80009ce:	433b      	orrs	r3, r7
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	24ff      	movs	r4, #255	; 0xff
 80009d6:	e7d1      	b.n	800097c <__aeabi_fsub+0xb0>
 80009d8:	1a21      	subs	r1, r4, r0
 80009da:	2900      	cmp	r1, #0
 80009dc:	dd4c      	ble.n	8000a78 <__aeabi_fsub+0x1ac>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d02a      	beq.n	8000a38 <__aeabi_fsub+0x16c>
 80009e2:	2cff      	cmp	r4, #255	; 0xff
 80009e4:	d0b8      	beq.n	8000958 <__aeabi_fsub+0x8c>
 80009e6:	2080      	movs	r0, #128	; 0x80
 80009e8:	04c0      	lsls	r0, r0, #19
 80009ea:	4306      	orrs	r6, r0
 80009ec:	291b      	cmp	r1, #27
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_fsub+0x126>
 80009f0:	e0af      	b.n	8000b52 <__aeabi_fsub+0x286>
 80009f2:	0030      	movs	r0, r6
 80009f4:	2720      	movs	r7, #32
 80009f6:	40c8      	lsrs	r0, r1
 80009f8:	1a79      	subs	r1, r7, r1
 80009fa:	408e      	lsls	r6, r1
 80009fc:	1e71      	subs	r1, r6, #1
 80009fe:	418e      	sbcs	r6, r1
 8000a00:	4306      	orrs	r6, r0
 8000a02:	199b      	adds	r3, r3, r6
 8000a04:	0159      	lsls	r1, r3, #5
 8000a06:	d5d6      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a08:	3401      	adds	r4, #1
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fsub+0x144>
 8000a0e:	e085      	b.n	8000b1c <__aeabi_fsub+0x250>
 8000a10:	2201      	movs	r2, #1
 8000a12:	497a      	ldr	r1, [pc, #488]	; (8000bfc <__aeabi_fsub+0x330>)
 8000a14:	401a      	ands	r2, r3
 8000a16:	085b      	lsrs	r3, r3, #1
 8000a18:	400b      	ands	r3, r1
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	e79c      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x158>
 8000a22:	e770      	b.n	8000906 <__aeabi_fsub+0x3a>
 8000a24:	e76b      	b.n	80008fe <__aeabi_fsub+0x32>
 8000a26:	1e3b      	subs	r3, r7, #0
 8000a28:	d1c5      	bne.n	80009b6 <__aeabi_fsub+0xea>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	027b      	lsls	r3, r7, #9
 8000a2e:	0a5b      	lsrs	r3, r3, #9
 8000a30:	b2e4      	uxtb	r4, r4
 8000a32:	e7a3      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a34:	0014      	movs	r4, r2
 8000a36:	e78f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d04d      	beq.n	8000ad8 <__aeabi_fsub+0x20c>
 8000a3c:	1e48      	subs	r0, r1, #1
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d157      	bne.n	8000af2 <__aeabi_fsub+0x226>
 8000a42:	199b      	adds	r3, r3, r6
 8000a44:	2401      	movs	r4, #1
 8000a46:	015a      	lsls	r2, r3, #5
 8000a48:	d5b5      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a4a:	2402      	movs	r4, #2
 8000a4c:	e7e0      	b.n	8000a10 <__aeabi_fsub+0x144>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d125      	bne.n	8000a9e <__aeabi_fsub+0x1d2>
 8000a52:	1c62      	adds	r2, r4, #1
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	2a01      	cmp	r2, #1
 8000a58:	dd72      	ble.n	8000b40 <__aeabi_fsub+0x274>
 8000a5a:	1b9f      	subs	r7, r3, r6
 8000a5c:	017a      	lsls	r2, r7, #5
 8000a5e:	d535      	bpl.n	8000acc <__aeabi_fsub+0x200>
 8000a60:	1af7      	subs	r7, r6, r3
 8000a62:	000d      	movs	r5, r1
 8000a64:	e764      	b.n	8000930 <__aeabi_fsub+0x64>
 8000a66:	2201      	movs	r2, #1
 8000a68:	2300      	movs	r3, #0
 8000a6a:	402a      	ands	r2, r5
 8000a6c:	e786      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a6e:	003b      	movs	r3, r7
 8000a70:	4a63      	ldr	r2, [pc, #396]	; (8000c00 <__aeabi_fsub+0x334>)
 8000a72:	1a24      	subs	r4, r4, r0
 8000a74:	4013      	ands	r3, r2
 8000a76:	e76f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d16c      	bne.n	8000b56 <__aeabi_fsub+0x28a>
 8000a7c:	1c61      	adds	r1, r4, #1
 8000a7e:	b2c8      	uxtb	r0, r1
 8000a80:	2801      	cmp	r0, #1
 8000a82:	dd4e      	ble.n	8000b22 <__aeabi_fsub+0x256>
 8000a84:	29ff      	cmp	r1, #255	; 0xff
 8000a86:	d049      	beq.n	8000b1c <__aeabi_fsub+0x250>
 8000a88:	199b      	adds	r3, r3, r6
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	e763      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d041      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000a94:	000a      	movs	r2, r1
 8000a96:	e781      	b.n	800099c <__aeabi_fsub+0xd0>
 8000a98:	2601      	movs	r6, #1
 8000a9a:	1b9b      	subs	r3, r3, r6
 8000a9c:	e789      	b.n	80009b2 <__aeabi_fsub+0xe6>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d01c      	beq.n	8000adc <__aeabi_fsub+0x210>
 8000aa2:	28ff      	cmp	r0, #255	; 0xff
 8000aa4:	d021      	beq.n	8000aea <__aeabi_fsub+0x21e>
 8000aa6:	2480      	movs	r4, #128	; 0x80
 8000aa8:	04e4      	lsls	r4, r4, #19
 8000aaa:	4252      	negs	r2, r2
 8000aac:	4323      	orrs	r3, r4
 8000aae:	2a1b      	cmp	r2, #27
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_fsub+0x1e8>
 8000ab2:	e096      	b.n	8000be2 <__aeabi_fsub+0x316>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	2520      	movs	r5, #32
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	1aaa      	subs	r2, r5, r2
 8000abc:	4093      	lsls	r3, r2
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	4193      	sbcs	r3, r2
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	1af3      	subs	r3, r6, r3
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	000d      	movs	r5, r1
 8000aca:	e72d      	b.n	8000928 <__aeabi_fsub+0x5c>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0x206>
 8000ad0:	e72e      	b.n	8000930 <__aeabi_fsub+0x64>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e7a9      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	e73d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d058      	beq.n	8000b92 <__aeabi_fsub+0x2c6>
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d0ee      	beq.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d1e1      	bne.n	8000aae <__aeabi_fsub+0x1e2>
 8000aea:	0033      	movs	r3, r6
 8000aec:	24ff      	movs	r4, #255	; 0xff
 8000aee:	000d      	movs	r5, r1
 8000af0:	e732      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000af2:	29ff      	cmp	r1, #255	; 0xff
 8000af4:	d010      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000af6:	0001      	movs	r1, r0
 8000af8:	e778      	b.n	80009ec <__aeabi_fsub+0x120>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000afe:	24ff      	movs	r4, #255	; 0xff
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x23a>
 8000b04:	e728      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	4651      	mov	r1, sl
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	4211      	tst	r1, r2
 8000b0e:	d003      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000b10:	4661      	mov	r1, ip
 8000b12:	4211      	tst	r1, r2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000b16:	0033      	movs	r3, r6
 8000b18:	24ff      	movs	r4, #255	; 0xff
 8000b1a:	e71d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b1c:	24ff      	movs	r4, #255	; 0xff
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e72c      	b.n	800097c <__aeabi_fsub+0xb0>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d1e9      	bne.n	8000afa <__aeabi_fsub+0x22e>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d063      	beq.n	8000bf2 <__aeabi_fsub+0x326>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x264>
 8000b2e:	e713      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b30:	199b      	adds	r3, r3, r6
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_fsub+0x26c>
 8000b36:	e73e      	b.n	80009b6 <__aeabi_fsub+0xea>
 8000b38:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <__aeabi_fsub+0x334>)
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	e70b      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d11e      	bne.n	8000b82 <__aeabi_fsub+0x2b6>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12f      	bne.n	8000ba8 <__aeabi_fsub+0x2dc>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d04f      	beq.n	8000bec <__aeabi_fsub+0x320>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	000d      	movs	r5, r1
 8000b50:	e702      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b52:	2601      	movs	r6, #1
 8000b54:	e755      	b.n	8000a02 <__aeabi_fsub+0x136>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d11f      	bne.n	8000b9a <__aeabi_fsub+0x2ce>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d043      	beq.n	8000be6 <__aeabi_fsub+0x31a>
 8000b5e:	43c9      	mvns	r1, r1
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d00b      	beq.n	8000b7c <__aeabi_fsub+0x2b0>
 8000b64:	28ff      	cmp	r0, #255	; 0xff
 8000b66:	d039      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b68:	291b      	cmp	r1, #27
 8000b6a:	dc44      	bgt.n	8000bf6 <__aeabi_fsub+0x32a>
 8000b6c:	001c      	movs	r4, r3
 8000b6e:	2720      	movs	r7, #32
 8000b70:	40cc      	lsrs	r4, r1
 8000b72:	1a79      	subs	r1, r7, r1
 8000b74:	408b      	lsls	r3, r1
 8000b76:	1e59      	subs	r1, r3, #1
 8000b78:	418b      	sbcs	r3, r1
 8000b7a:	4323      	orrs	r3, r4
 8000b7c:	199b      	adds	r3, r3, r6
 8000b7e:	0004      	movs	r4, r0
 8000b80:	e740      	b.n	8000a04 <__aeabi_fsub+0x138>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d11a      	bne.n	8000bbc <__aeabi_fsub+0x2f0>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d124      	bne.n	8000bd4 <__aeabi_fsub+0x308>
 8000b8a:	2780      	movs	r7, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	03ff      	lsls	r7, r7, #15
 8000b90:	e71b      	b.n	80009ca <__aeabi_fsub+0xfe>
 8000b92:	0033      	movs	r3, r6
 8000b94:	0004      	movs	r4, r0
 8000b96:	000d      	movs	r5, r1
 8000b98:	e6de      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d01e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b9e:	2480      	movs	r4, #128	; 0x80
 8000ba0:	04e4      	lsls	r4, r4, #19
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	e7df      	b.n	8000b68 <__aeabi_fsub+0x29c>
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x2e2>
 8000bac:	e6d4      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bae:	1b9f      	subs	r7, r3, r6
 8000bb0:	017a      	lsls	r2, r7, #5
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000bb4:	e737      	b.n	8000a26 <__aeabi_fsub+0x15a>
 8000bb6:	1af3      	subs	r3, r6, r3
 8000bb8:	000d      	movs	r5, r1
 8000bba:	e6cd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bbc:	24ff      	movs	r4, #255	; 0xff
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x2f8>
 8000bc2:	e6c9      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4650      	mov	r0, sl
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	4210      	tst	r0, r2
 8000bcc:	d0a4      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000bce:	4660      	mov	r0, ip
 8000bd0:	4210      	tst	r0, r2
 8000bd2:	d1a1      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000bd4:	0033      	movs	r3, r6
 8000bd6:	000d      	movs	r5, r1
 8000bd8:	24ff      	movs	r4, #255	; 0xff
 8000bda:	e6bd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bdc:	0033      	movs	r3, r6
 8000bde:	24ff      	movs	r4, #255	; 0xff
 8000be0:	e6ba      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e76e      	b.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000be6:	0033      	movs	r3, r6
 8000be8:	0004      	movs	r4, r0
 8000bea:	e6b5      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bec:	2700      	movs	r7, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	e71c      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	e6b0      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e7c0      	b.n	8000b7c <__aeabi_fsub+0x2b0>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7dffffff 	.word	0x7dffffff
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_f2iz>:
 8000c04:	0241      	lsls	r1, r0, #9
 8000c06:	0043      	lsls	r3, r0, #1
 8000c08:	0fc2      	lsrs	r2, r0, #31
 8000c0a:	0a49      	lsrs	r1, r1, #9
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2b7e      	cmp	r3, #126	; 0x7e
 8000c12:	dd0d      	ble.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c14:	2b9d      	cmp	r3, #157	; 0x9d
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_f2iz+0x2e>
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	0400      	lsls	r0, r0, #16
 8000c1c:	4301      	orrs	r1, r0
 8000c1e:	2b95      	cmp	r3, #149	; 0x95
 8000c20:	dc0a      	bgt.n	8000c38 <__aeabi_f2iz+0x34>
 8000c22:	2096      	movs	r0, #150	; 0x96
 8000c24:	1ac3      	subs	r3, r0, r3
 8000c26:	40d9      	lsrs	r1, r3
 8000c28:	4248      	negs	r0, r1
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c2e:	0008      	movs	r0, r1
 8000c30:	4770      	bx	lr
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <__aeabi_f2iz+0x3c>)
 8000c34:	18d0      	adds	r0, r2, r3
 8000c36:	e7fb      	b.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c38:	3b96      	subs	r3, #150	; 0x96
 8000c3a:	4099      	lsls	r1, r3
 8000c3c:	e7f4      	b.n	8000c28 <__aeabi_f2iz+0x24>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	7fffffff 	.word	0x7fffffff

08000c44 <__aeabi_i2f>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d030      	beq.n	8000cac <__aeabi_i2f+0x68>
 8000c4a:	17c3      	asrs	r3, r0, #31
 8000c4c:	18c4      	adds	r4, r0, r3
 8000c4e:	405c      	eors	r4, r3
 8000c50:	0fc5      	lsrs	r5, r0, #31
 8000c52:	0020      	movs	r0, r4
 8000c54:	f001 fe42 	bl	80028dc <__clzsi2>
 8000c58:	239e      	movs	r3, #158	; 0x9e
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	; 0x96
 8000c5e:	dc0d      	bgt.n	8000c7c <__aeabi_i2f+0x38>
 8000c60:	2296      	movs	r2, #150	; 0x96
 8000c62:	1ad2      	subs	r2, r2, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	002a      	movs	r2, r5
 8000c68:	0264      	lsls	r4, r4, #9
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	0264      	lsls	r4, r4, #9
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0a60      	lsrs	r0, r4, #9
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4318      	orrs	r0, r3
 8000c78:	4310      	orrs	r0, r2
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
 8000c7c:	2b99      	cmp	r3, #153	; 0x99
 8000c7e:	dc19      	bgt.n	8000cb4 <__aeabi_i2f+0x70>
 8000c80:	2299      	movs	r2, #153	; 0x99
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dd29      	ble.n	8000cdc <__aeabi_i2f+0x98>
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	0022      	movs	r2, r4
 8000c8c:	4c14      	ldr	r4, [pc, #80]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000c8e:	4014      	ands	r4, r2
 8000c90:	0751      	lsls	r1, r2, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c94:	210f      	movs	r1, #15
 8000c96:	400a      	ands	r2, r1
 8000c98:	2a04      	cmp	r2, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	0162      	lsls	r2, r4, #5
 8000ca0:	d413      	bmi.n	8000cca <__aeabi_i2f+0x86>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	002a      	movs	r2, r5
 8000caa:	e7e0      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e7dc      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	40d1      	lsrs	r1, r2
 8000cbc:	22b9      	movs	r2, #185	; 0xb9
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	1e62      	subs	r2, r4, #1
 8000cc4:	4194      	sbcs	r4, r2
 8000cc6:	430c      	orrs	r4, r1
 8000cc8:	e7da      	b.n	8000c80 <__aeabi_i2f+0x3c>
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000ccc:	002a      	movs	r2, r5
 8000cce:	401c      	ands	r4, r3
 8000cd0:	239f      	movs	r3, #159	; 0x9f
 8000cd2:	01a4      	lsls	r4, r4, #6
 8000cd4:	1a1b      	subs	r3, r3, r0
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e7c8      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cdc:	0022      	movs	r2, r4
 8000cde:	e7d5      	b.n	8000c8c <__aeabi_i2f+0x48>
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__aeabi_ui2f>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d027      	beq.n	8000d3a <__aeabi_ui2f+0x56>
 8000cea:	f001 fdf7 	bl	80028dc <__clzsi2>
 8000cee:	239e      	movs	r3, #158	; 0x9e
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b96      	cmp	r3, #150	; 0x96
 8000cf4:	dc0a      	bgt.n	8000d0c <__aeabi_ui2f+0x28>
 8000cf6:	2296      	movs	r2, #150	; 0x96
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	4094      	lsls	r4, r2
 8000cfc:	0264      	lsls	r4, r4, #9
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	0264      	lsls	r4, r4, #9
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0a60      	lsrs	r0, r4, #9
 8000d08:	4318      	orrs	r0, r3
 8000d0a:	bd10      	pop	{r4, pc}
 8000d0c:	2b99      	cmp	r3, #153	; 0x99
 8000d0e:	dc17      	bgt.n	8000d40 <__aeabi_ui2f+0x5c>
 8000d10:	2299      	movs	r2, #153	; 0x99
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd27      	ble.n	8000d68 <__aeabi_ui2f+0x84>
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	4c13      	ldr	r4, [pc, #76]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d1e:	4014      	ands	r4, r2
 8000d20:	0751      	lsls	r1, r2, #29
 8000d22:	d004      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d24:	210f      	movs	r1, #15
 8000d26:	400a      	ands	r2, r1
 8000d28:	2a04      	cmp	r2, #4
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	0162      	lsls	r2, r4, #5
 8000d30:	d412      	bmi.n	8000d58 <__aeabi_ui2f+0x74>
 8000d32:	01a4      	lsls	r4, r4, #6
 8000d34:	0a64      	lsrs	r4, r4, #9
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	e7e3      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	e7e0      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d40:	22b9      	movs	r2, #185	; 0xb9
 8000d42:	0021      	movs	r1, r4
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	1e51      	subs	r1, r2, #1
 8000d4c:	418a      	sbcs	r2, r1
 8000d4e:	2105      	movs	r1, #5
 8000d50:	1a09      	subs	r1, r1, r0
 8000d52:	40cc      	lsrs	r4, r1
 8000d54:	4314      	orrs	r4, r2
 8000d56:	e7db      	b.n	8000d10 <__aeabi_ui2f+0x2c>
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d5a:	401c      	ands	r4, r3
 8000d5c:	239f      	movs	r3, #159	; 0x9f
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	e7cc      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d68:	0022      	movs	r2, r4
 8000d6a:	e7d7      	b.n	8000d1c <__aeabi_ui2f+0x38>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_dadd>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	4657      	mov	r7, sl
 8000d78:	464e      	mov	r6, r9
 8000d7a:	030c      	lsls	r4, r1, #12
 8000d7c:	b5e0      	push	{r5, r6, r7, lr}
 8000d7e:	004e      	lsls	r6, r1, #1
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	4688      	mov	r8, r1
 8000d84:	000d      	movs	r5, r1
 8000d86:	0a61      	lsrs	r1, r4, #9
 8000d88:	0f44      	lsrs	r4, r0, #29
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	00c7      	lsls	r7, r0, #3
 8000d8e:	0319      	lsls	r1, r3, #12
 8000d90:	0058      	lsls	r0, r3, #1
 8000d92:	0fdb      	lsrs	r3, r3, #31
 8000d94:	469b      	mov	fp, r3
 8000d96:	0a4b      	lsrs	r3, r1, #9
 8000d98:	0f51      	lsrs	r1, r2, #29
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0d76      	lsrs	r6, r6, #21
 8000d9e:	0d40      	lsrs	r0, r0, #21
 8000da0:	0019      	movs	r1, r3
 8000da2:	00d2      	lsls	r2, r2, #3
 8000da4:	45d8      	cmp	r8, fp
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x3a>
 8000da8:	e0ae      	b.n	8000f08 <__aeabi_dadd+0x198>
 8000daa:	1a35      	subs	r5, r6, r0
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x42>
 8000db0:	e0f6      	b.n	8000fa0 <__aeabi_dadd+0x230>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_dadd+0x66>
 8000db6:	4313      	orrs	r3, r2
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x4c>
 8000dba:	e0db      	b.n	8000f74 <__aeabi_dadd+0x204>
 8000dbc:	1e6b      	subs	r3, r5, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x54>
 8000dc2:	e137      	b.n	8001034 <__aeabi_dadd+0x2c4>
 8000dc4:	1aba      	subs	r2, r7, r2
 8000dc6:	4297      	cmp	r7, r2
 8000dc8:	41bf      	sbcs	r7, r7
 8000dca:	1a64      	subs	r4, r4, r1
 8000dcc:	427f      	negs	r7, r7
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	0017      	movs	r7, r2
 8000dd4:	e024      	b.n	8000e20 <__aeabi_dadd+0xb0>
 8000dd6:	4bc6      	ldr	r3, [pc, #792]	; (80010f0 <__aeabi_dadd+0x380>)
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d04d      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	4319      	orrs	r1, r3
 8000de2:	2d38      	cmp	r5, #56	; 0x38
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x78>
 8000de6:	e107      	b.n	8000ff8 <__aeabi_dadd+0x288>
 8000de8:	2d1f      	cmp	r5, #31
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x7e>
 8000dec:	e138      	b.n	8001060 <__aeabi_dadd+0x2f0>
 8000dee:	2020      	movs	r0, #32
 8000df0:	1b43      	subs	r3, r0, r5
 8000df2:	469a      	mov	sl, r3
 8000df4:	000b      	movs	r3, r1
 8000df6:	4650      	mov	r0, sl
 8000df8:	4083      	lsls	r3, r0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	4648      	mov	r0, r9
 8000e00:	40eb      	lsrs	r3, r5
 8000e02:	4318      	orrs	r0, r3
 8000e04:	0003      	movs	r3, r0
 8000e06:	4650      	mov	r0, sl
 8000e08:	4082      	lsls	r2, r0
 8000e0a:	1e50      	subs	r0, r2, #1
 8000e0c:	4182      	sbcs	r2, r0
 8000e0e:	40e9      	lsrs	r1, r5
 8000e10:	431a      	orrs	r2, r3
 8000e12:	1aba      	subs	r2, r7, r2
 8000e14:	1a61      	subs	r1, r4, r1
 8000e16:	4297      	cmp	r7, r2
 8000e18:	41a4      	sbcs	r4, r4
 8000e1a:	0017      	movs	r7, r2
 8000e1c:	4264      	negs	r4, r4
 8000e1e:	1b0c      	subs	r4, r1, r4
 8000e20:	0223      	lsls	r3, r4, #8
 8000e22:	d562      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000e24:	0264      	lsls	r4, r4, #9
 8000e26:	0a65      	lsrs	r5, r4, #9
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0xbe>
 8000e2c:	e0df      	b.n	8000fee <__aeabi_dadd+0x27e>
 8000e2e:	0028      	movs	r0, r5
 8000e30:	f001 fd54 	bl	80028dc <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3b08      	subs	r3, #8
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dd00      	ble.n	8000e3e <__aeabi_dadd+0xce>
 8000e3c:	e0d2      	b.n	8000fe4 <__aeabi_dadd+0x274>
 8000e3e:	2220      	movs	r2, #32
 8000e40:	003c      	movs	r4, r7
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	409d      	lsls	r5, r3
 8000e46:	40d4      	lsrs	r4, r2
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	4325      	orrs	r5, r4
 8000e4c:	429e      	cmp	r6, r3
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dadd+0xe2>
 8000e50:	e0c4      	b.n	8000fdc <__aeabi_dadd+0x26c>
 8000e52:	1b9e      	subs	r6, r3, r6
 8000e54:	1c73      	adds	r3, r6, #1
 8000e56:	2b1f      	cmp	r3, #31
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dadd+0xec>
 8000e5a:	e0f1      	b.n	8001040 <__aeabi_dadd+0x2d0>
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	0038      	movs	r0, r7
 8000e60:	0029      	movs	r1, r5
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	40d8      	lsrs	r0, r3
 8000e66:	4091      	lsls	r1, r2
 8000e68:	4097      	lsls	r7, r2
 8000e6a:	002c      	movs	r4, r5
 8000e6c:	4301      	orrs	r1, r0
 8000e6e:	1e78      	subs	r0, r7, #1
 8000e70:	4187      	sbcs	r7, r0
 8000e72:	40dc      	lsrs	r4, r3
 8000e74:	2600      	movs	r6, #0
 8000e76:	430f      	orrs	r7, r1
 8000e78:	077b      	lsls	r3, r7, #29
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	403b      	ands	r3, r7
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d005      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	42bb      	cmp	r3, r7
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	19e4      	adds	r4, r4, r7
 8000e8e:	001f      	movs	r7, r3
 8000e90:	0223      	lsls	r3, r4, #8
 8000e92:	d52c      	bpl.n	8000eee <__aeabi_dadd+0x17e>
 8000e94:	4b96      	ldr	r3, [pc, #600]	; (80010f0 <__aeabi_dadd+0x380>)
 8000e96:	3601      	adds	r6, #1
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dadd+0x12e>
 8000e9c:	e09a      	b.n	8000fd4 <__aeabi_dadd+0x264>
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	4b94      	ldr	r3, [pc, #592]	; (80010f4 <__aeabi_dadd+0x384>)
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	401c      	ands	r4, r3
 8000ea6:	0760      	lsls	r0, r4, #29
 8000ea8:	0576      	lsls	r6, r6, #21
 8000eaa:	0264      	lsls	r4, r4, #9
 8000eac:	4307      	orrs	r7, r0
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	0d76      	lsrs	r6, r6, #21
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0324      	lsls	r4, r4, #12
 8000eb6:	0b23      	lsrs	r3, r4, #12
 8000eb8:	0d0c      	lsrs	r4, r1, #20
 8000eba:	4a8f      	ldr	r2, [pc, #572]	; (80010f8 <__aeabi_dadd+0x388>)
 8000ebc:	0524      	lsls	r4, r4, #20
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	4014      	ands	r4, r2
 8000ec2:	0533      	lsls	r3, r6, #20
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	07ed      	lsls	r5, r5, #31
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	432b      	orrs	r3, r5
 8000ece:	0038      	movs	r0, r7
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	46a2      	mov	sl, r4
 8000eda:	46ab      	mov	fp, r5
 8000edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ede:	4664      	mov	r4, ip
 8000ee0:	4304      	orrs	r4, r0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x176>
 8000ee4:	e211      	b.n	800130a <__aeabi_dadd+0x59a>
 8000ee6:	0004      	movs	r4, r0
 8000ee8:	4667      	mov	r7, ip
 8000eea:	077b      	lsls	r3, r7, #29
 8000eec:	d1c6      	bne.n	8000e7c <__aeabi_dadd+0x10c>
 8000eee:	4645      	mov	r5, r8
 8000ef0:	0760      	lsls	r0, r4, #29
 8000ef2:	08ff      	lsrs	r7, r7, #3
 8000ef4:	4307      	orrs	r7, r0
 8000ef6:	08e4      	lsrs	r4, r4, #3
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <__aeabi_dadd+0x380>)
 8000efa:	429e      	cmp	r6, r3
 8000efc:	d030      	beq.n	8000f60 <__aeabi_dadd+0x1f0>
 8000efe:	0324      	lsls	r4, r4, #12
 8000f00:	0576      	lsls	r6, r6, #21
 8000f02:	0b24      	lsrs	r4, r4, #12
 8000f04:	0d76      	lsrs	r6, r6, #21
 8000f06:	e7d4      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f08:	1a33      	subs	r3, r6, r0
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dd78      	ble.n	8001002 <__aeabi_dadd+0x292>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d031      	beq.n	8000f78 <__aeabi_dadd+0x208>
 8000f14:	4876      	ldr	r0, [pc, #472]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d0ae      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	0400      	lsls	r0, r0, #16
 8000f1e:	4301      	orrs	r1, r0
 8000f20:	4653      	mov	r3, sl
 8000f22:	2b38      	cmp	r3, #56	; 0x38
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_dadd+0x1b8>
 8000f26:	e0e9      	b.n	80010fc <__aeabi_dadd+0x38c>
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	1e51      	subs	r1, r2, #1
 8000f2c:	418a      	sbcs	r2, r1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	19d2      	adds	r2, r2, r7
 8000f32:	42ba      	cmp	r2, r7
 8000f34:	41bf      	sbcs	r7, r7
 8000f36:	1909      	adds	r1, r1, r4
 8000f38:	427c      	negs	r4, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	190c      	adds	r4, r1, r4
 8000f3e:	0223      	lsls	r3, r4, #8
 8000f40:	d5d3      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f42:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f44:	3601      	adds	r6, #1
 8000f46:	429e      	cmp	r6, r3
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x1dc>
 8000f4a:	e13a      	b.n	80011c2 <__aeabi_dadd+0x452>
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <__aeabi_dadd+0x384>)
 8000f50:	401c      	ands	r4, r3
 8000f52:	087b      	lsrs	r3, r7, #1
 8000f54:	4007      	ands	r7, r0
 8000f56:	431f      	orrs	r7, r3
 8000f58:	07e0      	lsls	r0, r4, #31
 8000f5a:	4307      	orrs	r7, r0
 8000f5c:	0864      	lsrs	r4, r4, #1
 8000f5e:	e78b      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f60:	0023      	movs	r3, r4
 8000f62:	433b      	orrs	r3, r7
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dadd+0x1f8>
 8000f66:	e1cb      	b.n	8001300 <__aeabi_dadd+0x590>
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0312      	lsls	r2, r2, #12
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	0324      	lsls	r4, r4, #12
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	e79e      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f74:	002e      	movs	r6, r5
 8000f76:	e77f      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x210>
 8000f7e:	e0b4      	b.n	80010ea <__aeabi_dadd+0x37a>
 8000f80:	1e58      	subs	r0, r3, #1
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_dadd+0x218>
 8000f86:	e0de      	b.n	8001146 <__aeabi_dadd+0x3d6>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	42ba      	cmp	r2, r7
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	1864      	adds	r4, r4, r1
 8000f90:	425b      	negs	r3, r3
 8000f92:	18e4      	adds	r4, r4, r3
 8000f94:	0017      	movs	r7, r2
 8000f96:	2601      	movs	r6, #1
 8000f98:	0223      	lsls	r3, r4, #8
 8000f9a:	d5a6      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f9c:	2602      	movs	r6, #2
 8000f9e:	e7d5      	b.n	8000f4c <__aeabi_dadd+0x1dc>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d16e      	bne.n	8001082 <__aeabi_dadd+0x312>
 8000fa4:	1c70      	adds	r0, r6, #1
 8000fa6:	0540      	lsls	r0, r0, #21
 8000fa8:	0d40      	lsrs	r0, r0, #21
 8000faa:	2801      	cmp	r0, #1
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x240>
 8000fae:	e0f9      	b.n	80011a4 <__aeabi_dadd+0x434>
 8000fb0:	1ab8      	subs	r0, r7, r2
 8000fb2:	4684      	mov	ip, r0
 8000fb4:	4287      	cmp	r7, r0
 8000fb6:	4180      	sbcs	r0, r0
 8000fb8:	1ae5      	subs	r5, r4, r3
 8000fba:	4240      	negs	r0, r0
 8000fbc:	1a2d      	subs	r5, r5, r0
 8000fbe:	0228      	lsls	r0, r5, #8
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_dadd+0x254>
 8000fc2:	e089      	b.n	80010d8 <__aeabi_dadd+0x368>
 8000fc4:	1bd7      	subs	r7, r2, r7
 8000fc6:	42ba      	cmp	r2, r7
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	1b1c      	subs	r4, r3, r4
 8000fcc:	4252      	negs	r2, r2
 8000fce:	1aa5      	subs	r5, r4, r2
 8000fd0:	46d8      	mov	r8, fp
 8000fd2:	e729      	b.n	8000e28 <__aeabi_dadd+0xb8>
 8000fd4:	4645      	mov	r5, r8
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2700      	movs	r7, #0
 8000fda:	e76a      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000fdc:	4c45      	ldr	r4, [pc, #276]	; (80010f4 <__aeabi_dadd+0x384>)
 8000fde:	1af6      	subs	r6, r6, r3
 8000fe0:	402c      	ands	r4, r5
 8000fe2:	e749      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000fe4:	003d      	movs	r5, r7
 8000fe6:	3828      	subs	r0, #40	; 0x28
 8000fe8:	4085      	lsls	r5, r0
 8000fea:	2700      	movs	r7, #0
 8000fec:	e72e      	b.n	8000e4c <__aeabi_dadd+0xdc>
 8000fee:	0038      	movs	r0, r7
 8000ff0:	f001 fc74 	bl	80028dc <__clzsi2>
 8000ff4:	3020      	adds	r0, #32
 8000ff6:	e71d      	b.n	8000e34 <__aeabi_dadd+0xc4>
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	1e51      	subs	r1, r2, #1
 8000ffc:	418a      	sbcs	r2, r1
 8000ffe:	2100      	movs	r1, #0
 8001000:	e707      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_dadd+0x298>
 8001006:	e0f3      	b.n	80011f0 <__aeabi_dadd+0x480>
 8001008:	1c70      	adds	r0, r6, #1
 800100a:	0543      	lsls	r3, r0, #21
 800100c:	0d5b      	lsrs	r3, r3, #21
 800100e:	2b01      	cmp	r3, #1
 8001010:	dc00      	bgt.n	8001014 <__aeabi_dadd+0x2a4>
 8001012:	e0ad      	b.n	8001170 <__aeabi_dadd+0x400>
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <__aeabi_dadd+0x380>)
 8001016:	4298      	cmp	r0, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x2ac>
 800101a:	e0d1      	b.n	80011c0 <__aeabi_dadd+0x450>
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	42ba      	cmp	r2, r7
 8001020:	41bf      	sbcs	r7, r7
 8001022:	1864      	adds	r4, r4, r1
 8001024:	427f      	negs	r7, r7
 8001026:	19e4      	adds	r4, r4, r7
 8001028:	07e7      	lsls	r7, r4, #31
 800102a:	0852      	lsrs	r2, r2, #1
 800102c:	4317      	orrs	r7, r2
 800102e:	0864      	lsrs	r4, r4, #1
 8001030:	0006      	movs	r6, r0
 8001032:	e721      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001034:	482e      	ldr	r0, [pc, #184]	; (80010f0 <__aeabi_dadd+0x380>)
 8001036:	4285      	cmp	r5, r0
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x2cc>
 800103a:	e093      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800103c:	001d      	movs	r5, r3
 800103e:	e6d0      	b.n	8000de2 <__aeabi_dadd+0x72>
 8001040:	0029      	movs	r1, r5
 8001042:	3e1f      	subs	r6, #31
 8001044:	40f1      	lsrs	r1, r6
 8001046:	2b20      	cmp	r3, #32
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x2dc>
 800104a:	e08d      	b.n	8001168 <__aeabi_dadd+0x3f8>
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	409d      	lsls	r5, r3
 8001052:	432f      	orrs	r7, r5
 8001054:	1e7d      	subs	r5, r7, #1
 8001056:	41af      	sbcs	r7, r5
 8001058:	2400      	movs	r4, #0
 800105a:	430f      	orrs	r7, r1
 800105c:	2600      	movs	r6, #0
 800105e:	e744      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001060:	002b      	movs	r3, r5
 8001062:	0008      	movs	r0, r1
 8001064:	3b20      	subs	r3, #32
 8001066:	40d8      	lsrs	r0, r3
 8001068:	0003      	movs	r3, r0
 800106a:	2d20      	cmp	r5, #32
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x300>
 800106e:	e07d      	b.n	800116c <__aeabi_dadd+0x3fc>
 8001070:	2040      	movs	r0, #64	; 0x40
 8001072:	1b45      	subs	r5, r0, r5
 8001074:	40a9      	lsls	r1, r5
 8001076:	430a      	orrs	r2, r1
 8001078:	1e51      	subs	r1, r2, #1
 800107a:	418a      	sbcs	r2, r1
 800107c:	2100      	movs	r1, #0
 800107e:	431a      	orrs	r2, r3
 8001080:	e6c7      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001082:	2e00      	cmp	r6, #0
 8001084:	d050      	beq.n	8001128 <__aeabi_dadd+0x3b8>
 8001086:	4e1a      	ldr	r6, [pc, #104]	; (80010f0 <__aeabi_dadd+0x380>)
 8001088:	42b0      	cmp	r0, r6
 800108a:	d057      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800108c:	2680      	movs	r6, #128	; 0x80
 800108e:	426b      	negs	r3, r5
 8001090:	4699      	mov	r9, r3
 8001092:	0436      	lsls	r6, r6, #16
 8001094:	4334      	orrs	r4, r6
 8001096:	464b      	mov	r3, r9
 8001098:	2b38      	cmp	r3, #56	; 0x38
 800109a:	dd00      	ble.n	800109e <__aeabi_dadd+0x32e>
 800109c:	e0d6      	b.n	800124c <__aeabi_dadd+0x4dc>
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dadd+0x334>
 80010a2:	e135      	b.n	8001310 <__aeabi_dadd+0x5a0>
 80010a4:	2620      	movs	r6, #32
 80010a6:	1af5      	subs	r5, r6, r3
 80010a8:	0026      	movs	r6, r4
 80010aa:	40ae      	lsls	r6, r5
 80010ac:	46b2      	mov	sl, r6
 80010ae:	003e      	movs	r6, r7
 80010b0:	40de      	lsrs	r6, r3
 80010b2:	46ac      	mov	ip, r5
 80010b4:	0035      	movs	r5, r6
 80010b6:	4656      	mov	r6, sl
 80010b8:	432e      	orrs	r6, r5
 80010ba:	4665      	mov	r5, ip
 80010bc:	40af      	lsls	r7, r5
 80010be:	1e7d      	subs	r5, r7, #1
 80010c0:	41af      	sbcs	r7, r5
 80010c2:	40dc      	lsrs	r4, r3
 80010c4:	4337      	orrs	r7, r6
 80010c6:	1bd7      	subs	r7, r2, r7
 80010c8:	42ba      	cmp	r2, r7
 80010ca:	4192      	sbcs	r2, r2
 80010cc:	1b0c      	subs	r4, r1, r4
 80010ce:	4252      	negs	r2, r2
 80010d0:	1aa4      	subs	r4, r4, r2
 80010d2:	0006      	movs	r6, r0
 80010d4:	46d8      	mov	r8, fp
 80010d6:	e6a3      	b.n	8000e20 <__aeabi_dadd+0xb0>
 80010d8:	4664      	mov	r4, ip
 80010da:	4667      	mov	r7, ip
 80010dc:	432c      	orrs	r4, r5
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x372>
 80010e0:	e6a2      	b.n	8000e28 <__aeabi_dadd+0xb8>
 80010e2:	2500      	movs	r5, #0
 80010e4:	2600      	movs	r6, #0
 80010e6:	2700      	movs	r7, #0
 80010e8:	e706      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80010ea:	001e      	movs	r6, r3
 80010ec:	e6c4      	b.n	8000e78 <__aeabi_dadd+0x108>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	ff7fffff 	.word	0xff7fffff
 80010f8:	800fffff 	.word	0x800fffff
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	dc63      	bgt.n	80011c8 <__aeabi_dadd+0x458>
 8001100:	2020      	movs	r0, #32
 8001102:	1ac3      	subs	r3, r0, r3
 8001104:	0008      	movs	r0, r1
 8001106:	4098      	lsls	r0, r3
 8001108:	469c      	mov	ip, r3
 800110a:	4683      	mov	fp, r0
 800110c:	4653      	mov	r3, sl
 800110e:	0010      	movs	r0, r2
 8001110:	40d8      	lsrs	r0, r3
 8001112:	0003      	movs	r3, r0
 8001114:	4658      	mov	r0, fp
 8001116:	4318      	orrs	r0, r3
 8001118:	4663      	mov	r3, ip
 800111a:	409a      	lsls	r2, r3
 800111c:	1e53      	subs	r3, r2, #1
 800111e:	419a      	sbcs	r2, r3
 8001120:	4653      	mov	r3, sl
 8001122:	4302      	orrs	r2, r0
 8001124:	40d9      	lsrs	r1, r3
 8001126:	e703      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 8001128:	0026      	movs	r6, r4
 800112a:	433e      	orrs	r6, r7
 800112c:	d006      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800112e:	43eb      	mvns	r3, r5
 8001130:	4699      	mov	r9, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0c7      	beq.n	80010c6 <__aeabi_dadd+0x356>
 8001136:	4e94      	ldr	r6, [pc, #592]	; (8001388 <__aeabi_dadd+0x618>)
 8001138:	42b0      	cmp	r0, r6
 800113a:	d1ac      	bne.n	8001096 <__aeabi_dadd+0x326>
 800113c:	000c      	movs	r4, r1
 800113e:	0017      	movs	r7, r2
 8001140:	0006      	movs	r6, r0
 8001142:	46d8      	mov	r8, fp
 8001144:	e698      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001146:	4b90      	ldr	r3, [pc, #576]	; (8001388 <__aeabi_dadd+0x618>)
 8001148:	459a      	cmp	sl, r3
 800114a:	d00b      	beq.n	8001164 <__aeabi_dadd+0x3f4>
 800114c:	4682      	mov	sl, r0
 800114e:	e6e7      	b.n	8000f20 <__aeabi_dadd+0x1b0>
 8001150:	2800      	cmp	r0, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x3e6>
 8001154:	e09e      	b.n	8001294 <__aeabi_dadd+0x524>
 8001156:	0018      	movs	r0, r3
 8001158:	4310      	orrs	r0, r2
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x3ee>
 800115c:	e0e9      	b.n	8001332 <__aeabi_dadd+0x5c2>
 800115e:	001c      	movs	r4, r3
 8001160:	0017      	movs	r7, r2
 8001162:	46d8      	mov	r8, fp
 8001164:	4e88      	ldr	r6, [pc, #544]	; (8001388 <__aeabi_dadd+0x618>)
 8001166:	e687      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001168:	2500      	movs	r5, #0
 800116a:	e772      	b.n	8001052 <__aeabi_dadd+0x2e2>
 800116c:	2100      	movs	r1, #0
 800116e:	e782      	b.n	8001076 <__aeabi_dadd+0x306>
 8001170:	0023      	movs	r3, r4
 8001172:	433b      	orrs	r3, r7
 8001174:	2e00      	cmp	r6, #0
 8001176:	d000      	beq.n	800117a <__aeabi_dadd+0x40a>
 8001178:	e0ab      	b.n	80012d2 <__aeabi_dadd+0x562>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x410>
 800117e:	e0e7      	b.n	8001350 <__aeabi_dadd+0x5e0>
 8001180:	000b      	movs	r3, r1
 8001182:	4313      	orrs	r3, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x418>
 8001186:	e677      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001188:	18ba      	adds	r2, r7, r2
 800118a:	42ba      	cmp	r2, r7
 800118c:	41bf      	sbcs	r7, r7
 800118e:	1864      	adds	r4, r4, r1
 8001190:	427f      	negs	r7, r7
 8001192:	19e4      	adds	r4, r4, r7
 8001194:	0223      	lsls	r3, r4, #8
 8001196:	d400      	bmi.n	800119a <__aeabi_dadd+0x42a>
 8001198:	e0f2      	b.n	8001380 <__aeabi_dadd+0x610>
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <__aeabi_dadd+0x61c>)
 800119c:	0017      	movs	r7, r2
 800119e:	401c      	ands	r4, r3
 80011a0:	0006      	movs	r6, r0
 80011a2:	e669      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011a4:	0020      	movs	r0, r4
 80011a6:	4338      	orrs	r0, r7
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d1d1      	bne.n	8001150 <__aeabi_dadd+0x3e0>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d15b      	bne.n	8001268 <__aeabi_dadd+0x4f8>
 80011b0:	001c      	movs	r4, r3
 80011b2:	4314      	orrs	r4, r2
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x448>
 80011b6:	e0a8      	b.n	800130a <__aeabi_dadd+0x59a>
 80011b8:	001c      	movs	r4, r3
 80011ba:	0017      	movs	r7, r2
 80011bc:	46d8      	mov	r8, fp
 80011be:	e65b      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011c0:	0006      	movs	r6, r0
 80011c2:	2400      	movs	r4, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e697      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80011c8:	4650      	mov	r0, sl
 80011ca:	000b      	movs	r3, r1
 80011cc:	3820      	subs	r0, #32
 80011ce:	40c3      	lsrs	r3, r0
 80011d0:	4699      	mov	r9, r3
 80011d2:	4653      	mov	r3, sl
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x46a>
 80011d8:	e095      	b.n	8001306 <__aeabi_dadd+0x596>
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	4650      	mov	r0, sl
 80011de:	1a1b      	subs	r3, r3, r0
 80011e0:	4099      	lsls	r1, r3
 80011e2:	430a      	orrs	r2, r1
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	418a      	sbcs	r2, r1
 80011e8:	464b      	mov	r3, r9
 80011ea:	2100      	movs	r1, #0
 80011ec:	431a      	orrs	r2, r3
 80011ee:	e69f      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d130      	bne.n	8001256 <__aeabi_dadd+0x4e6>
 80011f4:	0026      	movs	r6, r4
 80011f6:	433e      	orrs	r6, r7
 80011f8:	d067      	beq.n	80012ca <__aeabi_dadd+0x55a>
 80011fa:	43db      	mvns	r3, r3
 80011fc:	469a      	mov	sl, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01c      	beq.n	800123c <__aeabi_dadd+0x4cc>
 8001202:	4e61      	ldr	r6, [pc, #388]	; (8001388 <__aeabi_dadd+0x618>)
 8001204:	42b0      	cmp	r0, r6
 8001206:	d060      	beq.n	80012ca <__aeabi_dadd+0x55a>
 8001208:	4653      	mov	r3, sl
 800120a:	2b38      	cmp	r3, #56	; 0x38
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0x4a0>
 800120e:	e096      	b.n	800133e <__aeabi_dadd+0x5ce>
 8001210:	2b1f      	cmp	r3, #31
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x4a6>
 8001214:	e09f      	b.n	8001356 <__aeabi_dadd+0x5e6>
 8001216:	2620      	movs	r6, #32
 8001218:	1af3      	subs	r3, r6, r3
 800121a:	0026      	movs	r6, r4
 800121c:	409e      	lsls	r6, r3
 800121e:	469c      	mov	ip, r3
 8001220:	46b3      	mov	fp, r6
 8001222:	4653      	mov	r3, sl
 8001224:	003e      	movs	r6, r7
 8001226:	40de      	lsrs	r6, r3
 8001228:	0033      	movs	r3, r6
 800122a:	465e      	mov	r6, fp
 800122c:	431e      	orrs	r6, r3
 800122e:	4663      	mov	r3, ip
 8001230:	409f      	lsls	r7, r3
 8001232:	1e7b      	subs	r3, r7, #1
 8001234:	419f      	sbcs	r7, r3
 8001236:	4653      	mov	r3, sl
 8001238:	40dc      	lsrs	r4, r3
 800123a:	4337      	orrs	r7, r6
 800123c:	18bf      	adds	r7, r7, r2
 800123e:	4297      	cmp	r7, r2
 8001240:	4192      	sbcs	r2, r2
 8001242:	1864      	adds	r4, r4, r1
 8001244:	4252      	negs	r2, r2
 8001246:	18a4      	adds	r4, r4, r2
 8001248:	0006      	movs	r6, r0
 800124a:	e678      	b.n	8000f3e <__aeabi_dadd+0x1ce>
 800124c:	4327      	orrs	r7, r4
 800124e:	1e7c      	subs	r4, r7, #1
 8001250:	41a7      	sbcs	r7, r4
 8001252:	2400      	movs	r4, #0
 8001254:	e737      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001256:	4e4c      	ldr	r6, [pc, #304]	; (8001388 <__aeabi_dadd+0x618>)
 8001258:	42b0      	cmp	r0, r6
 800125a:	d036      	beq.n	80012ca <__aeabi_dadd+0x55a>
 800125c:	2680      	movs	r6, #128	; 0x80
 800125e:	425b      	negs	r3, r3
 8001260:	0436      	lsls	r6, r6, #16
 8001262:	469a      	mov	sl, r3
 8001264:	4334      	orrs	r4, r6
 8001266:	e7cf      	b.n	8001208 <__aeabi_dadd+0x498>
 8001268:	0018      	movs	r0, r3
 800126a:	4310      	orrs	r0, r2
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x500>
 800126e:	e603      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001270:	1ab8      	subs	r0, r7, r2
 8001272:	4684      	mov	ip, r0
 8001274:	4567      	cmp	r7, ip
 8001276:	41ad      	sbcs	r5, r5
 8001278:	1ae0      	subs	r0, r4, r3
 800127a:	426d      	negs	r5, r5
 800127c:	1b40      	subs	r0, r0, r5
 800127e:	0205      	lsls	r5, r0, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x514>
 8001282:	e62c      	b.n	8000ede <__aeabi_dadd+0x16e>
 8001284:	1bd7      	subs	r7, r2, r7
 8001286:	42ba      	cmp	r2, r7
 8001288:	4192      	sbcs	r2, r2
 800128a:	1b1c      	subs	r4, r3, r4
 800128c:	4252      	negs	r2, r2
 800128e:	1aa4      	subs	r4, r4, r2
 8001290:	46d8      	mov	r8, fp
 8001292:	e5f1      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001294:	0018      	movs	r0, r3
 8001296:	4310      	orrs	r0, r2
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x52c>
 800129a:	e763      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800129c:	08f8      	lsrs	r0, r7, #3
 800129e:	0767      	lsls	r7, r4, #29
 80012a0:	4307      	orrs	r7, r0
 80012a2:	2080      	movs	r0, #128	; 0x80
 80012a4:	08e4      	lsrs	r4, r4, #3
 80012a6:	0300      	lsls	r0, r0, #12
 80012a8:	4204      	tst	r4, r0
 80012aa:	d008      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ac:	08dd      	lsrs	r5, r3, #3
 80012ae:	4205      	tst	r5, r0
 80012b0:	d105      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012b2:	08d2      	lsrs	r2, r2, #3
 80012b4:	0759      	lsls	r1, r3, #29
 80012b6:	4311      	orrs	r1, r2
 80012b8:	000f      	movs	r7, r1
 80012ba:	002c      	movs	r4, r5
 80012bc:	46d8      	mov	r8, fp
 80012be:	0f7b      	lsrs	r3, r7, #29
 80012c0:	00e4      	lsls	r4, r4, #3
 80012c2:	431c      	orrs	r4, r3
 80012c4:	00ff      	lsls	r7, r7, #3
 80012c6:	4e30      	ldr	r6, [pc, #192]	; (8001388 <__aeabi_dadd+0x618>)
 80012c8:	e5d6      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012ca:	000c      	movs	r4, r1
 80012cc:	0017      	movs	r7, r2
 80012ce:	0006      	movs	r6, r0
 80012d0:	e5d2      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d038      	beq.n	8001348 <__aeabi_dadd+0x5d8>
 80012d6:	000b      	movs	r3, r1
 80012d8:	4313      	orrs	r3, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x56e>
 80012dc:	e742      	b.n	8001164 <__aeabi_dadd+0x3f4>
 80012de:	08f8      	lsrs	r0, r7, #3
 80012e0:	0767      	lsls	r7, r4, #29
 80012e2:	4307      	orrs	r7, r0
 80012e4:	2080      	movs	r0, #128	; 0x80
 80012e6:	08e4      	lsrs	r4, r4, #3
 80012e8:	0300      	lsls	r0, r0, #12
 80012ea:	4204      	tst	r4, r0
 80012ec:	d0e7      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ee:	08cb      	lsrs	r3, r1, #3
 80012f0:	4203      	tst	r3, r0
 80012f2:	d1e4      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012f4:	08d2      	lsrs	r2, r2, #3
 80012f6:	0749      	lsls	r1, r1, #29
 80012f8:	4311      	orrs	r1, r2
 80012fa:	000f      	movs	r7, r1
 80012fc:	001c      	movs	r4, r3
 80012fe:	e7de      	b.n	80012be <__aeabi_dadd+0x54e>
 8001300:	2700      	movs	r7, #0
 8001302:	2400      	movs	r4, #0
 8001304:	e5d5      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8001306:	2100      	movs	r1, #0
 8001308:	e76b      	b.n	80011e2 <__aeabi_dadd+0x472>
 800130a:	2500      	movs	r5, #0
 800130c:	2700      	movs	r7, #0
 800130e:	e5f3      	b.n	8000ef8 <__aeabi_dadd+0x188>
 8001310:	464e      	mov	r6, r9
 8001312:	0025      	movs	r5, r4
 8001314:	3e20      	subs	r6, #32
 8001316:	40f5      	lsrs	r5, r6
 8001318:	464b      	mov	r3, r9
 800131a:	002e      	movs	r6, r5
 800131c:	2b20      	cmp	r3, #32
 800131e:	d02d      	beq.n	800137c <__aeabi_dadd+0x60c>
 8001320:	2540      	movs	r5, #64	; 0x40
 8001322:	1aed      	subs	r5, r5, r3
 8001324:	40ac      	lsls	r4, r5
 8001326:	4327      	orrs	r7, r4
 8001328:	1e7c      	subs	r4, r7, #1
 800132a:	41a7      	sbcs	r7, r4
 800132c:	2400      	movs	r4, #0
 800132e:	4337      	orrs	r7, r6
 8001330:	e6c9      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001332:	2480      	movs	r4, #128	; 0x80
 8001334:	2500      	movs	r5, #0
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	4e13      	ldr	r6, [pc, #76]	; (8001388 <__aeabi_dadd+0x618>)
 800133a:	2700      	movs	r7, #0
 800133c:	e5dc      	b.n	8000ef8 <__aeabi_dadd+0x188>
 800133e:	4327      	orrs	r7, r4
 8001340:	1e7c      	subs	r4, r7, #1
 8001342:	41a7      	sbcs	r7, r4
 8001344:	2400      	movs	r4, #0
 8001346:	e779      	b.n	800123c <__aeabi_dadd+0x4cc>
 8001348:	000c      	movs	r4, r1
 800134a:	0017      	movs	r7, r2
 800134c:	4e0e      	ldr	r6, [pc, #56]	; (8001388 <__aeabi_dadd+0x618>)
 800134e:	e593      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001350:	000c      	movs	r4, r1
 8001352:	0017      	movs	r7, r2
 8001354:	e590      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001356:	4656      	mov	r6, sl
 8001358:	0023      	movs	r3, r4
 800135a:	3e20      	subs	r6, #32
 800135c:	40f3      	lsrs	r3, r6
 800135e:	4699      	mov	r9, r3
 8001360:	4653      	mov	r3, sl
 8001362:	2b20      	cmp	r3, #32
 8001364:	d00e      	beq.n	8001384 <__aeabi_dadd+0x614>
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	4656      	mov	r6, sl
 800136a:	1b9b      	subs	r3, r3, r6
 800136c:	409c      	lsls	r4, r3
 800136e:	4327      	orrs	r7, r4
 8001370:	1e7c      	subs	r4, r7, #1
 8001372:	41a7      	sbcs	r7, r4
 8001374:	464b      	mov	r3, r9
 8001376:	2400      	movs	r4, #0
 8001378:	431f      	orrs	r7, r3
 800137a:	e75f      	b.n	800123c <__aeabi_dadd+0x4cc>
 800137c:	2400      	movs	r4, #0
 800137e:	e7d2      	b.n	8001326 <__aeabi_dadd+0x5b6>
 8001380:	0017      	movs	r7, r2
 8001382:	e5b2      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001384:	2400      	movs	r4, #0
 8001386:	e7f2      	b.n	800136e <__aeabi_dadd+0x5fe>
 8001388:	000007ff 	.word	0x000007ff
 800138c:	ff7fffff 	.word	0xff7fffff

08001390 <__aeabi_ddiv>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	4657      	mov	r7, sl
 8001394:	4645      	mov	r5, r8
 8001396:	46de      	mov	lr, fp
 8001398:	464e      	mov	r6, r9
 800139a:	b5e0      	push	{r5, r6, r7, lr}
 800139c:	004c      	lsls	r4, r1, #1
 800139e:	030e      	lsls	r6, r1, #12
 80013a0:	b087      	sub	sp, #28
 80013a2:	4683      	mov	fp, r0
 80013a4:	4692      	mov	sl, r2
 80013a6:	001d      	movs	r5, r3
 80013a8:	4680      	mov	r8, r0
 80013aa:	0b36      	lsrs	r6, r6, #12
 80013ac:	0d64      	lsrs	r4, r4, #21
 80013ae:	0fcf      	lsrs	r7, r1, #31
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d04f      	beq.n	8001454 <__aeabi_ddiv+0xc4>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <__aeabi_ddiv+0x1e4>)
 80013b6:	429c      	cmp	r4, r3
 80013b8:	d035      	beq.n	8001426 <__aeabi_ddiv+0x96>
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	0f42      	lsrs	r2, r0, #29
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	00f6      	lsls	r6, r6, #3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	4333      	orrs	r3, r6
 80013c6:	4699      	mov	r9, r3
 80013c8:	00c3      	lsls	r3, r0, #3
 80013ca:	4698      	mov	r8, r3
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <__aeabi_ddiv+0x1e8>)
 80013ce:	2600      	movs	r6, #0
 80013d0:	469c      	mov	ip, r3
 80013d2:	2300      	movs	r3, #0
 80013d4:	4464      	add	r4, ip
 80013d6:	9303      	str	r3, [sp, #12]
 80013d8:	032b      	lsls	r3, r5, #12
 80013da:	0b1b      	lsrs	r3, r3, #12
 80013dc:	469b      	mov	fp, r3
 80013de:	006b      	lsls	r3, r5, #1
 80013e0:	0fed      	lsrs	r5, r5, #31
 80013e2:	4650      	mov	r0, sl
 80013e4:	0d5b      	lsrs	r3, r3, #21
 80013e6:	9501      	str	r5, [sp, #4]
 80013e8:	d05e      	beq.n	80014a8 <__aeabi_ddiv+0x118>
 80013ea:	4a62      	ldr	r2, [pc, #392]	; (8001574 <__aeabi_ddiv+0x1e4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d053      	beq.n	8001498 <__aeabi_ddiv+0x108>
 80013f0:	465a      	mov	r2, fp
 80013f2:	00d1      	lsls	r1, r2, #3
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0f40      	lsrs	r0, r0, #29
 80013f8:	0412      	lsls	r2, r2, #16
 80013fa:	4302      	orrs	r2, r0
 80013fc:	430a      	orrs	r2, r1
 80013fe:	4693      	mov	fp, r2
 8001400:	4652      	mov	r2, sl
 8001402:	00d1      	lsls	r1, r2, #3
 8001404:	4a5c      	ldr	r2, [pc, #368]	; (8001578 <__aeabi_ddiv+0x1e8>)
 8001406:	4694      	mov	ip, r2
 8001408:	2200      	movs	r2, #0
 800140a:	4463      	add	r3, ip
 800140c:	0038      	movs	r0, r7
 800140e:	4068      	eors	r0, r5
 8001410:	4684      	mov	ip, r0
 8001412:	9002      	str	r0, [sp, #8]
 8001414:	1ae4      	subs	r4, r4, r3
 8001416:	4316      	orrs	r6, r2
 8001418:	2e0f      	cmp	r6, #15
 800141a:	d900      	bls.n	800141e <__aeabi_ddiv+0x8e>
 800141c:	e0b4      	b.n	8001588 <__aeabi_ddiv+0x1f8>
 800141e:	4b57      	ldr	r3, [pc, #348]	; (800157c <__aeabi_ddiv+0x1ec>)
 8001420:	00b6      	lsls	r6, r6, #2
 8001422:	599b      	ldr	r3, [r3, r6]
 8001424:	469f      	mov	pc, r3
 8001426:	0003      	movs	r3, r0
 8001428:	4333      	orrs	r3, r6
 800142a:	4699      	mov	r9, r3
 800142c:	d16c      	bne.n	8001508 <__aeabi_ddiv+0x178>
 800142e:	2300      	movs	r3, #0
 8001430:	4698      	mov	r8, r3
 8001432:	3302      	adds	r3, #2
 8001434:	2608      	movs	r6, #8
 8001436:	9303      	str	r3, [sp, #12]
 8001438:	e7ce      	b.n	80013d8 <__aeabi_ddiv+0x48>
 800143a:	46cb      	mov	fp, r9
 800143c:	4641      	mov	r1, r8
 800143e:	9a03      	ldr	r2, [sp, #12]
 8001440:	9701      	str	r7, [sp, #4]
 8001442:	2a02      	cmp	r2, #2
 8001444:	d165      	bne.n	8001512 <__aeabi_ddiv+0x182>
 8001446:	9b01      	ldr	r3, [sp, #4]
 8001448:	4c4a      	ldr	r4, [pc, #296]	; (8001574 <__aeabi_ddiv+0x1e4>)
 800144a:	469c      	mov	ip, r3
 800144c:	2300      	movs	r3, #0
 800144e:	2200      	movs	r2, #0
 8001450:	4698      	mov	r8, r3
 8001452:	e06b      	b.n	800152c <__aeabi_ddiv+0x19c>
 8001454:	0003      	movs	r3, r0
 8001456:	4333      	orrs	r3, r6
 8001458:	4699      	mov	r9, r3
 800145a:	d04e      	beq.n	80014fa <__aeabi_ddiv+0x16a>
 800145c:	2e00      	cmp	r6, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0xd2>
 8001460:	e1bc      	b.n	80017dc <__aeabi_ddiv+0x44c>
 8001462:	0030      	movs	r0, r6
 8001464:	f001 fa3a 	bl	80028dc <__clzsi2>
 8001468:	0003      	movs	r3, r0
 800146a:	3b0b      	subs	r3, #11
 800146c:	2b1c      	cmp	r3, #28
 800146e:	dd00      	ble.n	8001472 <__aeabi_ddiv+0xe2>
 8001470:	e1ac      	b.n	80017cc <__aeabi_ddiv+0x43c>
 8001472:	221d      	movs	r2, #29
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	465a      	mov	r2, fp
 8001478:	0001      	movs	r1, r0
 800147a:	40da      	lsrs	r2, r3
 800147c:	3908      	subs	r1, #8
 800147e:	408e      	lsls	r6, r1
 8001480:	0013      	movs	r3, r2
 8001482:	4333      	orrs	r3, r6
 8001484:	4699      	mov	r9, r3
 8001486:	465b      	mov	r3, fp
 8001488:	408b      	lsls	r3, r1
 800148a:	4698      	mov	r8, r3
 800148c:	2300      	movs	r3, #0
 800148e:	4c3c      	ldr	r4, [pc, #240]	; (8001580 <__aeabi_ddiv+0x1f0>)
 8001490:	2600      	movs	r6, #0
 8001492:	1a24      	subs	r4, r4, r0
 8001494:	9303      	str	r3, [sp, #12]
 8001496:	e79f      	b.n	80013d8 <__aeabi_ddiv+0x48>
 8001498:	4651      	mov	r1, sl
 800149a:	465a      	mov	r2, fp
 800149c:	4311      	orrs	r1, r2
 800149e:	d129      	bne.n	80014f4 <__aeabi_ddiv+0x164>
 80014a0:	2200      	movs	r2, #0
 80014a2:	4693      	mov	fp, r2
 80014a4:	3202      	adds	r2, #2
 80014a6:	e7b1      	b.n	800140c <__aeabi_ddiv+0x7c>
 80014a8:	4659      	mov	r1, fp
 80014aa:	4301      	orrs	r1, r0
 80014ac:	d01e      	beq.n	80014ec <__aeabi_ddiv+0x15c>
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_ddiv+0x126>
 80014b4:	e19e      	b.n	80017f4 <__aeabi_ddiv+0x464>
 80014b6:	4658      	mov	r0, fp
 80014b8:	f001 fa10 	bl	80028dc <__clzsi2>
 80014bc:	0003      	movs	r3, r0
 80014be:	3b0b      	subs	r3, #11
 80014c0:	2b1c      	cmp	r3, #28
 80014c2:	dd00      	ble.n	80014c6 <__aeabi_ddiv+0x136>
 80014c4:	e18f      	b.n	80017e6 <__aeabi_ddiv+0x456>
 80014c6:	0002      	movs	r2, r0
 80014c8:	4659      	mov	r1, fp
 80014ca:	3a08      	subs	r2, #8
 80014cc:	4091      	lsls	r1, r2
 80014ce:	468b      	mov	fp, r1
 80014d0:	211d      	movs	r1, #29
 80014d2:	1acb      	subs	r3, r1, r3
 80014d4:	4651      	mov	r1, sl
 80014d6:	40d9      	lsrs	r1, r3
 80014d8:	000b      	movs	r3, r1
 80014da:	4659      	mov	r1, fp
 80014dc:	430b      	orrs	r3, r1
 80014de:	4651      	mov	r1, sl
 80014e0:	469b      	mov	fp, r3
 80014e2:	4091      	lsls	r1, r2
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <__aeabi_ddiv+0x1f0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	1a1b      	subs	r3, r3, r0
 80014ea:	e78f      	b.n	800140c <__aeabi_ddiv+0x7c>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2201      	movs	r2, #1
 80014f0:	469b      	mov	fp, r3
 80014f2:	e78b      	b.n	800140c <__aeabi_ddiv+0x7c>
 80014f4:	4651      	mov	r1, sl
 80014f6:	2203      	movs	r2, #3
 80014f8:	e788      	b.n	800140c <__aeabi_ddiv+0x7c>
 80014fa:	2300      	movs	r3, #0
 80014fc:	4698      	mov	r8, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	2604      	movs	r6, #4
 8001502:	2400      	movs	r4, #0
 8001504:	9303      	str	r3, [sp, #12]
 8001506:	e767      	b.n	80013d8 <__aeabi_ddiv+0x48>
 8001508:	2303      	movs	r3, #3
 800150a:	46b1      	mov	r9, r6
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	260c      	movs	r6, #12
 8001510:	e762      	b.n	80013d8 <__aeabi_ddiv+0x48>
 8001512:	2a03      	cmp	r2, #3
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x188>
 8001516:	e25c      	b.n	80019d2 <__aeabi_ddiv+0x642>
 8001518:	9b01      	ldr	r3, [sp, #4]
 800151a:	2a01      	cmp	r2, #1
 800151c:	d000      	beq.n	8001520 <__aeabi_ddiv+0x190>
 800151e:	e1e4      	b.n	80018ea <__aeabi_ddiv+0x55a>
 8001520:	4013      	ands	r3, r2
 8001522:	469c      	mov	ip, r3
 8001524:	2300      	movs	r3, #0
 8001526:	2400      	movs	r4, #0
 8001528:	2200      	movs	r2, #0
 800152a:	4698      	mov	r8, r3
 800152c:	2100      	movs	r1, #0
 800152e:	0312      	lsls	r2, r2, #12
 8001530:	0b13      	lsrs	r3, r2, #12
 8001532:	0d0a      	lsrs	r2, r1, #20
 8001534:	0512      	lsls	r2, r2, #20
 8001536:	431a      	orrs	r2, r3
 8001538:	0523      	lsls	r3, r4, #20
 800153a:	4c12      	ldr	r4, [pc, #72]	; (8001584 <__aeabi_ddiv+0x1f4>)
 800153c:	4640      	mov	r0, r8
 800153e:	4022      	ands	r2, r4
 8001540:	4313      	orrs	r3, r2
 8001542:	4662      	mov	r2, ip
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	07d2      	lsls	r2, r2, #31
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	4313      	orrs	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	b007      	add	sp, #28
 8001550:	bc3c      	pop	{r2, r3, r4, r5}
 8001552:	4690      	mov	r8, r2
 8001554:	4699      	mov	r9, r3
 8001556:	46a2      	mov	sl, r4
 8001558:	46ab      	mov	fp, r5
 800155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155c:	2300      	movs	r3, #0
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	469c      	mov	ip, r3
 8001562:	0312      	lsls	r2, r2, #12
 8001564:	4698      	mov	r8, r3
 8001566:	4c03      	ldr	r4, [pc, #12]	; (8001574 <__aeabi_ddiv+0x1e4>)
 8001568:	e7e0      	b.n	800152c <__aeabi_ddiv+0x19c>
 800156a:	2300      	movs	r3, #0
 800156c:	4c01      	ldr	r4, [pc, #4]	; (8001574 <__aeabi_ddiv+0x1e4>)
 800156e:	2200      	movs	r2, #0
 8001570:	4698      	mov	r8, r3
 8001572:	e7db      	b.n	800152c <__aeabi_ddiv+0x19c>
 8001574:	000007ff 	.word	0x000007ff
 8001578:	fffffc01 	.word	0xfffffc01
 800157c:	08005234 	.word	0x08005234
 8001580:	fffffc0d 	.word	0xfffffc0d
 8001584:	800fffff 	.word	0x800fffff
 8001588:	45d9      	cmp	r9, fp
 800158a:	d900      	bls.n	800158e <__aeabi_ddiv+0x1fe>
 800158c:	e139      	b.n	8001802 <__aeabi_ddiv+0x472>
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0x202>
 8001590:	e134      	b.n	80017fc <__aeabi_ddiv+0x46c>
 8001592:	2300      	movs	r3, #0
 8001594:	4646      	mov	r6, r8
 8001596:	464d      	mov	r5, r9
 8001598:	469a      	mov	sl, r3
 800159a:	3c01      	subs	r4, #1
 800159c:	465b      	mov	r3, fp
 800159e:	0e0a      	lsrs	r2, r1, #24
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	431a      	orrs	r2, r3
 80015a4:	020b      	lsls	r3, r1, #8
 80015a6:	0c17      	lsrs	r7, r2, #16
 80015a8:	9303      	str	r3, [sp, #12]
 80015aa:	0413      	lsls	r3, r2, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	0039      	movs	r1, r7
 80015b0:	0028      	movs	r0, r5
 80015b2:	4690      	mov	r8, r2
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f7fe fdbb 	bl	8000130 <__udivsi3>
 80015ba:	0002      	movs	r2, r0
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	4683      	mov	fp, r0
 80015c0:	435a      	muls	r2, r3
 80015c2:	0028      	movs	r0, r5
 80015c4:	0039      	movs	r1, r7
 80015c6:	4691      	mov	r9, r2
 80015c8:	f7fe fe38 	bl	800023c <__aeabi_uidivmod>
 80015cc:	0c35      	lsrs	r5, r6, #16
 80015ce:	0409      	lsls	r1, r1, #16
 80015d0:	430d      	orrs	r5, r1
 80015d2:	45a9      	cmp	r9, r5
 80015d4:	d90d      	bls.n	80015f2 <__aeabi_ddiv+0x262>
 80015d6:	465b      	mov	r3, fp
 80015d8:	4445      	add	r5, r8
 80015da:	3b01      	subs	r3, #1
 80015dc:	45a8      	cmp	r8, r5
 80015de:	d900      	bls.n	80015e2 <__aeabi_ddiv+0x252>
 80015e0:	e13a      	b.n	8001858 <__aeabi_ddiv+0x4c8>
 80015e2:	45a9      	cmp	r9, r5
 80015e4:	d800      	bhi.n	80015e8 <__aeabi_ddiv+0x258>
 80015e6:	e137      	b.n	8001858 <__aeabi_ddiv+0x4c8>
 80015e8:	2302      	movs	r3, #2
 80015ea:	425b      	negs	r3, r3
 80015ec:	469c      	mov	ip, r3
 80015ee:	4445      	add	r5, r8
 80015f0:	44e3      	add	fp, ip
 80015f2:	464b      	mov	r3, r9
 80015f4:	1aeb      	subs	r3, r5, r3
 80015f6:	0039      	movs	r1, r7
 80015f8:	0018      	movs	r0, r3
 80015fa:	9304      	str	r3, [sp, #16]
 80015fc:	f7fe fd98 	bl	8000130 <__udivsi3>
 8001600:	9b01      	ldr	r3, [sp, #4]
 8001602:	0005      	movs	r5, r0
 8001604:	4343      	muls	r3, r0
 8001606:	0039      	movs	r1, r7
 8001608:	9804      	ldr	r0, [sp, #16]
 800160a:	4699      	mov	r9, r3
 800160c:	f7fe fe16 	bl	800023c <__aeabi_uidivmod>
 8001610:	0433      	lsls	r3, r6, #16
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	0c1b      	lsrs	r3, r3, #16
 8001616:	430b      	orrs	r3, r1
 8001618:	4599      	cmp	r9, r3
 800161a:	d909      	bls.n	8001630 <__aeabi_ddiv+0x2a0>
 800161c:	4443      	add	r3, r8
 800161e:	1e6a      	subs	r2, r5, #1
 8001620:	4598      	cmp	r8, r3
 8001622:	d900      	bls.n	8001626 <__aeabi_ddiv+0x296>
 8001624:	e11a      	b.n	800185c <__aeabi_ddiv+0x4cc>
 8001626:	4599      	cmp	r9, r3
 8001628:	d800      	bhi.n	800162c <__aeabi_ddiv+0x29c>
 800162a:	e117      	b.n	800185c <__aeabi_ddiv+0x4cc>
 800162c:	3d02      	subs	r5, #2
 800162e:	4443      	add	r3, r8
 8001630:	464a      	mov	r2, r9
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	465a      	mov	r2, fp
 8001636:	0412      	lsls	r2, r2, #16
 8001638:	432a      	orrs	r2, r5
 800163a:	9903      	ldr	r1, [sp, #12]
 800163c:	4693      	mov	fp, r2
 800163e:	0c10      	lsrs	r0, r2, #16
 8001640:	0c0a      	lsrs	r2, r1, #16
 8001642:	4691      	mov	r9, r2
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	465a      	mov	r2, fp
 8001648:	0c09      	lsrs	r1, r1, #16
 800164a:	464e      	mov	r6, r9
 800164c:	000d      	movs	r5, r1
 800164e:	0412      	lsls	r2, r2, #16
 8001650:	0c12      	lsrs	r2, r2, #16
 8001652:	4345      	muls	r5, r0
 8001654:	9105      	str	r1, [sp, #20]
 8001656:	4351      	muls	r1, r2
 8001658:	4372      	muls	r2, r6
 800165a:	4370      	muls	r0, r6
 800165c:	1952      	adds	r2, r2, r5
 800165e:	0c0e      	lsrs	r6, r1, #16
 8001660:	18b2      	adds	r2, r6, r2
 8001662:	4295      	cmp	r5, r2
 8001664:	d903      	bls.n	800166e <__aeabi_ddiv+0x2de>
 8001666:	2580      	movs	r5, #128	; 0x80
 8001668:	026d      	lsls	r5, r5, #9
 800166a:	46ac      	mov	ip, r5
 800166c:	4460      	add	r0, ip
 800166e:	0c15      	lsrs	r5, r2, #16
 8001670:	0409      	lsls	r1, r1, #16
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	0c09      	lsrs	r1, r1, #16
 8001676:	1828      	adds	r0, r5, r0
 8001678:	1852      	adds	r2, r2, r1
 800167a:	4283      	cmp	r3, r0
 800167c:	d200      	bcs.n	8001680 <__aeabi_ddiv+0x2f0>
 800167e:	e0ce      	b.n	800181e <__aeabi_ddiv+0x48e>
 8001680:	d100      	bne.n	8001684 <__aeabi_ddiv+0x2f4>
 8001682:	e0c8      	b.n	8001816 <__aeabi_ddiv+0x486>
 8001684:	1a1d      	subs	r5, r3, r0
 8001686:	4653      	mov	r3, sl
 8001688:	1a9e      	subs	r6, r3, r2
 800168a:	45b2      	cmp	sl, r6
 800168c:	4192      	sbcs	r2, r2
 800168e:	4252      	negs	r2, r2
 8001690:	1aab      	subs	r3, r5, r2
 8001692:	469a      	mov	sl, r3
 8001694:	4598      	cmp	r8, r3
 8001696:	d100      	bne.n	800169a <__aeabi_ddiv+0x30a>
 8001698:	e117      	b.n	80018ca <__aeabi_ddiv+0x53a>
 800169a:	0039      	movs	r1, r7
 800169c:	0018      	movs	r0, r3
 800169e:	f7fe fd47 	bl	8000130 <__udivsi3>
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	0005      	movs	r5, r0
 80016a6:	4343      	muls	r3, r0
 80016a8:	0039      	movs	r1, r7
 80016aa:	4650      	mov	r0, sl
 80016ac:	9304      	str	r3, [sp, #16]
 80016ae:	f7fe fdc5 	bl	800023c <__aeabi_uidivmod>
 80016b2:	9804      	ldr	r0, [sp, #16]
 80016b4:	040b      	lsls	r3, r1, #16
 80016b6:	0c31      	lsrs	r1, r6, #16
 80016b8:	4319      	orrs	r1, r3
 80016ba:	4288      	cmp	r0, r1
 80016bc:	d909      	bls.n	80016d2 <__aeabi_ddiv+0x342>
 80016be:	4441      	add	r1, r8
 80016c0:	1e6b      	subs	r3, r5, #1
 80016c2:	4588      	cmp	r8, r1
 80016c4:	d900      	bls.n	80016c8 <__aeabi_ddiv+0x338>
 80016c6:	e107      	b.n	80018d8 <__aeabi_ddiv+0x548>
 80016c8:	4288      	cmp	r0, r1
 80016ca:	d800      	bhi.n	80016ce <__aeabi_ddiv+0x33e>
 80016cc:	e104      	b.n	80018d8 <__aeabi_ddiv+0x548>
 80016ce:	3d02      	subs	r5, #2
 80016d0:	4441      	add	r1, r8
 80016d2:	9b04      	ldr	r3, [sp, #16]
 80016d4:	1acb      	subs	r3, r1, r3
 80016d6:	0018      	movs	r0, r3
 80016d8:	0039      	movs	r1, r7
 80016da:	9304      	str	r3, [sp, #16]
 80016dc:	f7fe fd28 	bl	8000130 <__udivsi3>
 80016e0:	9b01      	ldr	r3, [sp, #4]
 80016e2:	4682      	mov	sl, r0
 80016e4:	4343      	muls	r3, r0
 80016e6:	0039      	movs	r1, r7
 80016e8:	9804      	ldr	r0, [sp, #16]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	f7fe fda6 	bl	800023c <__aeabi_uidivmod>
 80016f0:	9801      	ldr	r0, [sp, #4]
 80016f2:	040b      	lsls	r3, r1, #16
 80016f4:	0431      	lsls	r1, r6, #16
 80016f6:	0c09      	lsrs	r1, r1, #16
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4288      	cmp	r0, r1
 80016fc:	d90d      	bls.n	800171a <__aeabi_ddiv+0x38a>
 80016fe:	4653      	mov	r3, sl
 8001700:	4441      	add	r1, r8
 8001702:	3b01      	subs	r3, #1
 8001704:	4588      	cmp	r8, r1
 8001706:	d900      	bls.n	800170a <__aeabi_ddiv+0x37a>
 8001708:	e0e8      	b.n	80018dc <__aeabi_ddiv+0x54c>
 800170a:	4288      	cmp	r0, r1
 800170c:	d800      	bhi.n	8001710 <__aeabi_ddiv+0x380>
 800170e:	e0e5      	b.n	80018dc <__aeabi_ddiv+0x54c>
 8001710:	2302      	movs	r3, #2
 8001712:	425b      	negs	r3, r3
 8001714:	469c      	mov	ip, r3
 8001716:	4441      	add	r1, r8
 8001718:	44e2      	add	sl, ip
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	042d      	lsls	r5, r5, #16
 800171e:	1ace      	subs	r6, r1, r3
 8001720:	4651      	mov	r1, sl
 8001722:	4329      	orrs	r1, r5
 8001724:	9d05      	ldr	r5, [sp, #20]
 8001726:	464f      	mov	r7, r9
 8001728:	002a      	movs	r2, r5
 800172a:	040b      	lsls	r3, r1, #16
 800172c:	0c08      	lsrs	r0, r1, #16
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	435a      	muls	r2, r3
 8001732:	4345      	muls	r5, r0
 8001734:	437b      	muls	r3, r7
 8001736:	4378      	muls	r0, r7
 8001738:	195b      	adds	r3, r3, r5
 800173a:	0c17      	lsrs	r7, r2, #16
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	429d      	cmp	r5, r3
 8001740:	d903      	bls.n	800174a <__aeabi_ddiv+0x3ba>
 8001742:	2580      	movs	r5, #128	; 0x80
 8001744:	026d      	lsls	r5, r5, #9
 8001746:	46ac      	mov	ip, r5
 8001748:	4460      	add	r0, ip
 800174a:	0c1d      	lsrs	r5, r3, #16
 800174c:	0412      	lsls	r2, r2, #16
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	1828      	adds	r0, r5, r0
 8001754:	189b      	adds	r3, r3, r2
 8001756:	4286      	cmp	r6, r0
 8001758:	d200      	bcs.n	800175c <__aeabi_ddiv+0x3cc>
 800175a:	e093      	b.n	8001884 <__aeabi_ddiv+0x4f4>
 800175c:	d100      	bne.n	8001760 <__aeabi_ddiv+0x3d0>
 800175e:	e08e      	b.n	800187e <__aeabi_ddiv+0x4ee>
 8001760:	2301      	movs	r3, #1
 8001762:	4319      	orrs	r1, r3
 8001764:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <__aeabi_ddiv+0x658>)
 8001766:	18e3      	adds	r3, r4, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	dc00      	bgt.n	800176e <__aeabi_ddiv+0x3de>
 800176c:	e099      	b.n	80018a2 <__aeabi_ddiv+0x512>
 800176e:	074a      	lsls	r2, r1, #29
 8001770:	d000      	beq.n	8001774 <__aeabi_ddiv+0x3e4>
 8001772:	e09e      	b.n	80018b2 <__aeabi_ddiv+0x522>
 8001774:	465a      	mov	r2, fp
 8001776:	01d2      	lsls	r2, r2, #7
 8001778:	d506      	bpl.n	8001788 <__aeabi_ddiv+0x3f8>
 800177a:	465a      	mov	r2, fp
 800177c:	4b9b      	ldr	r3, [pc, #620]	; (80019ec <__aeabi_ddiv+0x65c>)
 800177e:	401a      	ands	r2, r3
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	4693      	mov	fp, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	18e3      	adds	r3, r4, r3
 8001788:	4a99      	ldr	r2, [pc, #612]	; (80019f0 <__aeabi_ddiv+0x660>)
 800178a:	4293      	cmp	r3, r2
 800178c:	dd68      	ble.n	8001860 <__aeabi_ddiv+0x4d0>
 800178e:	2301      	movs	r3, #1
 8001790:	9a02      	ldr	r2, [sp, #8]
 8001792:	4c98      	ldr	r4, [pc, #608]	; (80019f4 <__aeabi_ddiv+0x664>)
 8001794:	401a      	ands	r2, r3
 8001796:	2300      	movs	r3, #0
 8001798:	4694      	mov	ip, r2
 800179a:	4698      	mov	r8, r3
 800179c:	2200      	movs	r2, #0
 800179e:	e6c5      	b.n	800152c <__aeabi_ddiv+0x19c>
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	464b      	mov	r3, r9
 80017a4:	0312      	lsls	r2, r2, #12
 80017a6:	4213      	tst	r3, r2
 80017a8:	d00a      	beq.n	80017c0 <__aeabi_ddiv+0x430>
 80017aa:	465b      	mov	r3, fp
 80017ac:	4213      	tst	r3, r2
 80017ae:	d106      	bne.n	80017be <__aeabi_ddiv+0x42e>
 80017b0:	431a      	orrs	r2, r3
 80017b2:	0312      	lsls	r2, r2, #12
 80017b4:	0b12      	lsrs	r2, r2, #12
 80017b6:	46ac      	mov	ip, r5
 80017b8:	4688      	mov	r8, r1
 80017ba:	4c8e      	ldr	r4, [pc, #568]	; (80019f4 <__aeabi_ddiv+0x664>)
 80017bc:	e6b6      	b.n	800152c <__aeabi_ddiv+0x19c>
 80017be:	464b      	mov	r3, r9
 80017c0:	431a      	orrs	r2, r3
 80017c2:	0312      	lsls	r2, r2, #12
 80017c4:	0b12      	lsrs	r2, r2, #12
 80017c6:	46bc      	mov	ip, r7
 80017c8:	4c8a      	ldr	r4, [pc, #552]	; (80019f4 <__aeabi_ddiv+0x664>)
 80017ca:	e6af      	b.n	800152c <__aeabi_ddiv+0x19c>
 80017cc:	0003      	movs	r3, r0
 80017ce:	465a      	mov	r2, fp
 80017d0:	3b28      	subs	r3, #40	; 0x28
 80017d2:	409a      	lsls	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	4691      	mov	r9, r2
 80017d8:	4698      	mov	r8, r3
 80017da:	e657      	b.n	800148c <__aeabi_ddiv+0xfc>
 80017dc:	4658      	mov	r0, fp
 80017de:	f001 f87d 	bl	80028dc <__clzsi2>
 80017e2:	3020      	adds	r0, #32
 80017e4:	e640      	b.n	8001468 <__aeabi_ddiv+0xd8>
 80017e6:	0003      	movs	r3, r0
 80017e8:	4652      	mov	r2, sl
 80017ea:	3b28      	subs	r3, #40	; 0x28
 80017ec:	409a      	lsls	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	4693      	mov	fp, r2
 80017f2:	e677      	b.n	80014e4 <__aeabi_ddiv+0x154>
 80017f4:	f001 f872 	bl	80028dc <__clzsi2>
 80017f8:	3020      	adds	r0, #32
 80017fa:	e65f      	b.n	80014bc <__aeabi_ddiv+0x12c>
 80017fc:	4588      	cmp	r8, r1
 80017fe:	d200      	bcs.n	8001802 <__aeabi_ddiv+0x472>
 8001800:	e6c7      	b.n	8001592 <__aeabi_ddiv+0x202>
 8001802:	464b      	mov	r3, r9
 8001804:	07de      	lsls	r6, r3, #31
 8001806:	085d      	lsrs	r5, r3, #1
 8001808:	4643      	mov	r3, r8
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	431e      	orrs	r6, r3
 800180e:	4643      	mov	r3, r8
 8001810:	07db      	lsls	r3, r3, #31
 8001812:	469a      	mov	sl, r3
 8001814:	e6c2      	b.n	800159c <__aeabi_ddiv+0x20c>
 8001816:	2500      	movs	r5, #0
 8001818:	4592      	cmp	sl, r2
 800181a:	d300      	bcc.n	800181e <__aeabi_ddiv+0x48e>
 800181c:	e733      	b.n	8001686 <__aeabi_ddiv+0x2f6>
 800181e:	9e03      	ldr	r6, [sp, #12]
 8001820:	4659      	mov	r1, fp
 8001822:	46b4      	mov	ip, r6
 8001824:	44e2      	add	sl, ip
 8001826:	45b2      	cmp	sl, r6
 8001828:	41ad      	sbcs	r5, r5
 800182a:	426d      	negs	r5, r5
 800182c:	4445      	add	r5, r8
 800182e:	18eb      	adds	r3, r5, r3
 8001830:	3901      	subs	r1, #1
 8001832:	4598      	cmp	r8, r3
 8001834:	d207      	bcs.n	8001846 <__aeabi_ddiv+0x4b6>
 8001836:	4298      	cmp	r0, r3
 8001838:	d900      	bls.n	800183c <__aeabi_ddiv+0x4ac>
 800183a:	e07f      	b.n	800193c <__aeabi_ddiv+0x5ac>
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x4b0>
 800183e:	e0bc      	b.n	80019ba <__aeabi_ddiv+0x62a>
 8001840:	1a1d      	subs	r5, r3, r0
 8001842:	468b      	mov	fp, r1
 8001844:	e71f      	b.n	8001686 <__aeabi_ddiv+0x2f6>
 8001846:	4598      	cmp	r8, r3
 8001848:	d1fa      	bne.n	8001840 <__aeabi_ddiv+0x4b0>
 800184a:	9d03      	ldr	r5, [sp, #12]
 800184c:	4555      	cmp	r5, sl
 800184e:	d9f2      	bls.n	8001836 <__aeabi_ddiv+0x4a6>
 8001850:	4643      	mov	r3, r8
 8001852:	468b      	mov	fp, r1
 8001854:	1a1d      	subs	r5, r3, r0
 8001856:	e716      	b.n	8001686 <__aeabi_ddiv+0x2f6>
 8001858:	469b      	mov	fp, r3
 800185a:	e6ca      	b.n	80015f2 <__aeabi_ddiv+0x262>
 800185c:	0015      	movs	r5, r2
 800185e:	e6e7      	b.n	8001630 <__aeabi_ddiv+0x2a0>
 8001860:	465a      	mov	r2, fp
 8001862:	08c9      	lsrs	r1, r1, #3
 8001864:	0752      	lsls	r2, r2, #29
 8001866:	430a      	orrs	r2, r1
 8001868:	055b      	lsls	r3, r3, #21
 800186a:	4690      	mov	r8, r2
 800186c:	0d5c      	lsrs	r4, r3, #21
 800186e:	465a      	mov	r2, fp
 8001870:	2301      	movs	r3, #1
 8001872:	9902      	ldr	r1, [sp, #8]
 8001874:	0252      	lsls	r2, r2, #9
 8001876:	4019      	ands	r1, r3
 8001878:	0b12      	lsrs	r2, r2, #12
 800187a:	468c      	mov	ip, r1
 800187c:	e656      	b.n	800152c <__aeabi_ddiv+0x19c>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x4f4>
 8001882:	e76f      	b.n	8001764 <__aeabi_ddiv+0x3d4>
 8001884:	4446      	add	r6, r8
 8001886:	1e4a      	subs	r2, r1, #1
 8001888:	45b0      	cmp	r8, r6
 800188a:	d929      	bls.n	80018e0 <__aeabi_ddiv+0x550>
 800188c:	0011      	movs	r1, r2
 800188e:	4286      	cmp	r6, r0
 8001890:	d000      	beq.n	8001894 <__aeabi_ddiv+0x504>
 8001892:	e765      	b.n	8001760 <__aeabi_ddiv+0x3d0>
 8001894:	9a03      	ldr	r2, [sp, #12]
 8001896:	4293      	cmp	r3, r2
 8001898:	d000      	beq.n	800189c <__aeabi_ddiv+0x50c>
 800189a:	e761      	b.n	8001760 <__aeabi_ddiv+0x3d0>
 800189c:	e762      	b.n	8001764 <__aeabi_ddiv+0x3d4>
 800189e:	2101      	movs	r1, #1
 80018a0:	4249      	negs	r1, r1
 80018a2:	2001      	movs	r0, #1
 80018a4:	1ac2      	subs	r2, r0, r3
 80018a6:	2a38      	cmp	r2, #56	; 0x38
 80018a8:	dd21      	ble.n	80018ee <__aeabi_ddiv+0x55e>
 80018aa:	9b02      	ldr	r3, [sp, #8]
 80018ac:	4003      	ands	r3, r0
 80018ae:	469c      	mov	ip, r3
 80018b0:	e638      	b.n	8001524 <__aeabi_ddiv+0x194>
 80018b2:	220f      	movs	r2, #15
 80018b4:	400a      	ands	r2, r1
 80018b6:	2a04      	cmp	r2, #4
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x52c>
 80018ba:	e75b      	b.n	8001774 <__aeabi_ddiv+0x3e4>
 80018bc:	000a      	movs	r2, r1
 80018be:	1d11      	adds	r1, r2, #4
 80018c0:	4291      	cmp	r1, r2
 80018c2:	4192      	sbcs	r2, r2
 80018c4:	4252      	negs	r2, r2
 80018c6:	4493      	add	fp, r2
 80018c8:	e754      	b.n	8001774 <__aeabi_ddiv+0x3e4>
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <__aeabi_ddiv+0x658>)
 80018cc:	18e3      	adds	r3, r4, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dde5      	ble.n	800189e <__aeabi_ddiv+0x50e>
 80018d2:	2201      	movs	r2, #1
 80018d4:	4252      	negs	r2, r2
 80018d6:	e7f2      	b.n	80018be <__aeabi_ddiv+0x52e>
 80018d8:	001d      	movs	r5, r3
 80018da:	e6fa      	b.n	80016d2 <__aeabi_ddiv+0x342>
 80018dc:	469a      	mov	sl, r3
 80018de:	e71c      	b.n	800171a <__aeabi_ddiv+0x38a>
 80018e0:	42b0      	cmp	r0, r6
 80018e2:	d839      	bhi.n	8001958 <__aeabi_ddiv+0x5c8>
 80018e4:	d06e      	beq.n	80019c4 <__aeabi_ddiv+0x634>
 80018e6:	0011      	movs	r1, r2
 80018e8:	e73a      	b.n	8001760 <__aeabi_ddiv+0x3d0>
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	e73a      	b.n	8001764 <__aeabi_ddiv+0x3d4>
 80018ee:	2a1f      	cmp	r2, #31
 80018f0:	dc3c      	bgt.n	800196c <__aeabi_ddiv+0x5dc>
 80018f2:	2320      	movs	r3, #32
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	000c      	movs	r4, r1
 80018f8:	4658      	mov	r0, fp
 80018fa:	4099      	lsls	r1, r3
 80018fc:	4098      	lsls	r0, r3
 80018fe:	1e4b      	subs	r3, r1, #1
 8001900:	4199      	sbcs	r1, r3
 8001902:	465b      	mov	r3, fp
 8001904:	40d4      	lsrs	r4, r2
 8001906:	40d3      	lsrs	r3, r2
 8001908:	4320      	orrs	r0, r4
 800190a:	4308      	orrs	r0, r1
 800190c:	001a      	movs	r2, r3
 800190e:	0743      	lsls	r3, r0, #29
 8001910:	d009      	beq.n	8001926 <__aeabi_ddiv+0x596>
 8001912:	230f      	movs	r3, #15
 8001914:	4003      	ands	r3, r0
 8001916:	2b04      	cmp	r3, #4
 8001918:	d005      	beq.n	8001926 <__aeabi_ddiv+0x596>
 800191a:	0001      	movs	r1, r0
 800191c:	1d08      	adds	r0, r1, #4
 800191e:	4288      	cmp	r0, r1
 8001920:	419b      	sbcs	r3, r3
 8001922:	425b      	negs	r3, r3
 8001924:	18d2      	adds	r2, r2, r3
 8001926:	0213      	lsls	r3, r2, #8
 8001928:	d53a      	bpl.n	80019a0 <__aeabi_ddiv+0x610>
 800192a:	2301      	movs	r3, #1
 800192c:	9a02      	ldr	r2, [sp, #8]
 800192e:	2401      	movs	r4, #1
 8001930:	401a      	ands	r2, r3
 8001932:	2300      	movs	r3, #0
 8001934:	4694      	mov	ip, r2
 8001936:	4698      	mov	r8, r3
 8001938:	2200      	movs	r2, #0
 800193a:	e5f7      	b.n	800152c <__aeabi_ddiv+0x19c>
 800193c:	2102      	movs	r1, #2
 800193e:	4249      	negs	r1, r1
 8001940:	468c      	mov	ip, r1
 8001942:	9d03      	ldr	r5, [sp, #12]
 8001944:	44e3      	add	fp, ip
 8001946:	46ac      	mov	ip, r5
 8001948:	44e2      	add	sl, ip
 800194a:	45aa      	cmp	sl, r5
 800194c:	41ad      	sbcs	r5, r5
 800194e:	426d      	negs	r5, r5
 8001950:	4445      	add	r5, r8
 8001952:	18ed      	adds	r5, r5, r3
 8001954:	1a2d      	subs	r5, r5, r0
 8001956:	e696      	b.n	8001686 <__aeabi_ddiv+0x2f6>
 8001958:	1e8a      	subs	r2, r1, #2
 800195a:	9903      	ldr	r1, [sp, #12]
 800195c:	004d      	lsls	r5, r1, #1
 800195e:	428d      	cmp	r5, r1
 8001960:	4189      	sbcs	r1, r1
 8001962:	4249      	negs	r1, r1
 8001964:	4441      	add	r1, r8
 8001966:	1876      	adds	r6, r6, r1
 8001968:	9503      	str	r5, [sp, #12]
 800196a:	e78f      	b.n	800188c <__aeabi_ddiv+0x4fc>
 800196c:	201f      	movs	r0, #31
 800196e:	4240      	negs	r0, r0
 8001970:	1ac3      	subs	r3, r0, r3
 8001972:	4658      	mov	r0, fp
 8001974:	40d8      	lsrs	r0, r3
 8001976:	0003      	movs	r3, r0
 8001978:	2a20      	cmp	r2, #32
 800197a:	d028      	beq.n	80019ce <__aeabi_ddiv+0x63e>
 800197c:	2040      	movs	r0, #64	; 0x40
 800197e:	465d      	mov	r5, fp
 8001980:	1a82      	subs	r2, r0, r2
 8001982:	4095      	lsls	r5, r2
 8001984:	4329      	orrs	r1, r5
 8001986:	1e4a      	subs	r2, r1, #1
 8001988:	4191      	sbcs	r1, r2
 800198a:	4319      	orrs	r1, r3
 800198c:	2307      	movs	r3, #7
 800198e:	2200      	movs	r2, #0
 8001990:	400b      	ands	r3, r1
 8001992:	d009      	beq.n	80019a8 <__aeabi_ddiv+0x618>
 8001994:	230f      	movs	r3, #15
 8001996:	2200      	movs	r2, #0
 8001998:	400b      	ands	r3, r1
 800199a:	0008      	movs	r0, r1
 800199c:	2b04      	cmp	r3, #4
 800199e:	d1bd      	bne.n	800191c <__aeabi_ddiv+0x58c>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0753      	lsls	r3, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	0b12      	lsrs	r2, r2, #12
 80019a8:	08c9      	lsrs	r1, r1, #3
 80019aa:	4319      	orrs	r1, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	4688      	mov	r8, r1
 80019b0:	9902      	ldr	r1, [sp, #8]
 80019b2:	2400      	movs	r4, #0
 80019b4:	4019      	ands	r1, r3
 80019b6:	468c      	mov	ip, r1
 80019b8:	e5b8      	b.n	800152c <__aeabi_ddiv+0x19c>
 80019ba:	4552      	cmp	r2, sl
 80019bc:	d8be      	bhi.n	800193c <__aeabi_ddiv+0x5ac>
 80019be:	468b      	mov	fp, r1
 80019c0:	2500      	movs	r5, #0
 80019c2:	e660      	b.n	8001686 <__aeabi_ddiv+0x2f6>
 80019c4:	9d03      	ldr	r5, [sp, #12]
 80019c6:	429d      	cmp	r5, r3
 80019c8:	d3c6      	bcc.n	8001958 <__aeabi_ddiv+0x5c8>
 80019ca:	0011      	movs	r1, r2
 80019cc:	e762      	b.n	8001894 <__aeabi_ddiv+0x504>
 80019ce:	2500      	movs	r5, #0
 80019d0:	e7d8      	b.n	8001984 <__aeabi_ddiv+0x5f4>
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	465b      	mov	r3, fp
 80019d6:	0312      	lsls	r2, r2, #12
 80019d8:	431a      	orrs	r2, r3
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	0312      	lsls	r2, r2, #12
 80019de:	0b12      	lsrs	r2, r2, #12
 80019e0:	469c      	mov	ip, r3
 80019e2:	4688      	mov	r8, r1
 80019e4:	4c03      	ldr	r4, [pc, #12]	; (80019f4 <__aeabi_ddiv+0x664>)
 80019e6:	e5a1      	b.n	800152c <__aeabi_ddiv+0x19c>
 80019e8:	000003ff 	.word	0x000003ff
 80019ec:	feffffff 	.word	0xfeffffff
 80019f0:	000007fe 	.word	0x000007fe
 80019f4:	000007ff 	.word	0x000007ff

080019f8 <__eqdf2>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	464f      	mov	r7, r9
 80019fc:	4646      	mov	r6, r8
 80019fe:	46d6      	mov	lr, sl
 8001a00:	005c      	lsls	r4, r3, #1
 8001a02:	b5c0      	push	{r6, r7, lr}
 8001a04:	031f      	lsls	r7, r3, #12
 8001a06:	0fdb      	lsrs	r3, r3, #31
 8001a08:	469a      	mov	sl, r3
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <__eqdf2+0x70>)
 8001a0c:	030e      	lsls	r6, r1, #12
 8001a0e:	004d      	lsls	r5, r1, #1
 8001a10:	4684      	mov	ip, r0
 8001a12:	4680      	mov	r8, r0
 8001a14:	0b36      	lsrs	r6, r6, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	0fc9      	lsrs	r1, r1, #31
 8001a1a:	4691      	mov	r9, r2
 8001a1c:	0b3f      	lsrs	r7, r7, #12
 8001a1e:	0d64      	lsrs	r4, r4, #21
 8001a20:	2001      	movs	r0, #1
 8001a22:	429d      	cmp	r5, r3
 8001a24:	d008      	beq.n	8001a38 <__eqdf2+0x40>
 8001a26:	429c      	cmp	r4, r3
 8001a28:	d001      	beq.n	8001a2e <__eqdf2+0x36>
 8001a2a:	42a5      	cmp	r5, r4
 8001a2c:	d00b      	beq.n	8001a46 <__eqdf2+0x4e>
 8001a2e:	bc1c      	pop	{r2, r3, r4}
 8001a30:	4690      	mov	r8, r2
 8001a32:	4699      	mov	r9, r3
 8001a34:	46a2      	mov	sl, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	4663      	mov	r3, ip
 8001a3a:	4333      	orrs	r3, r6
 8001a3c:	d1f7      	bne.n	8001a2e <__eqdf2+0x36>
 8001a3e:	42ac      	cmp	r4, r5
 8001a40:	d1f5      	bne.n	8001a2e <__eqdf2+0x36>
 8001a42:	433a      	orrs	r2, r7
 8001a44:	d1f3      	bne.n	8001a2e <__eqdf2+0x36>
 8001a46:	2001      	movs	r0, #1
 8001a48:	42be      	cmp	r6, r7
 8001a4a:	d1f0      	bne.n	8001a2e <__eqdf2+0x36>
 8001a4c:	45c8      	cmp	r8, r9
 8001a4e:	d1ee      	bne.n	8001a2e <__eqdf2+0x36>
 8001a50:	4551      	cmp	r1, sl
 8001a52:	d007      	beq.n	8001a64 <__eqdf2+0x6c>
 8001a54:	2d00      	cmp	r5, #0
 8001a56:	d1ea      	bne.n	8001a2e <__eqdf2+0x36>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	431e      	orrs	r6, r3
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	1e46      	subs	r6, r0, #1
 8001a60:	41b0      	sbcs	r0, r6
 8001a62:	e7e4      	b.n	8001a2e <__eqdf2+0x36>
 8001a64:	2000      	movs	r0, #0
 8001a66:	e7e2      	b.n	8001a2e <__eqdf2+0x36>
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__gedf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4645      	mov	r5, r8
 8001a70:	46de      	mov	lr, fp
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	031f      	lsls	r7, r3, #12
 8001a7a:	0b3d      	lsrs	r5, r7, #12
 8001a7c:	4f2c      	ldr	r7, [pc, #176]	; (8001b30 <__gedf2+0xc4>)
 8001a7e:	030e      	lsls	r6, r1, #12
 8001a80:	004c      	lsls	r4, r1, #1
 8001a82:	46ab      	mov	fp, r5
 8001a84:	005d      	lsls	r5, r3, #1
 8001a86:	4684      	mov	ip, r0
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	0d64      	lsrs	r4, r4, #21
 8001a8c:	0fc9      	lsrs	r1, r1, #31
 8001a8e:	4690      	mov	r8, r2
 8001a90:	0d6d      	lsrs	r5, r5, #21
 8001a92:	0fdb      	lsrs	r3, r3, #31
 8001a94:	42bc      	cmp	r4, r7
 8001a96:	d02a      	beq.n	8001aee <__gedf2+0x82>
 8001a98:	4f25      	ldr	r7, [pc, #148]	; (8001b30 <__gedf2+0xc4>)
 8001a9a:	42bd      	cmp	r5, r7
 8001a9c:	d02d      	beq.n	8001afa <__gedf2+0x8e>
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d10f      	bne.n	8001ac2 <__gedf2+0x56>
 8001aa2:	4330      	orrs	r0, r6
 8001aa4:	0007      	movs	r7, r0
 8001aa6:	4681      	mov	r9, r0
 8001aa8:	4278      	negs	r0, r7
 8001aaa:	4178      	adcs	r0, r7
 8001aac:	b2c0      	uxtb	r0, r0
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	d117      	bne.n	8001ae2 <__gedf2+0x76>
 8001ab2:	465f      	mov	r7, fp
 8001ab4:	433a      	orrs	r2, r7
 8001ab6:	d114      	bne.n	8001ae2 <__gedf2+0x76>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	2000      	movs	r0, #0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <__gedf2+0x6a>
 8001ac0:	e006      	b.n	8001ad0 <__gedf2+0x64>
 8001ac2:	2d00      	cmp	r5, #0
 8001ac4:	d102      	bne.n	8001acc <__gedf2+0x60>
 8001ac6:	4658      	mov	r0, fp
 8001ac8:	4302      	orrs	r2, r0
 8001aca:	d001      	beq.n	8001ad0 <__gedf2+0x64>
 8001acc:	4299      	cmp	r1, r3
 8001ace:	d018      	beq.n	8001b02 <__gedf2+0x96>
 8001ad0:	4248      	negs	r0, r1
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4308      	orrs	r0, r1
 8001ad6:	bc3c      	pop	{r2, r3, r4, r5}
 8001ad8:	4690      	mov	r8, r2
 8001ada:	4699      	mov	r9, r3
 8001adc:	46a2      	mov	sl, r4
 8001ade:	46ab      	mov	fp, r5
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d0f2      	beq.n	8001acc <__gedf2+0x60>
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4318      	orrs	r0, r3
 8001aec:	e7f3      	b.n	8001ad6 <__gedf2+0x6a>
 8001aee:	0037      	movs	r7, r6
 8001af0:	4307      	orrs	r7, r0
 8001af2:	d0d1      	beq.n	8001a98 <__gedf2+0x2c>
 8001af4:	2002      	movs	r0, #2
 8001af6:	4240      	negs	r0, r0
 8001af8:	e7ed      	b.n	8001ad6 <__gedf2+0x6a>
 8001afa:	465f      	mov	r7, fp
 8001afc:	4317      	orrs	r7, r2
 8001afe:	d0ce      	beq.n	8001a9e <__gedf2+0x32>
 8001b00:	e7f8      	b.n	8001af4 <__gedf2+0x88>
 8001b02:	42ac      	cmp	r4, r5
 8001b04:	dce4      	bgt.n	8001ad0 <__gedf2+0x64>
 8001b06:	da03      	bge.n	8001b10 <__gedf2+0xa4>
 8001b08:	1e48      	subs	r0, r1, #1
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4308      	orrs	r0, r1
 8001b0e:	e7e2      	b.n	8001ad6 <__gedf2+0x6a>
 8001b10:	455e      	cmp	r6, fp
 8001b12:	d8dd      	bhi.n	8001ad0 <__gedf2+0x64>
 8001b14:	d006      	beq.n	8001b24 <__gedf2+0xb8>
 8001b16:	2000      	movs	r0, #0
 8001b18:	455e      	cmp	r6, fp
 8001b1a:	d2dc      	bcs.n	8001ad6 <__gedf2+0x6a>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	1e48      	subs	r0, r1, #1
 8001b20:	4318      	orrs	r0, r3
 8001b22:	e7d8      	b.n	8001ad6 <__gedf2+0x6a>
 8001b24:	45c4      	cmp	ip, r8
 8001b26:	d8d3      	bhi.n	8001ad0 <__gedf2+0x64>
 8001b28:	2000      	movs	r0, #0
 8001b2a:	45c4      	cmp	ip, r8
 8001b2c:	d3f6      	bcc.n	8001b1c <__gedf2+0xb0>
 8001b2e:	e7d2      	b.n	8001ad6 <__gedf2+0x6a>
 8001b30:	000007ff 	.word	0x000007ff

08001b34 <__ledf2>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	464e      	mov	r6, r9
 8001b38:	4645      	mov	r5, r8
 8001b3a:	46de      	mov	lr, fp
 8001b3c:	4657      	mov	r7, sl
 8001b3e:	005c      	lsls	r4, r3, #1
 8001b40:	b5e0      	push	{r5, r6, r7, lr}
 8001b42:	031f      	lsls	r7, r3, #12
 8001b44:	0fdb      	lsrs	r3, r3, #31
 8001b46:	4699      	mov	r9, r3
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <__ledf2+0xc0>)
 8001b4a:	030e      	lsls	r6, r1, #12
 8001b4c:	004d      	lsls	r5, r1, #1
 8001b4e:	0fc9      	lsrs	r1, r1, #31
 8001b50:	4684      	mov	ip, r0
 8001b52:	0b36      	lsrs	r6, r6, #12
 8001b54:	0d6d      	lsrs	r5, r5, #21
 8001b56:	468b      	mov	fp, r1
 8001b58:	4690      	mov	r8, r2
 8001b5a:	0b3f      	lsrs	r7, r7, #12
 8001b5c:	0d64      	lsrs	r4, r4, #21
 8001b5e:	429d      	cmp	r5, r3
 8001b60:	d020      	beq.n	8001ba4 <__ledf2+0x70>
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <__ledf2+0xc0>)
 8001b64:	429c      	cmp	r4, r3
 8001b66:	d022      	beq.n	8001bae <__ledf2+0x7a>
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	d112      	bne.n	8001b92 <__ledf2+0x5e>
 8001b6c:	4330      	orrs	r0, r6
 8001b6e:	4243      	negs	r3, r0
 8001b70:	4143      	adcs	r3, r0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	d01f      	beq.n	8001bb8 <__ledf2+0x84>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <__ledf2+0x62>
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	2001      	movs	r0, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4303      	orrs	r3, r0
 8001b84:	0018      	movs	r0, r3
 8001b86:	bc3c      	pop	{r2, r3, r4, r5}
 8001b88:	4690      	mov	r8, r2
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	46a2      	mov	sl, r4
 8001b8e:	46ab      	mov	fp, r5
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d016      	beq.n	8001bc4 <__ledf2+0x90>
 8001b96:	45cb      	cmp	fp, r9
 8001b98:	d017      	beq.n	8001bca <__ledf2+0x96>
 8001b9a:	465b      	mov	r3, fp
 8001b9c:	4259      	negs	r1, r3
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	e7ef      	b.n	8001b84 <__ledf2+0x50>
 8001ba4:	0031      	movs	r1, r6
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	4301      	orrs	r1, r0
 8001baa:	d1eb      	bne.n	8001b84 <__ledf2+0x50>
 8001bac:	e7d9      	b.n	8001b62 <__ledf2+0x2e>
 8001bae:	0039      	movs	r1, r7
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	d1e6      	bne.n	8001b84 <__ledf2+0x50>
 8001bb6:	e7d7      	b.n	8001b68 <__ledf2+0x34>
 8001bb8:	433a      	orrs	r2, r7
 8001bba:	d1dd      	bne.n	8001b78 <__ledf2+0x44>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d0e0      	beq.n	8001b84 <__ledf2+0x50>
 8001bc2:	e7ea      	b.n	8001b9a <__ledf2+0x66>
 8001bc4:	433a      	orrs	r2, r7
 8001bc6:	d1e6      	bne.n	8001b96 <__ledf2+0x62>
 8001bc8:	e7e7      	b.n	8001b9a <__ledf2+0x66>
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	dce5      	bgt.n	8001b9a <__ledf2+0x66>
 8001bce:	db05      	blt.n	8001bdc <__ledf2+0xa8>
 8001bd0:	42be      	cmp	r6, r7
 8001bd2:	d8e2      	bhi.n	8001b9a <__ledf2+0x66>
 8001bd4:	d007      	beq.n	8001be6 <__ledf2+0xb2>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	42be      	cmp	r6, r7
 8001bda:	d2d3      	bcs.n	8001b84 <__ledf2+0x50>
 8001bdc:	4659      	mov	r1, fp
 8001bde:	2301      	movs	r3, #1
 8001be0:	3901      	subs	r1, #1
 8001be2:	430b      	orrs	r3, r1
 8001be4:	e7ce      	b.n	8001b84 <__ledf2+0x50>
 8001be6:	45c4      	cmp	ip, r8
 8001be8:	d8d7      	bhi.n	8001b9a <__ledf2+0x66>
 8001bea:	2300      	movs	r3, #0
 8001bec:	45c4      	cmp	ip, r8
 8001bee:	d3f5      	bcc.n	8001bdc <__ledf2+0xa8>
 8001bf0:	e7c8      	b.n	8001b84 <__ledf2+0x50>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000007ff 	.word	0x000007ff

08001bf8 <__aeabi_dmul>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	4657      	mov	r7, sl
 8001bfc:	4645      	mov	r5, r8
 8001bfe:	46de      	mov	lr, fp
 8001c00:	464e      	mov	r6, r9
 8001c02:	b5e0      	push	{r5, r6, r7, lr}
 8001c04:	030c      	lsls	r4, r1, #12
 8001c06:	4698      	mov	r8, r3
 8001c08:	004e      	lsls	r6, r1, #1
 8001c0a:	0b23      	lsrs	r3, r4, #12
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	0007      	movs	r7, r0
 8001c10:	4692      	mov	sl, r2
 8001c12:	469b      	mov	fp, r3
 8001c14:	0d76      	lsrs	r6, r6, #21
 8001c16:	0fcd      	lsrs	r5, r1, #31
 8001c18:	2e00      	cmp	r6, #0
 8001c1a:	d06b      	beq.n	8001cf4 <__aeabi_dmul+0xfc>
 8001c1c:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <__aeabi_dmul+0x1dc>)
 8001c1e:	429e      	cmp	r6, r3
 8001c20:	d035      	beq.n	8001c8e <__aeabi_dmul+0x96>
 8001c22:	2480      	movs	r4, #128	; 0x80
 8001c24:	465b      	mov	r3, fp
 8001c26:	0f42      	lsrs	r2, r0, #29
 8001c28:	0424      	lsls	r4, r4, #16
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4314      	orrs	r4, r2
 8001c2e:	431c      	orrs	r4, r3
 8001c30:	00c3      	lsls	r3, r0, #3
 8001c32:	4699      	mov	r9, r3
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <__aeabi_dmul+0x1e0>)
 8001c36:	46a3      	mov	fp, r4
 8001c38:	469c      	mov	ip, r3
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2700      	movs	r7, #0
 8001c3e:	4466      	add	r6, ip
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	4643      	mov	r3, r8
 8001c44:	031c      	lsls	r4, r3, #12
 8001c46:	005a      	lsls	r2, r3, #1
 8001c48:	0fdb      	lsrs	r3, r3, #31
 8001c4a:	4650      	mov	r0, sl
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	0d52      	lsrs	r2, r2, #21
 8001c50:	4698      	mov	r8, r3
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x5e>
 8001c54:	e076      	b.n	8001d44 <__aeabi_dmul+0x14c>
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <__aeabi_dmul+0x1dc>)
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d06d      	beq.n	8001d38 <__aeabi_dmul+0x140>
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	0f41      	lsrs	r1, r0, #29
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	430b      	orrs	r3, r1
 8001c64:	495c      	ldr	r1, [pc, #368]	; (8001dd8 <__aeabi_dmul+0x1e0>)
 8001c66:	00e4      	lsls	r4, r4, #3
 8001c68:	468c      	mov	ip, r1
 8001c6a:	431c      	orrs	r4, r3
 8001c6c:	00c3      	lsls	r3, r0, #3
 8001c6e:	2000      	movs	r0, #0
 8001c70:	4462      	add	r2, ip
 8001c72:	4641      	mov	r1, r8
 8001c74:	18b6      	adds	r6, r6, r2
 8001c76:	4069      	eors	r1, r5
 8001c78:	1c72      	adds	r2, r6, #1
 8001c7a:	9101      	str	r1, [sp, #4]
 8001c7c:	4694      	mov	ip, r2
 8001c7e:	4307      	orrs	r7, r0
 8001c80:	2f0f      	cmp	r7, #15
 8001c82:	d900      	bls.n	8001c86 <__aeabi_dmul+0x8e>
 8001c84:	e0b0      	b.n	8001de8 <__aeabi_dmul+0x1f0>
 8001c86:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <__aeabi_dmul+0x1e4>)
 8001c88:	00bf      	lsls	r7, r7, #2
 8001c8a:	59d2      	ldr	r2, [r2, r7]
 8001c8c:	4697      	mov	pc, r2
 8001c8e:	465b      	mov	r3, fp
 8001c90:	4303      	orrs	r3, r0
 8001c92:	4699      	mov	r9, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_dmul+0xa0>
 8001c96:	e087      	b.n	8001da8 <__aeabi_dmul+0x1b0>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	469b      	mov	fp, r3
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	2708      	movs	r7, #8
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	e7ce      	b.n	8001c42 <__aeabi_dmul+0x4a>
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	2802      	cmp	r0, #2
 8001caa:	d067      	beq.n	8001d7c <__aeabi_dmul+0x184>
 8001cac:	2803      	cmp	r0, #3
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dmul+0xba>
 8001cb0:	e20e      	b.n	80020d0 <__aeabi_dmul+0x4d8>
 8001cb2:	2801      	cmp	r0, #1
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dmul+0xc0>
 8001cb6:	e162      	b.n	8001f7e <__aeabi_dmul+0x386>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	9901      	ldr	r1, [sp, #4]
 8001cc2:	4001      	ands	r1, r0
 8001cc4:	b2cd      	uxtb	r5, r1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	0312      	lsls	r2, r2, #12
 8001cca:	0d0b      	lsrs	r3, r1, #20
 8001ccc:	0b12      	lsrs	r2, r2, #12
 8001cce:	051b      	lsls	r3, r3, #20
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <__aeabi_dmul+0x1e8>)
 8001cd4:	0524      	lsls	r4, r4, #20
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	431c      	orrs	r4, r3
 8001cda:	0064      	lsls	r4, r4, #1
 8001cdc:	07ed      	lsls	r5, r5, #31
 8001cde:	0864      	lsrs	r4, r4, #1
 8001ce0:	432c      	orrs	r4, r5
 8001ce2:	4648      	mov	r0, r9
 8001ce4:	0021      	movs	r1, r4
 8001ce6:	b007      	add	sp, #28
 8001ce8:	bc3c      	pop	{r2, r3, r4, r5}
 8001cea:	4690      	mov	r8, r2
 8001cec:	4699      	mov	r9, r3
 8001cee:	46a2      	mov	sl, r4
 8001cf0:	46ab      	mov	fp, r5
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	4699      	mov	r9, r3
 8001cf8:	d04f      	beq.n	8001d9a <__aeabi_dmul+0x1a2>
 8001cfa:	465b      	mov	r3, fp
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dmul+0x10a>
 8001d00:	e189      	b.n	8002016 <__aeabi_dmul+0x41e>
 8001d02:	4658      	mov	r0, fp
 8001d04:	f000 fdea 	bl	80028dc <__clzsi2>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	3b0b      	subs	r3, #11
 8001d0c:	2b1c      	cmp	r3, #28
 8001d0e:	dd00      	ble.n	8001d12 <__aeabi_dmul+0x11a>
 8001d10:	e17a      	b.n	8002008 <__aeabi_dmul+0x410>
 8001d12:	221d      	movs	r2, #29
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	003a      	movs	r2, r7
 8001d18:	0001      	movs	r1, r0
 8001d1a:	465c      	mov	r4, fp
 8001d1c:	40da      	lsrs	r2, r3
 8001d1e:	3908      	subs	r1, #8
 8001d20:	408c      	lsls	r4, r1
 8001d22:	0013      	movs	r3, r2
 8001d24:	408f      	lsls	r7, r1
 8001d26:	4323      	orrs	r3, r4
 8001d28:	469b      	mov	fp, r3
 8001d2a:	46b9      	mov	r9, r7
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	4e2d      	ldr	r6, [pc, #180]	; (8001de4 <__aeabi_dmul+0x1ec>)
 8001d30:	2700      	movs	r7, #0
 8001d32:	1a36      	subs	r6, r6, r0
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	e784      	b.n	8001c42 <__aeabi_dmul+0x4a>
 8001d38:	4653      	mov	r3, sl
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	d12a      	bne.n	8001d94 <__aeabi_dmul+0x19c>
 8001d3e:	2400      	movs	r4, #0
 8001d40:	2002      	movs	r0, #2
 8001d42:	e796      	b.n	8001c72 <__aeabi_dmul+0x7a>
 8001d44:	4653      	mov	r3, sl
 8001d46:	4323      	orrs	r3, r4
 8001d48:	d020      	beq.n	8001d8c <__aeabi_dmul+0x194>
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dmul+0x158>
 8001d4e:	e157      	b.n	8002000 <__aeabi_dmul+0x408>
 8001d50:	0020      	movs	r0, r4
 8001d52:	f000 fdc3 	bl	80028dc <__clzsi2>
 8001d56:	0003      	movs	r3, r0
 8001d58:	3b0b      	subs	r3, #11
 8001d5a:	2b1c      	cmp	r3, #28
 8001d5c:	dd00      	ble.n	8001d60 <__aeabi_dmul+0x168>
 8001d5e:	e149      	b.n	8001ff4 <__aeabi_dmul+0x3fc>
 8001d60:	211d      	movs	r1, #29
 8001d62:	1acb      	subs	r3, r1, r3
 8001d64:	4651      	mov	r1, sl
 8001d66:	0002      	movs	r2, r0
 8001d68:	40d9      	lsrs	r1, r3
 8001d6a:	4653      	mov	r3, sl
 8001d6c:	3a08      	subs	r2, #8
 8001d6e:	4094      	lsls	r4, r2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	430c      	orrs	r4, r1
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <__aeabi_dmul+0x1ec>)
 8001d76:	1a12      	subs	r2, r2, r0
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e77a      	b.n	8001c72 <__aeabi_dmul+0x7a>
 8001d7c:	2501      	movs	r5, #1
 8001d7e:	9b01      	ldr	r3, [sp, #4]
 8001d80:	4c14      	ldr	r4, [pc, #80]	; (8001dd4 <__aeabi_dmul+0x1dc>)
 8001d82:	401d      	ands	r5, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	4699      	mov	r9, r3
 8001d8a:	e79c      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2001      	movs	r0, #1
 8001d92:	e76e      	b.n	8001c72 <__aeabi_dmul+0x7a>
 8001d94:	4653      	mov	r3, sl
 8001d96:	2003      	movs	r0, #3
 8001d98:	e76b      	b.n	8001c72 <__aeabi_dmul+0x7a>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	2704      	movs	r7, #4
 8001da2:	2600      	movs	r6, #0
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	e74c      	b.n	8001c42 <__aeabi_dmul+0x4a>
 8001da8:	2303      	movs	r3, #3
 8001daa:	4681      	mov	r9, r0
 8001dac:	270c      	movs	r7, #12
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	e747      	b.n	8001c42 <__aeabi_dmul+0x4a>
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	2300      	movs	r3, #0
 8001db6:	2500      	movs	r5, #0
 8001db8:	0312      	lsls	r2, r2, #12
 8001dba:	4699      	mov	r9, r3
 8001dbc:	4c05      	ldr	r4, [pc, #20]	; (8001dd4 <__aeabi_dmul+0x1dc>)
 8001dbe:	e782      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8001dc0:	465c      	mov	r4, fp
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	9802      	ldr	r0, [sp, #8]
 8001dc6:	e76f      	b.n	8001ca8 <__aeabi_dmul+0xb0>
 8001dc8:	465c      	mov	r4, fp
 8001dca:	464b      	mov	r3, r9
 8001dcc:	9501      	str	r5, [sp, #4]
 8001dce:	9802      	ldr	r0, [sp, #8]
 8001dd0:	e76a      	b.n	8001ca8 <__aeabi_dmul+0xb0>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	fffffc01 	.word	0xfffffc01
 8001ddc:	08005274 	.word	0x08005274
 8001de0:	800fffff 	.word	0x800fffff
 8001de4:	fffffc0d 	.word	0xfffffc0d
 8001de8:	464a      	mov	r2, r9
 8001dea:	4649      	mov	r1, r9
 8001dec:	0c17      	lsrs	r7, r2, #16
 8001dee:	0c1a      	lsrs	r2, r3, #16
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	0408      	lsls	r0, r1, #16
 8001df6:	0019      	movs	r1, r3
 8001df8:	0c00      	lsrs	r0, r0, #16
 8001dfa:	4341      	muls	r1, r0
 8001dfc:	0015      	movs	r5, r2
 8001dfe:	4688      	mov	r8, r1
 8001e00:	0019      	movs	r1, r3
 8001e02:	437d      	muls	r5, r7
 8001e04:	4379      	muls	r1, r7
 8001e06:	9503      	str	r5, [sp, #12]
 8001e08:	4689      	mov	r9, r1
 8001e0a:	0029      	movs	r1, r5
 8001e0c:	0015      	movs	r5, r2
 8001e0e:	4345      	muls	r5, r0
 8001e10:	444d      	add	r5, r9
 8001e12:	9502      	str	r5, [sp, #8]
 8001e14:	4645      	mov	r5, r8
 8001e16:	0c2d      	lsrs	r5, r5, #16
 8001e18:	46aa      	mov	sl, r5
 8001e1a:	9d02      	ldr	r5, [sp, #8]
 8001e1c:	4455      	add	r5, sl
 8001e1e:	45a9      	cmp	r9, r5
 8001e20:	d906      	bls.n	8001e30 <__aeabi_dmul+0x238>
 8001e22:	468a      	mov	sl, r1
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	0249      	lsls	r1, r1, #9
 8001e28:	4689      	mov	r9, r1
 8001e2a:	44ca      	add	sl, r9
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	9103      	str	r1, [sp, #12]
 8001e30:	0c29      	lsrs	r1, r5, #16
 8001e32:	9104      	str	r1, [sp, #16]
 8001e34:	4641      	mov	r1, r8
 8001e36:	0409      	lsls	r1, r1, #16
 8001e38:	042d      	lsls	r5, r5, #16
 8001e3a:	0c09      	lsrs	r1, r1, #16
 8001e3c:	4688      	mov	r8, r1
 8001e3e:	0029      	movs	r1, r5
 8001e40:	0c25      	lsrs	r5, r4, #16
 8001e42:	0424      	lsls	r4, r4, #16
 8001e44:	4441      	add	r1, r8
 8001e46:	0c24      	lsrs	r4, r4, #16
 8001e48:	9105      	str	r1, [sp, #20]
 8001e4a:	0021      	movs	r1, r4
 8001e4c:	4341      	muls	r1, r0
 8001e4e:	4688      	mov	r8, r1
 8001e50:	0021      	movs	r1, r4
 8001e52:	4379      	muls	r1, r7
 8001e54:	468a      	mov	sl, r1
 8001e56:	4368      	muls	r0, r5
 8001e58:	4641      	mov	r1, r8
 8001e5a:	4450      	add	r0, sl
 8001e5c:	4681      	mov	r9, r0
 8001e5e:	0c08      	lsrs	r0, r1, #16
 8001e60:	4448      	add	r0, r9
 8001e62:	436f      	muls	r7, r5
 8001e64:	4582      	cmp	sl, r0
 8001e66:	d903      	bls.n	8001e70 <__aeabi_dmul+0x278>
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0249      	lsls	r1, r1, #9
 8001e6c:	4689      	mov	r9, r1
 8001e6e:	444f      	add	r7, r9
 8001e70:	0c01      	lsrs	r1, r0, #16
 8001e72:	4689      	mov	r9, r1
 8001e74:	0039      	movs	r1, r7
 8001e76:	4449      	add	r1, r9
 8001e78:	9102      	str	r1, [sp, #8]
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	040f      	lsls	r7, r1, #16
 8001e7e:	9904      	ldr	r1, [sp, #16]
 8001e80:	0c3f      	lsrs	r7, r7, #16
 8001e82:	4688      	mov	r8, r1
 8001e84:	0400      	lsls	r0, r0, #16
 8001e86:	19c0      	adds	r0, r0, r7
 8001e88:	4480      	add	r8, r0
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	9104      	str	r1, [sp, #16]
 8001e8e:	4659      	mov	r1, fp
 8001e90:	0c0f      	lsrs	r7, r1, #16
 8001e92:	0409      	lsls	r1, r1, #16
 8001e94:	0c09      	lsrs	r1, r1, #16
 8001e96:	4688      	mov	r8, r1
 8001e98:	4359      	muls	r1, r3
 8001e9a:	468a      	mov	sl, r1
 8001e9c:	0039      	movs	r1, r7
 8001e9e:	4351      	muls	r1, r2
 8001ea0:	4689      	mov	r9, r1
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	434a      	muls	r2, r1
 8001ea6:	4651      	mov	r1, sl
 8001ea8:	0c09      	lsrs	r1, r1, #16
 8001eaa:	468b      	mov	fp, r1
 8001eac:	437b      	muls	r3, r7
 8001eae:	18d2      	adds	r2, r2, r3
 8001eb0:	445a      	add	r2, fp
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d903      	bls.n	8001ebe <__aeabi_dmul+0x2c6>
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	469b      	mov	fp, r3
 8001ebc:	44d9      	add	r9, fp
 8001ebe:	4651      	mov	r1, sl
 8001ec0:	0409      	lsls	r1, r1, #16
 8001ec2:	0c09      	lsrs	r1, r1, #16
 8001ec4:	468a      	mov	sl, r1
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	4361      	muls	r1, r4
 8001eca:	437c      	muls	r4, r7
 8001ecc:	0c13      	lsrs	r3, r2, #16
 8001ece:	0412      	lsls	r2, r2, #16
 8001ed0:	444b      	add	r3, r9
 8001ed2:	4452      	add	r2, sl
 8001ed4:	46a1      	mov	r9, r4
 8001ed6:	468a      	mov	sl, r1
 8001ed8:	003c      	movs	r4, r7
 8001eda:	4641      	mov	r1, r8
 8001edc:	436c      	muls	r4, r5
 8001ede:	434d      	muls	r5, r1
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	444d      	add	r5, r9
 8001ee4:	0c0f      	lsrs	r7, r1, #16
 8001ee6:	197d      	adds	r5, r7, r5
 8001ee8:	45a9      	cmp	r9, r5
 8001eea:	d903      	bls.n	8001ef4 <__aeabi_dmul+0x2fc>
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	0249      	lsls	r1, r1, #9
 8001ef0:	4688      	mov	r8, r1
 8001ef2:	4444      	add	r4, r8
 8001ef4:	9f04      	ldr	r7, [sp, #16]
 8001ef6:	9903      	ldr	r1, [sp, #12]
 8001ef8:	46b8      	mov	r8, r7
 8001efa:	4441      	add	r1, r8
 8001efc:	468b      	mov	fp, r1
 8001efe:	4583      	cmp	fp, r0
 8001f00:	4180      	sbcs	r0, r0
 8001f02:	4241      	negs	r1, r0
 8001f04:	4688      	mov	r8, r1
 8001f06:	4651      	mov	r1, sl
 8001f08:	0408      	lsls	r0, r1, #16
 8001f0a:	042f      	lsls	r7, r5, #16
 8001f0c:	0c00      	lsrs	r0, r0, #16
 8001f0e:	183f      	adds	r7, r7, r0
 8001f10:	4658      	mov	r0, fp
 8001f12:	9902      	ldr	r1, [sp, #8]
 8001f14:	1810      	adds	r0, r2, r0
 8001f16:	4689      	mov	r9, r1
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	4192      	sbcs	r2, r2
 8001f1c:	444f      	add	r7, r9
 8001f1e:	46ba      	mov	sl, r7
 8001f20:	4252      	negs	r2, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	44c2      	add	sl, r8
 8001f28:	44d1      	add	r9, sl
 8001f2a:	44cb      	add	fp, r9
 8001f2c:	428f      	cmp	r7, r1
 8001f2e:	41bf      	sbcs	r7, r7
 8001f30:	45c2      	cmp	sl, r8
 8001f32:	4189      	sbcs	r1, r1
 8001f34:	4599      	cmp	r9, r3
 8001f36:	419b      	sbcs	r3, r3
 8001f38:	4593      	cmp	fp, r2
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	427f      	negs	r7, r7
 8001f3e:	4249      	negs	r1, r1
 8001f40:	0c2d      	lsrs	r5, r5, #16
 8001f42:	4252      	negs	r2, r2
 8001f44:	430f      	orrs	r7, r1
 8001f46:	425b      	negs	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	197f      	adds	r7, r7, r5
 8001f4c:	18ff      	adds	r7, r7, r3
 8001f4e:	465b      	mov	r3, fp
 8001f50:	193c      	adds	r4, r7, r4
 8001f52:	0ddb      	lsrs	r3, r3, #23
 8001f54:	9a05      	ldr	r2, [sp, #20]
 8001f56:	0264      	lsls	r4, r4, #9
 8001f58:	431c      	orrs	r4, r3
 8001f5a:	0243      	lsls	r3, r0, #9
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	1e5d      	subs	r5, r3, #1
 8001f60:	41ab      	sbcs	r3, r5
 8001f62:	465a      	mov	r2, fp
 8001f64:	0dc0      	lsrs	r0, r0, #23
 8001f66:	4303      	orrs	r3, r0
 8001f68:	0252      	lsls	r2, r2, #9
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	01e2      	lsls	r2, r4, #7
 8001f6e:	d556      	bpl.n	800201e <__aeabi_dmul+0x426>
 8001f70:	2001      	movs	r0, #1
 8001f72:	085a      	lsrs	r2, r3, #1
 8001f74:	4003      	ands	r3, r0
 8001f76:	4313      	orrs	r3, r2
 8001f78:	07e2      	lsls	r2, r4, #31
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	0864      	lsrs	r4, r4, #1
 8001f7e:	485a      	ldr	r0, [pc, #360]	; (80020e8 <__aeabi_dmul+0x4f0>)
 8001f80:	4460      	add	r0, ip
 8001f82:	2800      	cmp	r0, #0
 8001f84:	dd4d      	ble.n	8002022 <__aeabi_dmul+0x42a>
 8001f86:	075a      	lsls	r2, r3, #29
 8001f88:	d009      	beq.n	8001f9e <__aeabi_dmul+0x3a6>
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	2a04      	cmp	r2, #4
 8001f90:	d005      	beq.n	8001f9e <__aeabi_dmul+0x3a6>
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	429a      	cmp	r2, r3
 8001f96:	419b      	sbcs	r3, r3
 8001f98:	425b      	negs	r3, r3
 8001f9a:	18e4      	adds	r4, r4, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	01e2      	lsls	r2, r4, #7
 8001fa0:	d504      	bpl.n	8001fac <__aeabi_dmul+0x3b4>
 8001fa2:	2080      	movs	r0, #128	; 0x80
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <__aeabi_dmul+0x4f4>)
 8001fa6:	00c0      	lsls	r0, r0, #3
 8001fa8:	4014      	ands	r4, r2
 8001faa:	4460      	add	r0, ip
 8001fac:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <__aeabi_dmul+0x4f8>)
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dmul+0x3bc>
 8001fb2:	e6e3      	b.n	8001d7c <__aeabi_dmul+0x184>
 8001fb4:	2501      	movs	r5, #1
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	0762      	lsls	r2, r4, #29
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	0264      	lsls	r4, r4, #9
 8001fbe:	9b01      	ldr	r3, [sp, #4]
 8001fc0:	4691      	mov	r9, r2
 8001fc2:	0b22      	lsrs	r2, r4, #12
 8001fc4:	0544      	lsls	r4, r0, #21
 8001fc6:	0d64      	lsrs	r4, r4, #21
 8001fc8:	401d      	ands	r5, r3
 8001fca:	e67c      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	4659      	mov	r1, fp
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4211      	tst	r1, r2
 8001fd4:	d008      	beq.n	8001fe8 <__aeabi_dmul+0x3f0>
 8001fd6:	4214      	tst	r4, r2
 8001fd8:	d106      	bne.n	8001fe8 <__aeabi_dmul+0x3f0>
 8001fda:	4322      	orrs	r2, r4
 8001fdc:	0312      	lsls	r2, r2, #12
 8001fde:	0b12      	lsrs	r2, r2, #12
 8001fe0:	4645      	mov	r5, r8
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4c43      	ldr	r4, [pc, #268]	; (80020f4 <__aeabi_dmul+0x4fc>)
 8001fe6:	e66e      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8001fe8:	465b      	mov	r3, fp
 8001fea:	431a      	orrs	r2, r3
 8001fec:	0312      	lsls	r2, r2, #12
 8001fee:	0b12      	lsrs	r2, r2, #12
 8001ff0:	4c40      	ldr	r4, [pc, #256]	; (80020f4 <__aeabi_dmul+0x4fc>)
 8001ff2:	e668      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	4654      	mov	r4, sl
 8001ff8:	3b28      	subs	r3, #40	; 0x28
 8001ffa:	409c      	lsls	r4, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e6b9      	b.n	8001d74 <__aeabi_dmul+0x17c>
 8002000:	f000 fc6c 	bl	80028dc <__clzsi2>
 8002004:	3020      	adds	r0, #32
 8002006:	e6a6      	b.n	8001d56 <__aeabi_dmul+0x15e>
 8002008:	0003      	movs	r3, r0
 800200a:	3b28      	subs	r3, #40	; 0x28
 800200c:	409f      	lsls	r7, r3
 800200e:	2300      	movs	r3, #0
 8002010:	46bb      	mov	fp, r7
 8002012:	4699      	mov	r9, r3
 8002014:	e68a      	b.n	8001d2c <__aeabi_dmul+0x134>
 8002016:	f000 fc61 	bl	80028dc <__clzsi2>
 800201a:	3020      	adds	r0, #32
 800201c:	e674      	b.n	8001d08 <__aeabi_dmul+0x110>
 800201e:	46b4      	mov	ip, r6
 8002020:	e7ad      	b.n	8001f7e <__aeabi_dmul+0x386>
 8002022:	2501      	movs	r5, #1
 8002024:	1a2a      	subs	r2, r5, r0
 8002026:	2a38      	cmp	r2, #56	; 0x38
 8002028:	dd06      	ble.n	8002038 <__aeabi_dmul+0x440>
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	2400      	movs	r4, #0
 800202e:	401d      	ands	r5, r3
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	4699      	mov	r9, r3
 8002036:	e646      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8002038:	2a1f      	cmp	r2, #31
 800203a:	dc21      	bgt.n	8002080 <__aeabi_dmul+0x488>
 800203c:	2520      	movs	r5, #32
 800203e:	0020      	movs	r0, r4
 8002040:	1aad      	subs	r5, r5, r2
 8002042:	001e      	movs	r6, r3
 8002044:	40ab      	lsls	r3, r5
 8002046:	40a8      	lsls	r0, r5
 8002048:	40d6      	lsrs	r6, r2
 800204a:	1e5d      	subs	r5, r3, #1
 800204c:	41ab      	sbcs	r3, r5
 800204e:	4330      	orrs	r0, r6
 8002050:	4318      	orrs	r0, r3
 8002052:	40d4      	lsrs	r4, r2
 8002054:	0743      	lsls	r3, r0, #29
 8002056:	d009      	beq.n	800206c <__aeabi_dmul+0x474>
 8002058:	230f      	movs	r3, #15
 800205a:	4003      	ands	r3, r0
 800205c:	2b04      	cmp	r3, #4
 800205e:	d005      	beq.n	800206c <__aeabi_dmul+0x474>
 8002060:	0003      	movs	r3, r0
 8002062:	1d18      	adds	r0, r3, #4
 8002064:	4298      	cmp	r0, r3
 8002066:	419b      	sbcs	r3, r3
 8002068:	425b      	negs	r3, r3
 800206a:	18e4      	adds	r4, r4, r3
 800206c:	0223      	lsls	r3, r4, #8
 800206e:	d521      	bpl.n	80020b4 <__aeabi_dmul+0x4bc>
 8002070:	2501      	movs	r5, #1
 8002072:	9b01      	ldr	r3, [sp, #4]
 8002074:	2401      	movs	r4, #1
 8002076:	401d      	ands	r5, r3
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	4699      	mov	r9, r3
 800207e:	e622      	b.n	8001cc6 <__aeabi_dmul+0xce>
 8002080:	251f      	movs	r5, #31
 8002082:	0021      	movs	r1, r4
 8002084:	426d      	negs	r5, r5
 8002086:	1a28      	subs	r0, r5, r0
 8002088:	40c1      	lsrs	r1, r0
 800208a:	0008      	movs	r0, r1
 800208c:	2a20      	cmp	r2, #32
 800208e:	d01d      	beq.n	80020cc <__aeabi_dmul+0x4d4>
 8002090:	355f      	adds	r5, #95	; 0x5f
 8002092:	1aaa      	subs	r2, r5, r2
 8002094:	4094      	lsls	r4, r2
 8002096:	4323      	orrs	r3, r4
 8002098:	1e5c      	subs	r4, r3, #1
 800209a:	41a3      	sbcs	r3, r4
 800209c:	2507      	movs	r5, #7
 800209e:	4303      	orrs	r3, r0
 80020a0:	401d      	ands	r5, r3
 80020a2:	2200      	movs	r2, #0
 80020a4:	2d00      	cmp	r5, #0
 80020a6:	d009      	beq.n	80020bc <__aeabi_dmul+0x4c4>
 80020a8:	220f      	movs	r2, #15
 80020aa:	2400      	movs	r4, #0
 80020ac:	401a      	ands	r2, r3
 80020ae:	0018      	movs	r0, r3
 80020b0:	2a04      	cmp	r2, #4
 80020b2:	d1d6      	bne.n	8002062 <__aeabi_dmul+0x46a>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0765      	lsls	r5, r4, #29
 80020b8:	0264      	lsls	r4, r4, #9
 80020ba:	0b22      	lsrs	r2, r4, #12
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	432b      	orrs	r3, r5
 80020c0:	2501      	movs	r5, #1
 80020c2:	4699      	mov	r9, r3
 80020c4:	9b01      	ldr	r3, [sp, #4]
 80020c6:	2400      	movs	r4, #0
 80020c8:	401d      	ands	r5, r3
 80020ca:	e5fc      	b.n	8001cc6 <__aeabi_dmul+0xce>
 80020cc:	2400      	movs	r4, #0
 80020ce:	e7e2      	b.n	8002096 <__aeabi_dmul+0x49e>
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	2501      	movs	r5, #1
 80020d4:	0312      	lsls	r2, r2, #12
 80020d6:	4322      	orrs	r2, r4
 80020d8:	9901      	ldr	r1, [sp, #4]
 80020da:	0312      	lsls	r2, r2, #12
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	400d      	ands	r5, r1
 80020e0:	4699      	mov	r9, r3
 80020e2:	4c04      	ldr	r4, [pc, #16]	; (80020f4 <__aeabi_dmul+0x4fc>)
 80020e4:	e5ef      	b.n	8001cc6 <__aeabi_dmul+0xce>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	000003ff 	.word	0x000003ff
 80020ec:	feffffff 	.word	0xfeffffff
 80020f0:	000007fe 	.word	0x000007fe
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_dsub>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	4646      	mov	r6, r8
 80020fc:	46d6      	mov	lr, sl
 80020fe:	464f      	mov	r7, r9
 8002100:	030c      	lsls	r4, r1, #12
 8002102:	b5c0      	push	{r6, r7, lr}
 8002104:	0fcd      	lsrs	r5, r1, #31
 8002106:	004e      	lsls	r6, r1, #1
 8002108:	0a61      	lsrs	r1, r4, #9
 800210a:	0f44      	lsrs	r4, r0, #29
 800210c:	430c      	orrs	r4, r1
 800210e:	00c1      	lsls	r1, r0, #3
 8002110:	0058      	lsls	r0, r3, #1
 8002112:	0d40      	lsrs	r0, r0, #21
 8002114:	4684      	mov	ip, r0
 8002116:	468a      	mov	sl, r1
 8002118:	000f      	movs	r7, r1
 800211a:	0319      	lsls	r1, r3, #12
 800211c:	0f50      	lsrs	r0, r2, #29
 800211e:	0a49      	lsrs	r1, r1, #9
 8002120:	4301      	orrs	r1, r0
 8002122:	48c6      	ldr	r0, [pc, #792]	; (800243c <__aeabi_dsub+0x344>)
 8002124:	0d76      	lsrs	r6, r6, #21
 8002126:	46a8      	mov	r8, r5
 8002128:	0fdb      	lsrs	r3, r3, #31
 800212a:	00d2      	lsls	r2, r2, #3
 800212c:	4584      	cmp	ip, r0
 800212e:	d100      	bne.n	8002132 <__aeabi_dsub+0x3a>
 8002130:	e0d8      	b.n	80022e4 <__aeabi_dsub+0x1ec>
 8002132:	2001      	movs	r0, #1
 8002134:	4043      	eors	r3, r0
 8002136:	42ab      	cmp	r3, r5
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x44>
 800213a:	e0a6      	b.n	800228a <__aeabi_dsub+0x192>
 800213c:	4660      	mov	r0, ip
 800213e:	1a35      	subs	r5, r6, r0
 8002140:	2d00      	cmp	r5, #0
 8002142:	dc00      	bgt.n	8002146 <__aeabi_dsub+0x4e>
 8002144:	e105      	b.n	8002352 <__aeabi_dsub+0x25a>
 8002146:	2800      	cmp	r0, #0
 8002148:	d110      	bne.n	800216c <__aeabi_dsub+0x74>
 800214a:	000b      	movs	r3, r1
 800214c:	4313      	orrs	r3, r2
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x5a>
 8002150:	e0d7      	b.n	8002302 <__aeabi_dsub+0x20a>
 8002152:	1e6b      	subs	r3, r5, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x62>
 8002158:	e14b      	b.n	80023f2 <__aeabi_dsub+0x2fa>
 800215a:	4653      	mov	r3, sl
 800215c:	1a9f      	subs	r7, r3, r2
 800215e:	45ba      	cmp	sl, r7
 8002160:	4180      	sbcs	r0, r0
 8002162:	1a64      	subs	r4, r4, r1
 8002164:	4240      	negs	r0, r0
 8002166:	1a24      	subs	r4, r4, r0
 8002168:	2601      	movs	r6, #1
 800216a:	e01e      	b.n	80021aa <__aeabi_dsub+0xb2>
 800216c:	4bb3      	ldr	r3, [pc, #716]	; (800243c <__aeabi_dsub+0x344>)
 800216e:	429e      	cmp	r6, r3
 8002170:	d048      	beq.n	8002204 <__aeabi_dsub+0x10c>
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	4319      	orrs	r1, r3
 8002178:	2d38      	cmp	r5, #56	; 0x38
 800217a:	dd00      	ble.n	800217e <__aeabi_dsub+0x86>
 800217c:	e119      	b.n	80023b2 <__aeabi_dsub+0x2ba>
 800217e:	2d1f      	cmp	r5, #31
 8002180:	dd00      	ble.n	8002184 <__aeabi_dsub+0x8c>
 8002182:	e14c      	b.n	800241e <__aeabi_dsub+0x326>
 8002184:	2320      	movs	r3, #32
 8002186:	000f      	movs	r7, r1
 8002188:	1b5b      	subs	r3, r3, r5
 800218a:	0010      	movs	r0, r2
 800218c:	409a      	lsls	r2, r3
 800218e:	409f      	lsls	r7, r3
 8002190:	40e8      	lsrs	r0, r5
 8002192:	1e53      	subs	r3, r2, #1
 8002194:	419a      	sbcs	r2, r3
 8002196:	40e9      	lsrs	r1, r5
 8002198:	4307      	orrs	r7, r0
 800219a:	4317      	orrs	r7, r2
 800219c:	4653      	mov	r3, sl
 800219e:	1bdf      	subs	r7, r3, r7
 80021a0:	1a61      	subs	r1, r4, r1
 80021a2:	45ba      	cmp	sl, r7
 80021a4:	41a4      	sbcs	r4, r4
 80021a6:	4264      	negs	r4, r4
 80021a8:	1b0c      	subs	r4, r1, r4
 80021aa:	0223      	lsls	r3, r4, #8
 80021ac:	d400      	bmi.n	80021b0 <__aeabi_dsub+0xb8>
 80021ae:	e0c5      	b.n	800233c <__aeabi_dsub+0x244>
 80021b0:	0264      	lsls	r4, r4, #9
 80021b2:	0a65      	lsrs	r5, r4, #9
 80021b4:	2d00      	cmp	r5, #0
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0xc2>
 80021b8:	e0f6      	b.n	80023a8 <__aeabi_dsub+0x2b0>
 80021ba:	0028      	movs	r0, r5
 80021bc:	f000 fb8e 	bl	80028dc <__clzsi2>
 80021c0:	0003      	movs	r3, r0
 80021c2:	3b08      	subs	r3, #8
 80021c4:	2b1f      	cmp	r3, #31
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dsub+0xd2>
 80021c8:	e0e9      	b.n	800239e <__aeabi_dsub+0x2a6>
 80021ca:	2220      	movs	r2, #32
 80021cc:	003c      	movs	r4, r7
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	409d      	lsls	r5, r3
 80021d2:	40d4      	lsrs	r4, r2
 80021d4:	409f      	lsls	r7, r3
 80021d6:	4325      	orrs	r5, r4
 80021d8:	429e      	cmp	r6, r3
 80021da:	dd00      	ble.n	80021de <__aeabi_dsub+0xe6>
 80021dc:	e0db      	b.n	8002396 <__aeabi_dsub+0x29e>
 80021de:	1b9e      	subs	r6, r3, r6
 80021e0:	1c73      	adds	r3, r6, #1
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	dd00      	ble.n	80021e8 <__aeabi_dsub+0xf0>
 80021e6:	e10a      	b.n	80023fe <__aeabi_dsub+0x306>
 80021e8:	2220      	movs	r2, #32
 80021ea:	0038      	movs	r0, r7
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	0029      	movs	r1, r5
 80021f0:	4097      	lsls	r7, r2
 80021f2:	002c      	movs	r4, r5
 80021f4:	4091      	lsls	r1, r2
 80021f6:	40d8      	lsrs	r0, r3
 80021f8:	1e7a      	subs	r2, r7, #1
 80021fa:	4197      	sbcs	r7, r2
 80021fc:	40dc      	lsrs	r4, r3
 80021fe:	2600      	movs	r6, #0
 8002200:	4301      	orrs	r1, r0
 8002202:	430f      	orrs	r7, r1
 8002204:	077b      	lsls	r3, r7, #29
 8002206:	d009      	beq.n	800221c <__aeabi_dsub+0x124>
 8002208:	230f      	movs	r3, #15
 800220a:	403b      	ands	r3, r7
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <__aeabi_dsub+0x124>
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	42bb      	cmp	r3, r7
 8002214:	41bf      	sbcs	r7, r7
 8002216:	427f      	negs	r7, r7
 8002218:	19e4      	adds	r4, r4, r7
 800221a:	001f      	movs	r7, r3
 800221c:	0223      	lsls	r3, r4, #8
 800221e:	d525      	bpl.n	800226c <__aeabi_dsub+0x174>
 8002220:	4b86      	ldr	r3, [pc, #536]	; (800243c <__aeabi_dsub+0x344>)
 8002222:	3601      	adds	r6, #1
 8002224:	429e      	cmp	r6, r3
 8002226:	d100      	bne.n	800222a <__aeabi_dsub+0x132>
 8002228:	e0af      	b.n	800238a <__aeabi_dsub+0x292>
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <__aeabi_dsub+0x348>)
 800222c:	2501      	movs	r5, #1
 800222e:	401c      	ands	r4, r3
 8002230:	4643      	mov	r3, r8
 8002232:	0762      	lsls	r2, r4, #29
 8002234:	08ff      	lsrs	r7, r7, #3
 8002236:	0264      	lsls	r4, r4, #9
 8002238:	0576      	lsls	r6, r6, #21
 800223a:	4317      	orrs	r7, r2
 800223c:	0b24      	lsrs	r4, r4, #12
 800223e:	0d76      	lsrs	r6, r6, #21
 8002240:	401d      	ands	r5, r3
 8002242:	2100      	movs	r1, #0
 8002244:	0324      	lsls	r4, r4, #12
 8002246:	0b23      	lsrs	r3, r4, #12
 8002248:	0d0c      	lsrs	r4, r1, #20
 800224a:	4a7e      	ldr	r2, [pc, #504]	; (8002444 <__aeabi_dsub+0x34c>)
 800224c:	0524      	lsls	r4, r4, #20
 800224e:	431c      	orrs	r4, r3
 8002250:	4014      	ands	r4, r2
 8002252:	0533      	lsls	r3, r6, #20
 8002254:	4323      	orrs	r3, r4
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	07ed      	lsls	r5, r5, #31
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	432b      	orrs	r3, r5
 800225e:	0038      	movs	r0, r7
 8002260:	0019      	movs	r1, r3
 8002262:	bc1c      	pop	{r2, r3, r4}
 8002264:	4690      	mov	r8, r2
 8002266:	4699      	mov	r9, r3
 8002268:	46a2      	mov	sl, r4
 800226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226c:	2501      	movs	r5, #1
 800226e:	4643      	mov	r3, r8
 8002270:	0762      	lsls	r2, r4, #29
 8002272:	08ff      	lsrs	r7, r7, #3
 8002274:	4317      	orrs	r7, r2
 8002276:	08e4      	lsrs	r4, r4, #3
 8002278:	401d      	ands	r5, r3
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <__aeabi_dsub+0x344>)
 800227c:	429e      	cmp	r6, r3
 800227e:	d036      	beq.n	80022ee <__aeabi_dsub+0x1f6>
 8002280:	0324      	lsls	r4, r4, #12
 8002282:	0576      	lsls	r6, r6, #21
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0d76      	lsrs	r6, r6, #21
 8002288:	e7db      	b.n	8002242 <__aeabi_dsub+0x14a>
 800228a:	4663      	mov	r3, ip
 800228c:	1af3      	subs	r3, r6, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	dc00      	bgt.n	8002294 <__aeabi_dsub+0x19c>
 8002292:	e094      	b.n	80023be <__aeabi_dsub+0x2c6>
 8002294:	4660      	mov	r0, ip
 8002296:	2800      	cmp	r0, #0
 8002298:	d035      	beq.n	8002306 <__aeabi_dsub+0x20e>
 800229a:	4868      	ldr	r0, [pc, #416]	; (800243c <__aeabi_dsub+0x344>)
 800229c:	4286      	cmp	r6, r0
 800229e:	d0b1      	beq.n	8002204 <__aeabi_dsub+0x10c>
 80022a0:	2780      	movs	r7, #128	; 0x80
 80022a2:	043f      	lsls	r7, r7, #16
 80022a4:	4339      	orrs	r1, r7
 80022a6:	2b38      	cmp	r3, #56	; 0x38
 80022a8:	dc00      	bgt.n	80022ac <__aeabi_dsub+0x1b4>
 80022aa:	e0fd      	b.n	80024a8 <__aeabi_dsub+0x3b0>
 80022ac:	430a      	orrs	r2, r1
 80022ae:	0017      	movs	r7, r2
 80022b0:	2100      	movs	r1, #0
 80022b2:	1e7a      	subs	r2, r7, #1
 80022b4:	4197      	sbcs	r7, r2
 80022b6:	4457      	add	r7, sl
 80022b8:	4557      	cmp	r7, sl
 80022ba:	4180      	sbcs	r0, r0
 80022bc:	1909      	adds	r1, r1, r4
 80022be:	4244      	negs	r4, r0
 80022c0:	190c      	adds	r4, r1, r4
 80022c2:	0223      	lsls	r3, r4, #8
 80022c4:	d53a      	bpl.n	800233c <__aeabi_dsub+0x244>
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <__aeabi_dsub+0x344>)
 80022c8:	3601      	adds	r6, #1
 80022ca:	429e      	cmp	r6, r3
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x1d8>
 80022ce:	e14b      	b.n	8002568 <__aeabi_dsub+0x470>
 80022d0:	2201      	movs	r2, #1
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <__aeabi_dsub+0x348>)
 80022d4:	401c      	ands	r4, r3
 80022d6:	087b      	lsrs	r3, r7, #1
 80022d8:	4017      	ands	r7, r2
 80022da:	431f      	orrs	r7, r3
 80022dc:	07e2      	lsls	r2, r4, #31
 80022de:	4317      	orrs	r7, r2
 80022e0:	0864      	lsrs	r4, r4, #1
 80022e2:	e78f      	b.n	8002204 <__aeabi_dsub+0x10c>
 80022e4:	0008      	movs	r0, r1
 80022e6:	4310      	orrs	r0, r2
 80022e8:	d000      	beq.n	80022ec <__aeabi_dsub+0x1f4>
 80022ea:	e724      	b.n	8002136 <__aeabi_dsub+0x3e>
 80022ec:	e721      	b.n	8002132 <__aeabi_dsub+0x3a>
 80022ee:	0023      	movs	r3, r4
 80022f0:	433b      	orrs	r3, r7
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dsub+0x1fe>
 80022f4:	e1b9      	b.n	800266a <__aeabi_dsub+0x572>
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	0312      	lsls	r2, r2, #12
 80022fa:	4314      	orrs	r4, r2
 80022fc:	0324      	lsls	r4, r4, #12
 80022fe:	0b24      	lsrs	r4, r4, #12
 8002300:	e79f      	b.n	8002242 <__aeabi_dsub+0x14a>
 8002302:	002e      	movs	r6, r5
 8002304:	e77e      	b.n	8002204 <__aeabi_dsub+0x10c>
 8002306:	0008      	movs	r0, r1
 8002308:	4310      	orrs	r0, r2
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x216>
 800230c:	e0ca      	b.n	80024a4 <__aeabi_dsub+0x3ac>
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	4684      	mov	ip, r0
 8002312:	2800      	cmp	r0, #0
 8002314:	d000      	beq.n	8002318 <__aeabi_dsub+0x220>
 8002316:	e0e7      	b.n	80024e8 <__aeabi_dsub+0x3f0>
 8002318:	4452      	add	r2, sl
 800231a:	4552      	cmp	r2, sl
 800231c:	4180      	sbcs	r0, r0
 800231e:	1864      	adds	r4, r4, r1
 8002320:	4240      	negs	r0, r0
 8002322:	1824      	adds	r4, r4, r0
 8002324:	0017      	movs	r7, r2
 8002326:	2601      	movs	r6, #1
 8002328:	0223      	lsls	r3, r4, #8
 800232a:	d507      	bpl.n	800233c <__aeabi_dsub+0x244>
 800232c:	2602      	movs	r6, #2
 800232e:	e7cf      	b.n	80022d0 <__aeabi_dsub+0x1d8>
 8002330:	4664      	mov	r4, ip
 8002332:	432c      	orrs	r4, r5
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x240>
 8002336:	e1b3      	b.n	80026a0 <__aeabi_dsub+0x5a8>
 8002338:	002c      	movs	r4, r5
 800233a:	4667      	mov	r7, ip
 800233c:	077b      	lsls	r3, r7, #29
 800233e:	d000      	beq.n	8002342 <__aeabi_dsub+0x24a>
 8002340:	e762      	b.n	8002208 <__aeabi_dsub+0x110>
 8002342:	0763      	lsls	r3, r4, #29
 8002344:	08ff      	lsrs	r7, r7, #3
 8002346:	431f      	orrs	r7, r3
 8002348:	2501      	movs	r5, #1
 800234a:	4643      	mov	r3, r8
 800234c:	08e4      	lsrs	r4, r4, #3
 800234e:	401d      	ands	r5, r3
 8002350:	e793      	b.n	800227a <__aeabi_dsub+0x182>
 8002352:	2d00      	cmp	r5, #0
 8002354:	d178      	bne.n	8002448 <__aeabi_dsub+0x350>
 8002356:	1c75      	adds	r5, r6, #1
 8002358:	056d      	lsls	r5, r5, #21
 800235a:	0d6d      	lsrs	r5, r5, #21
 800235c:	2d01      	cmp	r5, #1
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dsub+0x26a>
 8002360:	e0f2      	b.n	8002548 <__aeabi_dsub+0x450>
 8002362:	4650      	mov	r0, sl
 8002364:	1a80      	subs	r0, r0, r2
 8002366:	4582      	cmp	sl, r0
 8002368:	41bf      	sbcs	r7, r7
 800236a:	1a65      	subs	r5, r4, r1
 800236c:	427f      	negs	r7, r7
 800236e:	1bed      	subs	r5, r5, r7
 8002370:	4684      	mov	ip, r0
 8002372:	0228      	lsls	r0, r5, #8
 8002374:	d400      	bmi.n	8002378 <__aeabi_dsub+0x280>
 8002376:	e08c      	b.n	8002492 <__aeabi_dsub+0x39a>
 8002378:	4650      	mov	r0, sl
 800237a:	1a17      	subs	r7, r2, r0
 800237c:	42ba      	cmp	r2, r7
 800237e:	4192      	sbcs	r2, r2
 8002380:	1b0c      	subs	r4, r1, r4
 8002382:	4255      	negs	r5, r2
 8002384:	1b65      	subs	r5, r4, r5
 8002386:	4698      	mov	r8, r3
 8002388:	e714      	b.n	80021b4 <__aeabi_dsub+0xbc>
 800238a:	2501      	movs	r5, #1
 800238c:	4643      	mov	r3, r8
 800238e:	2400      	movs	r4, #0
 8002390:	401d      	ands	r5, r3
 8002392:	2700      	movs	r7, #0
 8002394:	e755      	b.n	8002242 <__aeabi_dsub+0x14a>
 8002396:	4c2a      	ldr	r4, [pc, #168]	; (8002440 <__aeabi_dsub+0x348>)
 8002398:	1af6      	subs	r6, r6, r3
 800239a:	402c      	ands	r4, r5
 800239c:	e732      	b.n	8002204 <__aeabi_dsub+0x10c>
 800239e:	003d      	movs	r5, r7
 80023a0:	3828      	subs	r0, #40	; 0x28
 80023a2:	4085      	lsls	r5, r0
 80023a4:	2700      	movs	r7, #0
 80023a6:	e717      	b.n	80021d8 <__aeabi_dsub+0xe0>
 80023a8:	0038      	movs	r0, r7
 80023aa:	f000 fa97 	bl	80028dc <__clzsi2>
 80023ae:	3020      	adds	r0, #32
 80023b0:	e706      	b.n	80021c0 <__aeabi_dsub+0xc8>
 80023b2:	430a      	orrs	r2, r1
 80023b4:	0017      	movs	r7, r2
 80023b6:	2100      	movs	r1, #0
 80023b8:	1e7a      	subs	r2, r7, #1
 80023ba:	4197      	sbcs	r7, r2
 80023bc:	e6ee      	b.n	800219c <__aeabi_dsub+0xa4>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d000      	beq.n	80023c4 <__aeabi_dsub+0x2cc>
 80023c2:	e0e5      	b.n	8002590 <__aeabi_dsub+0x498>
 80023c4:	1c73      	adds	r3, r6, #1
 80023c6:	469c      	mov	ip, r3
 80023c8:	055b      	lsls	r3, r3, #21
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	dc00      	bgt.n	80023d2 <__aeabi_dsub+0x2da>
 80023d0:	e09f      	b.n	8002512 <__aeabi_dsub+0x41a>
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <__aeabi_dsub+0x344>)
 80023d4:	459c      	cmp	ip, r3
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x2e2>
 80023d8:	e0c5      	b.n	8002566 <__aeabi_dsub+0x46e>
 80023da:	4452      	add	r2, sl
 80023dc:	4552      	cmp	r2, sl
 80023de:	4180      	sbcs	r0, r0
 80023e0:	1864      	adds	r4, r4, r1
 80023e2:	4240      	negs	r0, r0
 80023e4:	1824      	adds	r4, r4, r0
 80023e6:	07e7      	lsls	r7, r4, #31
 80023e8:	0852      	lsrs	r2, r2, #1
 80023ea:	4317      	orrs	r7, r2
 80023ec:	0864      	lsrs	r4, r4, #1
 80023ee:	4666      	mov	r6, ip
 80023f0:	e708      	b.n	8002204 <__aeabi_dsub+0x10c>
 80023f2:	4812      	ldr	r0, [pc, #72]	; (800243c <__aeabi_dsub+0x344>)
 80023f4:	4285      	cmp	r5, r0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x302>
 80023f8:	e085      	b.n	8002506 <__aeabi_dsub+0x40e>
 80023fa:	001d      	movs	r5, r3
 80023fc:	e6bc      	b.n	8002178 <__aeabi_dsub+0x80>
 80023fe:	0029      	movs	r1, r5
 8002400:	3e1f      	subs	r6, #31
 8002402:	40f1      	lsrs	r1, r6
 8002404:	2b20      	cmp	r3, #32
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x312>
 8002408:	e07f      	b.n	800250a <__aeabi_dsub+0x412>
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	409d      	lsls	r5, r3
 8002410:	432f      	orrs	r7, r5
 8002412:	1e7d      	subs	r5, r7, #1
 8002414:	41af      	sbcs	r7, r5
 8002416:	2400      	movs	r4, #0
 8002418:	430f      	orrs	r7, r1
 800241a:	2600      	movs	r6, #0
 800241c:	e78e      	b.n	800233c <__aeabi_dsub+0x244>
 800241e:	002b      	movs	r3, r5
 8002420:	000f      	movs	r7, r1
 8002422:	3b20      	subs	r3, #32
 8002424:	40df      	lsrs	r7, r3
 8002426:	2d20      	cmp	r5, #32
 8002428:	d071      	beq.n	800250e <__aeabi_dsub+0x416>
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	1b5d      	subs	r5, r3, r5
 800242e:	40a9      	lsls	r1, r5
 8002430:	430a      	orrs	r2, r1
 8002432:	1e51      	subs	r1, r2, #1
 8002434:	418a      	sbcs	r2, r1
 8002436:	2100      	movs	r1, #0
 8002438:	4317      	orrs	r7, r2
 800243a:	e6af      	b.n	800219c <__aeabi_dsub+0xa4>
 800243c:	000007ff 	.word	0x000007ff
 8002440:	ff7fffff 	.word	0xff7fffff
 8002444:	800fffff 	.word	0x800fffff
 8002448:	2e00      	cmp	r6, #0
 800244a:	d03e      	beq.n	80024ca <__aeabi_dsub+0x3d2>
 800244c:	4eb3      	ldr	r6, [pc, #716]	; (800271c <__aeabi_dsub+0x624>)
 800244e:	45b4      	cmp	ip, r6
 8002450:	d045      	beq.n	80024de <__aeabi_dsub+0x3e6>
 8002452:	2680      	movs	r6, #128	; 0x80
 8002454:	0436      	lsls	r6, r6, #16
 8002456:	426d      	negs	r5, r5
 8002458:	4334      	orrs	r4, r6
 800245a:	2d38      	cmp	r5, #56	; 0x38
 800245c:	dd00      	ble.n	8002460 <__aeabi_dsub+0x368>
 800245e:	e0a8      	b.n	80025b2 <__aeabi_dsub+0x4ba>
 8002460:	2d1f      	cmp	r5, #31
 8002462:	dd00      	ble.n	8002466 <__aeabi_dsub+0x36e>
 8002464:	e11f      	b.n	80026a6 <__aeabi_dsub+0x5ae>
 8002466:	2620      	movs	r6, #32
 8002468:	0027      	movs	r7, r4
 800246a:	4650      	mov	r0, sl
 800246c:	1b76      	subs	r6, r6, r5
 800246e:	40b7      	lsls	r7, r6
 8002470:	40e8      	lsrs	r0, r5
 8002472:	4307      	orrs	r7, r0
 8002474:	4650      	mov	r0, sl
 8002476:	40b0      	lsls	r0, r6
 8002478:	1e46      	subs	r6, r0, #1
 800247a:	41b0      	sbcs	r0, r6
 800247c:	40ec      	lsrs	r4, r5
 800247e:	4338      	orrs	r0, r7
 8002480:	1a17      	subs	r7, r2, r0
 8002482:	42ba      	cmp	r2, r7
 8002484:	4192      	sbcs	r2, r2
 8002486:	1b0c      	subs	r4, r1, r4
 8002488:	4252      	negs	r2, r2
 800248a:	1aa4      	subs	r4, r4, r2
 800248c:	4666      	mov	r6, ip
 800248e:	4698      	mov	r8, r3
 8002490:	e68b      	b.n	80021aa <__aeabi_dsub+0xb2>
 8002492:	4664      	mov	r4, ip
 8002494:	4667      	mov	r7, ip
 8002496:	432c      	orrs	r4, r5
 8002498:	d000      	beq.n	800249c <__aeabi_dsub+0x3a4>
 800249a:	e68b      	b.n	80021b4 <__aeabi_dsub+0xbc>
 800249c:	2500      	movs	r5, #0
 800249e:	2600      	movs	r6, #0
 80024a0:	2700      	movs	r7, #0
 80024a2:	e6ea      	b.n	800227a <__aeabi_dsub+0x182>
 80024a4:	001e      	movs	r6, r3
 80024a6:	e6ad      	b.n	8002204 <__aeabi_dsub+0x10c>
 80024a8:	2b1f      	cmp	r3, #31
 80024aa:	dc60      	bgt.n	800256e <__aeabi_dsub+0x476>
 80024ac:	2720      	movs	r7, #32
 80024ae:	1af8      	subs	r0, r7, r3
 80024b0:	000f      	movs	r7, r1
 80024b2:	4684      	mov	ip, r0
 80024b4:	4087      	lsls	r7, r0
 80024b6:	0010      	movs	r0, r2
 80024b8:	40d8      	lsrs	r0, r3
 80024ba:	4307      	orrs	r7, r0
 80024bc:	4660      	mov	r0, ip
 80024be:	4082      	lsls	r2, r0
 80024c0:	1e50      	subs	r0, r2, #1
 80024c2:	4182      	sbcs	r2, r0
 80024c4:	40d9      	lsrs	r1, r3
 80024c6:	4317      	orrs	r7, r2
 80024c8:	e6f5      	b.n	80022b6 <__aeabi_dsub+0x1be>
 80024ca:	0026      	movs	r6, r4
 80024cc:	4650      	mov	r0, sl
 80024ce:	4306      	orrs	r6, r0
 80024d0:	d005      	beq.n	80024de <__aeabi_dsub+0x3e6>
 80024d2:	43ed      	mvns	r5, r5
 80024d4:	2d00      	cmp	r5, #0
 80024d6:	d0d3      	beq.n	8002480 <__aeabi_dsub+0x388>
 80024d8:	4e90      	ldr	r6, [pc, #576]	; (800271c <__aeabi_dsub+0x624>)
 80024da:	45b4      	cmp	ip, r6
 80024dc:	d1bd      	bne.n	800245a <__aeabi_dsub+0x362>
 80024de:	000c      	movs	r4, r1
 80024e0:	0017      	movs	r7, r2
 80024e2:	4666      	mov	r6, ip
 80024e4:	4698      	mov	r8, r3
 80024e6:	e68d      	b.n	8002204 <__aeabi_dsub+0x10c>
 80024e8:	488c      	ldr	r0, [pc, #560]	; (800271c <__aeabi_dsub+0x624>)
 80024ea:	4283      	cmp	r3, r0
 80024ec:	d00b      	beq.n	8002506 <__aeabi_dsub+0x40e>
 80024ee:	4663      	mov	r3, ip
 80024f0:	e6d9      	b.n	80022a6 <__aeabi_dsub+0x1ae>
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	d000      	beq.n	80024f8 <__aeabi_dsub+0x400>
 80024f6:	e096      	b.n	8002626 <__aeabi_dsub+0x52e>
 80024f8:	0008      	movs	r0, r1
 80024fa:	4310      	orrs	r0, r2
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x408>
 80024fe:	e0e2      	b.n	80026c6 <__aeabi_dsub+0x5ce>
 8002500:	000c      	movs	r4, r1
 8002502:	0017      	movs	r7, r2
 8002504:	4698      	mov	r8, r3
 8002506:	4e85      	ldr	r6, [pc, #532]	; (800271c <__aeabi_dsub+0x624>)
 8002508:	e67c      	b.n	8002204 <__aeabi_dsub+0x10c>
 800250a:	2500      	movs	r5, #0
 800250c:	e780      	b.n	8002410 <__aeabi_dsub+0x318>
 800250e:	2100      	movs	r1, #0
 8002510:	e78e      	b.n	8002430 <__aeabi_dsub+0x338>
 8002512:	0023      	movs	r3, r4
 8002514:	4650      	mov	r0, sl
 8002516:	4303      	orrs	r3, r0
 8002518:	2e00      	cmp	r6, #0
 800251a:	d000      	beq.n	800251e <__aeabi_dsub+0x426>
 800251c:	e0a8      	b.n	8002670 <__aeabi_dsub+0x578>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x42c>
 8002522:	e0de      	b.n	80026e2 <__aeabi_dsub+0x5ea>
 8002524:	000b      	movs	r3, r1
 8002526:	4313      	orrs	r3, r2
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x434>
 800252a:	e66b      	b.n	8002204 <__aeabi_dsub+0x10c>
 800252c:	4452      	add	r2, sl
 800252e:	4552      	cmp	r2, sl
 8002530:	4180      	sbcs	r0, r0
 8002532:	1864      	adds	r4, r4, r1
 8002534:	4240      	negs	r0, r0
 8002536:	1824      	adds	r4, r4, r0
 8002538:	0017      	movs	r7, r2
 800253a:	0223      	lsls	r3, r4, #8
 800253c:	d400      	bmi.n	8002540 <__aeabi_dsub+0x448>
 800253e:	e6fd      	b.n	800233c <__aeabi_dsub+0x244>
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <__aeabi_dsub+0x628>)
 8002542:	4666      	mov	r6, ip
 8002544:	401c      	ands	r4, r3
 8002546:	e65d      	b.n	8002204 <__aeabi_dsub+0x10c>
 8002548:	0025      	movs	r5, r4
 800254a:	4650      	mov	r0, sl
 800254c:	4305      	orrs	r5, r0
 800254e:	2e00      	cmp	r6, #0
 8002550:	d1cf      	bne.n	80024f2 <__aeabi_dsub+0x3fa>
 8002552:	2d00      	cmp	r5, #0
 8002554:	d14f      	bne.n	80025f6 <__aeabi_dsub+0x4fe>
 8002556:	000c      	movs	r4, r1
 8002558:	4314      	orrs	r4, r2
 800255a:	d100      	bne.n	800255e <__aeabi_dsub+0x466>
 800255c:	e0a0      	b.n	80026a0 <__aeabi_dsub+0x5a8>
 800255e:	000c      	movs	r4, r1
 8002560:	0017      	movs	r7, r2
 8002562:	4698      	mov	r8, r3
 8002564:	e64e      	b.n	8002204 <__aeabi_dsub+0x10c>
 8002566:	4666      	mov	r6, ip
 8002568:	2400      	movs	r4, #0
 800256a:	2700      	movs	r7, #0
 800256c:	e685      	b.n	800227a <__aeabi_dsub+0x182>
 800256e:	001f      	movs	r7, r3
 8002570:	0008      	movs	r0, r1
 8002572:	3f20      	subs	r7, #32
 8002574:	40f8      	lsrs	r0, r7
 8002576:	0007      	movs	r7, r0
 8002578:	2b20      	cmp	r3, #32
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x486>
 800257c:	e08e      	b.n	800269c <__aeabi_dsub+0x5a4>
 800257e:	2040      	movs	r0, #64	; 0x40
 8002580:	1ac3      	subs	r3, r0, r3
 8002582:	4099      	lsls	r1, r3
 8002584:	430a      	orrs	r2, r1
 8002586:	1e51      	subs	r1, r2, #1
 8002588:	418a      	sbcs	r2, r1
 800258a:	2100      	movs	r1, #0
 800258c:	4317      	orrs	r7, r2
 800258e:	e692      	b.n	80022b6 <__aeabi_dsub+0x1be>
 8002590:	2e00      	cmp	r6, #0
 8002592:	d114      	bne.n	80025be <__aeabi_dsub+0x4c6>
 8002594:	0026      	movs	r6, r4
 8002596:	4650      	mov	r0, sl
 8002598:	4306      	orrs	r6, r0
 800259a:	d062      	beq.n	8002662 <__aeabi_dsub+0x56a>
 800259c:	43db      	mvns	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d15c      	bne.n	800265c <__aeabi_dsub+0x564>
 80025a2:	1887      	adds	r7, r0, r2
 80025a4:	4297      	cmp	r7, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	1864      	adds	r4, r4, r1
 80025aa:	4252      	negs	r2, r2
 80025ac:	18a4      	adds	r4, r4, r2
 80025ae:	4666      	mov	r6, ip
 80025b0:	e687      	b.n	80022c2 <__aeabi_dsub+0x1ca>
 80025b2:	4650      	mov	r0, sl
 80025b4:	4320      	orrs	r0, r4
 80025b6:	1e44      	subs	r4, r0, #1
 80025b8:	41a0      	sbcs	r0, r4
 80025ba:	2400      	movs	r4, #0
 80025bc:	e760      	b.n	8002480 <__aeabi_dsub+0x388>
 80025be:	4e57      	ldr	r6, [pc, #348]	; (800271c <__aeabi_dsub+0x624>)
 80025c0:	45b4      	cmp	ip, r6
 80025c2:	d04e      	beq.n	8002662 <__aeabi_dsub+0x56a>
 80025c4:	2680      	movs	r6, #128	; 0x80
 80025c6:	0436      	lsls	r6, r6, #16
 80025c8:	425b      	negs	r3, r3
 80025ca:	4334      	orrs	r4, r6
 80025cc:	2b38      	cmp	r3, #56	; 0x38
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dsub+0x4da>
 80025d0:	e07f      	b.n	80026d2 <__aeabi_dsub+0x5da>
 80025d2:	2b1f      	cmp	r3, #31
 80025d4:	dd00      	ble.n	80025d8 <__aeabi_dsub+0x4e0>
 80025d6:	e08b      	b.n	80026f0 <__aeabi_dsub+0x5f8>
 80025d8:	2620      	movs	r6, #32
 80025da:	0027      	movs	r7, r4
 80025dc:	4650      	mov	r0, sl
 80025de:	1af6      	subs	r6, r6, r3
 80025e0:	40b7      	lsls	r7, r6
 80025e2:	40d8      	lsrs	r0, r3
 80025e4:	4307      	orrs	r7, r0
 80025e6:	4650      	mov	r0, sl
 80025e8:	40b0      	lsls	r0, r6
 80025ea:	1e46      	subs	r6, r0, #1
 80025ec:	41b0      	sbcs	r0, r6
 80025ee:	4307      	orrs	r7, r0
 80025f0:	40dc      	lsrs	r4, r3
 80025f2:	18bf      	adds	r7, r7, r2
 80025f4:	e7d6      	b.n	80025a4 <__aeabi_dsub+0x4ac>
 80025f6:	000d      	movs	r5, r1
 80025f8:	4315      	orrs	r5, r2
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x506>
 80025fc:	e602      	b.n	8002204 <__aeabi_dsub+0x10c>
 80025fe:	4650      	mov	r0, sl
 8002600:	1a80      	subs	r0, r0, r2
 8002602:	4582      	cmp	sl, r0
 8002604:	41bf      	sbcs	r7, r7
 8002606:	1a65      	subs	r5, r4, r1
 8002608:	427f      	negs	r7, r7
 800260a:	1bed      	subs	r5, r5, r7
 800260c:	4684      	mov	ip, r0
 800260e:	0228      	lsls	r0, r5, #8
 8002610:	d400      	bmi.n	8002614 <__aeabi_dsub+0x51c>
 8002612:	e68d      	b.n	8002330 <__aeabi_dsub+0x238>
 8002614:	4650      	mov	r0, sl
 8002616:	1a17      	subs	r7, r2, r0
 8002618:	42ba      	cmp	r2, r7
 800261a:	4192      	sbcs	r2, r2
 800261c:	1b0c      	subs	r4, r1, r4
 800261e:	4252      	negs	r2, r2
 8002620:	1aa4      	subs	r4, r4, r2
 8002622:	4698      	mov	r8, r3
 8002624:	e5ee      	b.n	8002204 <__aeabi_dsub+0x10c>
 8002626:	000d      	movs	r5, r1
 8002628:	4315      	orrs	r5, r2
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x536>
 800262c:	e76b      	b.n	8002506 <__aeabi_dsub+0x40e>
 800262e:	4650      	mov	r0, sl
 8002630:	0767      	lsls	r7, r4, #29
 8002632:	08c0      	lsrs	r0, r0, #3
 8002634:	4307      	orrs	r7, r0
 8002636:	2080      	movs	r0, #128	; 0x80
 8002638:	08e4      	lsrs	r4, r4, #3
 800263a:	0300      	lsls	r0, r0, #12
 800263c:	4204      	tst	r4, r0
 800263e:	d007      	beq.n	8002650 <__aeabi_dsub+0x558>
 8002640:	08cd      	lsrs	r5, r1, #3
 8002642:	4205      	tst	r5, r0
 8002644:	d104      	bne.n	8002650 <__aeabi_dsub+0x558>
 8002646:	002c      	movs	r4, r5
 8002648:	4698      	mov	r8, r3
 800264a:	08d7      	lsrs	r7, r2, #3
 800264c:	0749      	lsls	r1, r1, #29
 800264e:	430f      	orrs	r7, r1
 8002650:	0f7b      	lsrs	r3, r7, #29
 8002652:	00e4      	lsls	r4, r4, #3
 8002654:	431c      	orrs	r4, r3
 8002656:	00ff      	lsls	r7, r7, #3
 8002658:	4e30      	ldr	r6, [pc, #192]	; (800271c <__aeabi_dsub+0x624>)
 800265a:	e5d3      	b.n	8002204 <__aeabi_dsub+0x10c>
 800265c:	4e2f      	ldr	r6, [pc, #188]	; (800271c <__aeabi_dsub+0x624>)
 800265e:	45b4      	cmp	ip, r6
 8002660:	d1b4      	bne.n	80025cc <__aeabi_dsub+0x4d4>
 8002662:	000c      	movs	r4, r1
 8002664:	0017      	movs	r7, r2
 8002666:	4666      	mov	r6, ip
 8002668:	e5cc      	b.n	8002204 <__aeabi_dsub+0x10c>
 800266a:	2700      	movs	r7, #0
 800266c:	2400      	movs	r4, #0
 800266e:	e5e8      	b.n	8002242 <__aeabi_dsub+0x14a>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d039      	beq.n	80026e8 <__aeabi_dsub+0x5f0>
 8002674:	000b      	movs	r3, r1
 8002676:	4313      	orrs	r3, r2
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x584>
 800267a:	e744      	b.n	8002506 <__aeabi_dsub+0x40e>
 800267c:	08c0      	lsrs	r0, r0, #3
 800267e:	0767      	lsls	r7, r4, #29
 8002680:	4307      	orrs	r7, r0
 8002682:	2080      	movs	r0, #128	; 0x80
 8002684:	08e4      	lsrs	r4, r4, #3
 8002686:	0300      	lsls	r0, r0, #12
 8002688:	4204      	tst	r4, r0
 800268a:	d0e1      	beq.n	8002650 <__aeabi_dsub+0x558>
 800268c:	08cb      	lsrs	r3, r1, #3
 800268e:	4203      	tst	r3, r0
 8002690:	d1de      	bne.n	8002650 <__aeabi_dsub+0x558>
 8002692:	08d7      	lsrs	r7, r2, #3
 8002694:	0749      	lsls	r1, r1, #29
 8002696:	430f      	orrs	r7, r1
 8002698:	001c      	movs	r4, r3
 800269a:	e7d9      	b.n	8002650 <__aeabi_dsub+0x558>
 800269c:	2100      	movs	r1, #0
 800269e:	e771      	b.n	8002584 <__aeabi_dsub+0x48c>
 80026a0:	2500      	movs	r5, #0
 80026a2:	2700      	movs	r7, #0
 80026a4:	e5e9      	b.n	800227a <__aeabi_dsub+0x182>
 80026a6:	002e      	movs	r6, r5
 80026a8:	0027      	movs	r7, r4
 80026aa:	3e20      	subs	r6, #32
 80026ac:	40f7      	lsrs	r7, r6
 80026ae:	2d20      	cmp	r5, #32
 80026b0:	d02f      	beq.n	8002712 <__aeabi_dsub+0x61a>
 80026b2:	2640      	movs	r6, #64	; 0x40
 80026b4:	1b75      	subs	r5, r6, r5
 80026b6:	40ac      	lsls	r4, r5
 80026b8:	4650      	mov	r0, sl
 80026ba:	4320      	orrs	r0, r4
 80026bc:	1e44      	subs	r4, r0, #1
 80026be:	41a0      	sbcs	r0, r4
 80026c0:	2400      	movs	r4, #0
 80026c2:	4338      	orrs	r0, r7
 80026c4:	e6dc      	b.n	8002480 <__aeabi_dsub+0x388>
 80026c6:	2480      	movs	r4, #128	; 0x80
 80026c8:	2500      	movs	r5, #0
 80026ca:	0324      	lsls	r4, r4, #12
 80026cc:	4e13      	ldr	r6, [pc, #76]	; (800271c <__aeabi_dsub+0x624>)
 80026ce:	2700      	movs	r7, #0
 80026d0:	e5d3      	b.n	800227a <__aeabi_dsub+0x182>
 80026d2:	4650      	mov	r0, sl
 80026d4:	4320      	orrs	r0, r4
 80026d6:	0007      	movs	r7, r0
 80026d8:	1e78      	subs	r0, r7, #1
 80026da:	4187      	sbcs	r7, r0
 80026dc:	2400      	movs	r4, #0
 80026de:	18bf      	adds	r7, r7, r2
 80026e0:	e760      	b.n	80025a4 <__aeabi_dsub+0x4ac>
 80026e2:	000c      	movs	r4, r1
 80026e4:	0017      	movs	r7, r2
 80026e6:	e58d      	b.n	8002204 <__aeabi_dsub+0x10c>
 80026e8:	000c      	movs	r4, r1
 80026ea:	0017      	movs	r7, r2
 80026ec:	4e0b      	ldr	r6, [pc, #44]	; (800271c <__aeabi_dsub+0x624>)
 80026ee:	e589      	b.n	8002204 <__aeabi_dsub+0x10c>
 80026f0:	001e      	movs	r6, r3
 80026f2:	0027      	movs	r7, r4
 80026f4:	3e20      	subs	r6, #32
 80026f6:	40f7      	lsrs	r7, r6
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d00c      	beq.n	8002716 <__aeabi_dsub+0x61e>
 80026fc:	2640      	movs	r6, #64	; 0x40
 80026fe:	1af3      	subs	r3, r6, r3
 8002700:	409c      	lsls	r4, r3
 8002702:	4650      	mov	r0, sl
 8002704:	4320      	orrs	r0, r4
 8002706:	1e44      	subs	r4, r0, #1
 8002708:	41a0      	sbcs	r0, r4
 800270a:	4307      	orrs	r7, r0
 800270c:	2400      	movs	r4, #0
 800270e:	18bf      	adds	r7, r7, r2
 8002710:	e748      	b.n	80025a4 <__aeabi_dsub+0x4ac>
 8002712:	2400      	movs	r4, #0
 8002714:	e7d0      	b.n	80026b8 <__aeabi_dsub+0x5c0>
 8002716:	2400      	movs	r4, #0
 8002718:	e7f3      	b.n	8002702 <__aeabi_dsub+0x60a>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	000007ff 	.word	0x000007ff
 8002720:	ff7fffff 	.word	0xff7fffff

08002724 <__aeabi_f2d>:
 8002724:	0041      	lsls	r1, r0, #1
 8002726:	0e09      	lsrs	r1, r1, #24
 8002728:	1c4b      	adds	r3, r1, #1
 800272a:	b570      	push	{r4, r5, r6, lr}
 800272c:	b2db      	uxtb	r3, r3
 800272e:	0246      	lsls	r6, r0, #9
 8002730:	0a75      	lsrs	r5, r6, #9
 8002732:	0fc4      	lsrs	r4, r0, #31
 8002734:	2b01      	cmp	r3, #1
 8002736:	dd14      	ble.n	8002762 <__aeabi_f2d+0x3e>
 8002738:	23e0      	movs	r3, #224	; 0xe0
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	076d      	lsls	r5, r5, #29
 800273e:	0b36      	lsrs	r6, r6, #12
 8002740:	18cb      	adds	r3, r1, r3
 8002742:	2100      	movs	r1, #0
 8002744:	0d0a      	lsrs	r2, r1, #20
 8002746:	0028      	movs	r0, r5
 8002748:	0512      	lsls	r2, r2, #20
 800274a:	4d1c      	ldr	r5, [pc, #112]	; (80027bc <__aeabi_f2d+0x98>)
 800274c:	4332      	orrs	r2, r6
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	402a      	ands	r2, r5
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	4313      	orrs	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	07e4      	lsls	r4, r4, #31
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	4323      	orrs	r3, r4
 800275e:	0019      	movs	r1, r3
 8002760:	bd70      	pop	{r4, r5, r6, pc}
 8002762:	2900      	cmp	r1, #0
 8002764:	d114      	bne.n	8002790 <__aeabi_f2d+0x6c>
 8002766:	2d00      	cmp	r5, #0
 8002768:	d01e      	beq.n	80027a8 <__aeabi_f2d+0x84>
 800276a:	0028      	movs	r0, r5
 800276c:	f000 f8b6 	bl	80028dc <__clzsi2>
 8002770:	280a      	cmp	r0, #10
 8002772:	dc1c      	bgt.n	80027ae <__aeabi_f2d+0x8a>
 8002774:	230b      	movs	r3, #11
 8002776:	002a      	movs	r2, r5
 8002778:	1a1b      	subs	r3, r3, r0
 800277a:	40da      	lsrs	r2, r3
 800277c:	0003      	movs	r3, r0
 800277e:	3315      	adds	r3, #21
 8002780:	409d      	lsls	r5, r3
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <__aeabi_f2d+0x9c>)
 8002784:	0312      	lsls	r2, r2, #12
 8002786:	1a1b      	subs	r3, r3, r0
 8002788:	055b      	lsls	r3, r3, #21
 800278a:	0b16      	lsrs	r6, r2, #12
 800278c:	0d5b      	lsrs	r3, r3, #21
 800278e:	e7d8      	b.n	8002742 <__aeabi_f2d+0x1e>
 8002790:	2d00      	cmp	r5, #0
 8002792:	d006      	beq.n	80027a2 <__aeabi_f2d+0x7e>
 8002794:	0b32      	lsrs	r2, r6, #12
 8002796:	2680      	movs	r6, #128	; 0x80
 8002798:	0336      	lsls	r6, r6, #12
 800279a:	076d      	lsls	r5, r5, #29
 800279c:	4316      	orrs	r6, r2
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <__aeabi_f2d+0xa0>)
 80027a0:	e7cf      	b.n	8002742 <__aeabi_f2d+0x1e>
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <__aeabi_f2d+0xa0>)
 80027a4:	2600      	movs	r6, #0
 80027a6:	e7cc      	b.n	8002742 <__aeabi_f2d+0x1e>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2600      	movs	r6, #0
 80027ac:	e7c9      	b.n	8002742 <__aeabi_f2d+0x1e>
 80027ae:	0003      	movs	r3, r0
 80027b0:	002a      	movs	r2, r5
 80027b2:	3b0b      	subs	r3, #11
 80027b4:	409a      	lsls	r2, r3
 80027b6:	2500      	movs	r5, #0
 80027b8:	e7e3      	b.n	8002782 <__aeabi_f2d+0x5e>
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	800fffff 	.word	0x800fffff
 80027c0:	00000389 	.word	0x00000389
 80027c4:	000007ff 	.word	0x000007ff

080027c8 <__aeabi_d2f>:
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	004c      	lsls	r4, r1, #1
 80027cc:	0d64      	lsrs	r4, r4, #21
 80027ce:	030b      	lsls	r3, r1, #12
 80027d0:	1c62      	adds	r2, r4, #1
 80027d2:	0f45      	lsrs	r5, r0, #29
 80027d4:	0a5b      	lsrs	r3, r3, #9
 80027d6:	0552      	lsls	r2, r2, #21
 80027d8:	432b      	orrs	r3, r5
 80027da:	0fc9      	lsrs	r1, r1, #31
 80027dc:	00c5      	lsls	r5, r0, #3
 80027de:	0d52      	lsrs	r2, r2, #21
 80027e0:	2a01      	cmp	r2, #1
 80027e2:	dd28      	ble.n	8002836 <__aeabi_d2f+0x6e>
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <__aeabi_d2f+0x108>)
 80027e6:	18a6      	adds	r6, r4, r2
 80027e8:	2efe      	cmp	r6, #254	; 0xfe
 80027ea:	dc1b      	bgt.n	8002824 <__aeabi_d2f+0x5c>
 80027ec:	2e00      	cmp	r6, #0
 80027ee:	dd3e      	ble.n	800286e <__aeabi_d2f+0xa6>
 80027f0:	0180      	lsls	r0, r0, #6
 80027f2:	0002      	movs	r2, r0
 80027f4:	1e50      	subs	r0, r2, #1
 80027f6:	4182      	sbcs	r2, r0
 80027f8:	0f6d      	lsrs	r5, r5, #29
 80027fa:	432a      	orrs	r2, r5
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4313      	orrs	r3, r2
 8002800:	075a      	lsls	r2, r3, #29
 8002802:	d004      	beq.n	800280e <__aeabi_d2f+0x46>
 8002804:	220f      	movs	r2, #15
 8002806:	401a      	ands	r2, r3
 8002808:	2a04      	cmp	r2, #4
 800280a:	d000      	beq.n	800280e <__aeabi_d2f+0x46>
 800280c:	3304      	adds	r3, #4
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	04d2      	lsls	r2, r2, #19
 8002812:	401a      	ands	r2, r3
 8002814:	d05a      	beq.n	80028cc <__aeabi_d2f+0x104>
 8002816:	3601      	adds	r6, #1
 8002818:	2eff      	cmp	r6, #255	; 0xff
 800281a:	d003      	beq.n	8002824 <__aeabi_d2f+0x5c>
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	0a5b      	lsrs	r3, r3, #9
 8002820:	b2f4      	uxtb	r4, r6
 8002822:	e001      	b.n	8002828 <__aeabi_d2f+0x60>
 8002824:	24ff      	movs	r4, #255	; 0xff
 8002826:	2300      	movs	r3, #0
 8002828:	0258      	lsls	r0, r3, #9
 800282a:	05e4      	lsls	r4, r4, #23
 800282c:	0a40      	lsrs	r0, r0, #9
 800282e:	07c9      	lsls	r1, r1, #31
 8002830:	4320      	orrs	r0, r4
 8002832:	4308      	orrs	r0, r1
 8002834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002836:	2c00      	cmp	r4, #0
 8002838:	d007      	beq.n	800284a <__aeabi_d2f+0x82>
 800283a:	431d      	orrs	r5, r3
 800283c:	d0f2      	beq.n	8002824 <__aeabi_d2f+0x5c>
 800283e:	2080      	movs	r0, #128	; 0x80
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	0480      	lsls	r0, r0, #18
 8002844:	4303      	orrs	r3, r0
 8002846:	26ff      	movs	r6, #255	; 0xff
 8002848:	e7da      	b.n	8002800 <__aeabi_d2f+0x38>
 800284a:	432b      	orrs	r3, r5
 800284c:	d003      	beq.n	8002856 <__aeabi_d2f+0x8e>
 800284e:	2305      	movs	r3, #5
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	2cff      	cmp	r4, #255	; 0xff
 8002854:	d003      	beq.n	800285e <__aeabi_d2f+0x96>
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	0a5b      	lsrs	r3, r3, #9
 800285a:	b2e4      	uxtb	r4, r4
 800285c:	e7e4      	b.n	8002828 <__aeabi_d2f+0x60>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d032      	beq.n	80028c8 <__aeabi_d2f+0x100>
 8002862:	2080      	movs	r0, #128	; 0x80
 8002864:	03c0      	lsls	r0, r0, #15
 8002866:	4303      	orrs	r3, r0
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	0a5b      	lsrs	r3, r3, #9
 800286c:	e7dc      	b.n	8002828 <__aeabi_d2f+0x60>
 800286e:	0032      	movs	r2, r6
 8002870:	3217      	adds	r2, #23
 8002872:	db14      	blt.n	800289e <__aeabi_d2f+0xd6>
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	271e      	movs	r7, #30
 8002878:	0412      	lsls	r2, r2, #16
 800287a:	4313      	orrs	r3, r2
 800287c:	1bbf      	subs	r7, r7, r6
 800287e:	2f1f      	cmp	r7, #31
 8002880:	dc0f      	bgt.n	80028a2 <__aeabi_d2f+0xda>
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <__aeabi_d2f+0x10c>)
 8002884:	4694      	mov	ip, r2
 8002886:	4464      	add	r4, ip
 8002888:	002a      	movs	r2, r5
 800288a:	40a5      	lsls	r5, r4
 800288c:	002e      	movs	r6, r5
 800288e:	40a3      	lsls	r3, r4
 8002890:	1e75      	subs	r5, r6, #1
 8002892:	41ae      	sbcs	r6, r5
 8002894:	40fa      	lsrs	r2, r7
 8002896:	4333      	orrs	r3, r6
 8002898:	4313      	orrs	r3, r2
 800289a:	2600      	movs	r6, #0
 800289c:	e7b0      	b.n	8002800 <__aeabi_d2f+0x38>
 800289e:	2400      	movs	r4, #0
 80028a0:	e7d5      	b.n	800284e <__aeabi_d2f+0x86>
 80028a2:	2202      	movs	r2, #2
 80028a4:	4252      	negs	r2, r2
 80028a6:	1b96      	subs	r6, r2, r6
 80028a8:	001a      	movs	r2, r3
 80028aa:	40f2      	lsrs	r2, r6
 80028ac:	2f20      	cmp	r7, #32
 80028ae:	d009      	beq.n	80028c4 <__aeabi_d2f+0xfc>
 80028b0:	4809      	ldr	r0, [pc, #36]	; (80028d8 <__aeabi_d2f+0x110>)
 80028b2:	4684      	mov	ip, r0
 80028b4:	4464      	add	r4, ip
 80028b6:	40a3      	lsls	r3, r4
 80028b8:	432b      	orrs	r3, r5
 80028ba:	1e5d      	subs	r5, r3, #1
 80028bc:	41ab      	sbcs	r3, r5
 80028be:	2600      	movs	r6, #0
 80028c0:	4313      	orrs	r3, r2
 80028c2:	e79d      	b.n	8002800 <__aeabi_d2f+0x38>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e7f7      	b.n	80028b8 <__aeabi_d2f+0xf0>
 80028c8:	2300      	movs	r3, #0
 80028ca:	e7ad      	b.n	8002828 <__aeabi_d2f+0x60>
 80028cc:	0034      	movs	r4, r6
 80028ce:	e7bf      	b.n	8002850 <__aeabi_d2f+0x88>
 80028d0:	fffffc80 	.word	0xfffffc80
 80028d4:	fffffc82 	.word	0xfffffc82
 80028d8:	fffffca2 	.word	0xfffffca2

080028dc <__clzsi2>:
 80028dc:	211c      	movs	r1, #28
 80028de:	2301      	movs	r3, #1
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	4298      	cmp	r0, r3
 80028e4:	d301      	bcc.n	80028ea <__clzsi2+0xe>
 80028e6:	0c00      	lsrs	r0, r0, #16
 80028e8:	3910      	subs	r1, #16
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	4298      	cmp	r0, r3
 80028ee:	d301      	bcc.n	80028f4 <__clzsi2+0x18>
 80028f0:	0a00      	lsrs	r0, r0, #8
 80028f2:	3908      	subs	r1, #8
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	4298      	cmp	r0, r3
 80028f8:	d301      	bcc.n	80028fe <__clzsi2+0x22>
 80028fa:	0900      	lsrs	r0, r0, #4
 80028fc:	3904      	subs	r1, #4
 80028fe:	a202      	add	r2, pc, #8	; (adr r2, 8002908 <__clzsi2+0x2c>)
 8002900:	5c10      	ldrb	r0, [r2, r0]
 8002902:	1840      	adds	r0, r0, r1
 8002904:	4770      	bx	lr
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	02020304 	.word	0x02020304
 800290c:	01010101 	.word	0x01010101
	...

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b510      	push	{r4, lr}
 800291a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800291c:	f000 ff84 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8002920:	21fa      	movs	r1, #250	; 0xfa
 8002922:	0089      	lsls	r1, r1, #2
 8002924:	f7fd fc04 	bl	8000130 <__udivsi3>
 8002928:	f000 fac8 	bl	8002ebc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800292c:	2001      	movs	r0, #1
 800292e:	2200      	movs	r2, #0
 8002930:	0021      	movs	r1, r4
 8002932:	4240      	negs	r0, r0
 8002934:	f000 fa88 	bl	8002e48 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002938:	2000      	movs	r0, #0
 800293a:	bd10      	pop	{r4, pc}

0800293c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800293c:	2310      	movs	r3, #16
 800293e:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_Init+0x1c>)
{
 8002940:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002942:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002944:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002946:	430b      	orrs	r3, r1
 8002948:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800294a:	f7ff ffe5 	bl	8002918 <HAL_InitTick>
  HAL_MspInit();
 800294e:	f002 f8fb 	bl	8004b48 <HAL_MspInit>
}
 8002952:	2000      	movs	r0, #0
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800295c:	4a02      	ldr	r2, [pc, #8]	; (8002968 <HAL_IncTick+0xc>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	20000020 	.word	0x20000020

0800296c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800296c:	4b01      	ldr	r3, [pc, #4]	; (8002974 <HAL_GetTick+0x8>)
 800296e:	6818      	ldr	r0, [r3, #0]
}
 8002970:	4770      	bx	lr
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20000020 	.word	0x20000020

08002978 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002978:	2300      	movs	r3, #0
{
 800297a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800297c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800297e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002980:	6803      	ldr	r3, [r0, #0]
{
 8002982:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	400a      	ands	r2, r1
 8002988:	2a01      	cmp	r2, #1
 800298a:	d107      	bne.n	800299c <ADC_Enable+0x24>
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	4211      	tst	r1, r2
 8002990:	d001      	beq.n	8002996 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002992:	2000      	movs	r0, #0
}
 8002994:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	0412      	lsls	r2, r2, #16
 800299a:	d4fa      	bmi.n	8002992 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <ADC_Enable+0x8c>)
 80029a0:	4211      	tst	r1, r2
 80029a2:	d008      	beq.n	80029b6 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029aa:	4313      	orrs	r3, r2
 80029ac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029b0:	4303      	orrs	r3, r0
 80029b2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80029b4:	e7ee      	b.n	8002994 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80029b6:	2201      	movs	r2, #1
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <ADC_Enable+0x90>)
 80029c0:	4912      	ldr	r1, [pc, #72]	; (8002a0c <ADC_Enable+0x94>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f7fd fbb4 	bl	8000130 <__udivsi3>
 80029c8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80029ca:	9b01      	ldr	r3, [sp, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d115      	bne.n	80029fc <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80029d0:	f7ff ffcc 	bl	800296c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029d4:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80029d6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	422b      	tst	r3, r5
 80029de:	d1d8      	bne.n	8002992 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029e0:	f7ff ffc4 	bl	800296c <HAL_GetTick>
 80029e4:	1b80      	subs	r0, r0, r6
 80029e6:	2802      	cmp	r0, #2
 80029e8:	d9f6      	bls.n	80029d8 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	2310      	movs	r3, #16
 80029ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	4313      	orrs	r3, r2
 80029f2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029f6:	432b      	orrs	r3, r5
 80029f8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80029fa:	e7cb      	b.n	8002994 <ADC_Enable+0x1c>
      wait_loop_index--;
 80029fc:	9b01      	ldr	r3, [sp, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	e7e2      	b.n	80029ca <ADC_Enable+0x52>
 8002a04:	80000017 	.word	0x80000017
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	000f4240 	.word	0x000f4240

08002a10 <HAL_ADC_Init>:
{
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002a16:	2c00      	cmp	r4, #0
 8002a18:	d072      	beq.n	8002b00 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002a20:	0022      	movs	r2, r4
 8002a22:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8002a24:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8002a26:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002a28:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002a2a:	f001 fced 	bl	8004408 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a30:	06db      	lsls	r3, r3, #27
 8002a32:	d500      	bpl.n	8002a36 <HAL_ADC_Init+0x26>
 8002a34:	e079      	b.n	8002b2a <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a36:	2204      	movs	r2, #4
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002a3e:	d000      	beq.n	8002a42 <HAL_ADC_Init+0x32>
 8002a40:	e073      	b.n	8002b2a <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8002a42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a44:	4942      	ldr	r1, [pc, #264]	; (8002b50 <HAL_ADC_Init+0x140>)
 8002a46:	4011      	ands	r1, r2
 8002a48:	2202      	movs	r2, #2
 8002a4a:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002a4c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002a4e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	400a      	ands	r2, r1
 8002a54:	2a01      	cmp	r2, #1
 8002a56:	d000      	beq.n	8002a5a <HAL_ADC_Init+0x4a>
 8002a58:	e06d      	b.n	8002b36 <HAL_ADC_Init+0x126>
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	4211      	tst	r1, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_ADC_Init+0x56>
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	0412      	lsls	r2, r2, #16
 8002a64:	d567      	bpl.n	8002b36 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	493a      	ldr	r1, [pc, #232]	; (8002b54 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002a6a:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a70:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002a72:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a74:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002a76:	69e2      	ldr	r2, [r4, #28]
 8002a78:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002a7a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002a7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a7e:	3a01      	subs	r2, #1
 8002a80:	1e56      	subs	r6, r2, #1
 8002a82:	41b2      	sbcs	r2, r6
 8002a84:	0316      	lsls	r6, r2, #12
 8002a86:	68e2      	ldr	r2, [r4, #12]
 8002a88:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002a8a:	6922      	ldr	r2, [r4, #16]
 8002a8c:	430f      	orrs	r7, r1
 8002a8e:	2a02      	cmp	r2, #2
 8002a90:	d100      	bne.n	8002a94 <HAL_ADC_Init+0x84>
 8002a92:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002a94:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a96:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002a98:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002a9a:	433a      	orrs	r2, r7
 8002a9c:	4332      	orrs	r2, r6
 8002a9e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa0:	2901      	cmp	r1, #1
 8002aa2:	d104      	bne.n	8002aae <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa4:	2d00      	cmp	r5, #0
 8002aa6:	d12c      	bne.n	8002b02 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0249      	lsls	r1, r1, #9
 8002aac:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aae:	20c2      	movs	r0, #194	; 0xc2
 8002ab0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ab2:	30ff      	adds	r0, #255	; 0xff
 8002ab4:	4281      	cmp	r1, r0
 8002ab6:	d002      	beq.n	8002abe <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ab8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002aba:	4301      	orrs	r1, r0
 8002abc:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002abe:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ac0:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ac2:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ac8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002aca:	4281      	cmp	r1, r0
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_Init+0xc4>
 8002ace:	1e48      	subs	r0, r1, #1
 8002ad0:	2806      	cmp	r0, #6
 8002ad2:	d807      	bhi.n	8002ae4 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ad4:	2507      	movs	r5, #7
 8002ad6:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ad8:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ada:	43a8      	bics	r0, r5
 8002adc:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ade:	6958      	ldr	r0, [r3, #20]
 8002ae0:	4301      	orrs	r1, r0
 8002ae2:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	491c      	ldr	r1, [pc, #112]	; (8002b58 <HAL_ADC_Init+0x148>)
 8002ae8:	400b      	ands	r3, r1
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d111      	bne.n	8002b12 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8002aee:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002af0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002af2:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8002af4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002af6:	4393      	bics	r3, r2
 8002af8:	001a      	movs	r2, r3
 8002afa:	2301      	movs	r3, #1
 8002afc:	4313      	orrs	r3, r2
 8002afe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b02:	2020      	movs	r0, #32
 8002b04:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002b06:	4328      	orrs	r0, r5
 8002b08:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b0c:	4301      	orrs	r1, r0
 8002b0e:	64a1      	str	r1, [r4, #72]	; 0x48
 8002b10:	e7cd      	b.n	8002aae <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8002b12:	2212      	movs	r2, #18
 8002b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b16:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002b18:	4393      	bics	r3, r2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002b24:	4303      	orrs	r3, r0
 8002b26:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b28:	e7ea      	b.n	8002b00 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002b2e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	4313      	orrs	r3, r2
 8002b32:	6463      	str	r3, [r4, #68]	; 0x44
 8002b34:	e7e4      	b.n	8002b00 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b36:	2118      	movs	r1, #24
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	68a1      	ldr	r1, [r4, #8]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	6862      	ldr	r2, [r4, #4]
 8002b46:	0089      	lsls	r1, r1, #2
 8002b48:	0889      	lsrs	r1, r1, #2
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	6119      	str	r1, [r3, #16]
 8002b4e:	e78a      	b.n	8002a66 <HAL_ADC_Init+0x56>
 8002b50:	fffffefd 	.word	0xfffffefd
 8002b54:	fffe0219 	.word	0xfffe0219
 8002b58:	833fffe7 	.word	0x833fffe7

08002b5c <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b5c:	6803      	ldr	r3, [r0, #0]
{
 8002b5e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b60:	689b      	ldr	r3, [r3, #8]
{
 8002b62:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8002b64:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b66:	075b      	lsls	r3, r3, #29
 8002b68:	d420      	bmi.n	8002bac <HAL_ADC_Start_IT+0x50>
    __HAL_LOCK(hadc);
 8002b6a:	0025      	movs	r5, r4
 8002b6c:	3540      	adds	r5, #64	; 0x40
 8002b6e:	782b      	ldrb	r3, [r5, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d01b      	beq.n	8002bac <HAL_ADC_Start_IT+0x50>
 8002b74:	2301      	movs	r3, #1
 8002b76:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b78:	69e3      	ldr	r3, [r4, #28]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d111      	bne.n	8002ba2 <HAL_ADC_Start_IT+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002b7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_ADC_Start_IT+0x70>)
      switch(hadc->Init.EOCSelection)
 8002b82:	6961      	ldr	r1, [r4, #20]
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	401a      	ands	r2, r3
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b90:	221c      	movs	r2, #28
      ADC_CLEAR_ERRORCODE(hadc);
 8002b92:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8002b94:	702b      	strb	r3, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8002b9a:	2908      	cmp	r1, #8
 8002b9c:	d007      	beq.n	8002bae <HAL_ADC_Start_IT+0x52>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	e00b      	b.n	8002bba <HAL_ADC_Start_IT+0x5e>
      tmp_hal_status = ADC_Enable(hadc);
 8002ba2:	0020      	movs	r0, r4
 8002ba4:	f7ff fee8 	bl	8002978 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d0e8      	beq.n	8002b7e <HAL_ADC_Start_IT+0x22>
}
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bae:	2104      	movs	r1, #4
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002bb6:	2218      	movs	r2, #24
 8002bb8:	6859      	ldr	r1, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e7f0      	b.n	8002bac <HAL_ADC_Start_IT+0x50>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	fffff0fe 	.word	0xfffff0fe

08002bd0 <HAL_ADC_LevelOutOfWindowCallback>:
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_ADC_ErrorCallback>:
}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	6803      	ldr	r3, [r0, #0]
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002bda:	6819      	ldr	r1, [r3, #0]
{
 8002bdc:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002bde:	4211      	tst	r1, r2
 8002be0:	d002      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x14>
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	4211      	tst	r1, r2
 8002be6:	d106      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002be8:	2208      	movs	r2, #8
 8002bea:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002bec:	4211      	tst	r1, r2
 8002bee:	d028      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	4211      	tst	r1, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002bf8:	06d2      	lsls	r2, r2, #27
 8002bfa:	d404      	bmi.n	8002c06 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	430a      	orrs	r2, r1
 8002c04:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c06:	22c0      	movs	r2, #192	; 0xc0
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	4211      	tst	r1, r2
 8002c0e:	d112      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x62>
 8002c10:	6a22      	ldr	r2, [r4, #32]
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d10f      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	0712      	lsls	r2, r2, #28
 8002c1a:	d50c      	bpl.n	8002c36 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	0752      	lsls	r2, r2, #29
 8002c20:	d43c      	bmi.n	8002c9c <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c22:	210c      	movs	r1, #12
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	438a      	bics	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <HAL_ADC_IRQHandler+0xdc>)
 8002c2e:	401a      	ands	r2, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	4313      	orrs	r3, r2
 8002c34:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8002c36:	0020      	movs	r0, r4
 8002c38:	f001 ff68 	bl	8004b0c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002c3c:	220c      	movs	r2, #12
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002c42:	2580      	movs	r5, #128	; 0x80
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	422a      	tst	r2, r5
 8002c4a:	d00c      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x92>
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	422b      	tst	r3, r5
 8002c50:	d009      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c5c:	0020      	movs	r0, r4
 8002c5e:	f7ff ffb7 	bl	8002bd0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002c66:	2210      	movs	r2, #16
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	4211      	tst	r1, r2
 8002c6e:	d014      	beq.n	8002c9a <HAL_ADC_IRQHandler+0xc6>
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	4211      	tst	r1, r2
 8002c74:	d011      	beq.n	8002c9a <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002c76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c78:	2a01      	cmp	r2, #1
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002c7c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002c7e:	07d2      	lsls	r2, r2, #31
 8002c80:	d508      	bpl.n	8002c94 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c82:	2202      	movs	r2, #2
 8002c84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8002c86:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002c90:	f7ff ff9f 	bl	8002bd2 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c94:	2210      	movs	r2, #16
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	64a3      	str	r3, [r4, #72]	; 0x48
 8002cac:	e7c3      	b.n	8002c36 <HAL_ADC_IRQHandler+0x62>
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	fffffefe 	.word	0xfffffefe

08002cb4 <HAL_ADC_ConfigChannel>:
{
 8002cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002cb6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8002cb8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002cba:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002cbc:	3440      	adds	r4, #64	; 0x40
 8002cbe:	7823      	ldrb	r3, [r4, #0]
{
 8002cc0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d02b      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x6c>
 8002cc8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cca:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ccc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cce:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8002cd0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd2:	0740      	lsls	r0, r0, #29
 8002cd4:	d452      	bmi.n	8002d7c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002cd6:	482c      	ldr	r0, [pc, #176]	; (8002d88 <HAL_ADC_ConfigChannel+0xd4>)
 8002cd8:	684f      	ldr	r7, [r1, #4]
 8002cda:	680d      	ldr	r5, [r1, #0]
 8002cdc:	4287      	cmp	r7, r0
 8002cde:	d03b      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ce0:	40ab      	lsls	r3, r5
 8002ce2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ce4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ce6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ce8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002cea:	4338      	orrs	r0, r7
 8002cec:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cee:	429e      	cmp	r6, r3
 8002cf0:	d00f      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x5e>
 8002cf2:	3e01      	subs	r6, #1
 8002cf4:	2e06      	cmp	r6, #6
 8002cf6:	d90c      	bls.n	8002d12 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002cf8:	688b      	ldr	r3, [r1, #8]
 8002cfa:	2107      	movs	r1, #7
 8002cfc:	6950      	ldr	r0, [r2, #20]
 8002cfe:	4008      	ands	r0, r1
 8002d00:	4283      	cmp	r3, r0
 8002d02:	d006      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d04:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d06:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d08:	4388      	bics	r0, r1
 8002d0a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d0c:	6950      	ldr	r0, [r2, #20]
 8002d0e:	4303      	orrs	r3, r0
 8002d10:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d12:	002b      	movs	r3, r5
 8002d14:	3b10      	subs	r3, #16
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d903      	bls.n	8002d22 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	7023      	strb	r3, [r4, #0]
}
 8002d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_ADC_ConfigChannel+0xd8>)
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	2d10      	cmp	r5, #16
 8002d2a:	d013      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0xa0>
 8002d2c:	03d2      	lsls	r2, r2, #15
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d32:	2d10      	cmp	r5, #16
 8002d34:	d1f1      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_ADC_ConfigChannel+0xdc>)
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_ADC_ConfigChannel+0xe0>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f7fd f9f8 	bl	8000130 <__udivsi3>
 8002d40:	230a      	movs	r3, #10
 8002d42:	4358      	muls	r0, r3
 8002d44:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0e6      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002d4c:	9b01      	ldr	r3, [sp, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	e7f8      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d54:	0412      	lsls	r2, r2, #16
 8002d56:	e7ea      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d58:	40ab      	lsls	r3, r5
 8002d5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d5c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d5e:	002b      	movs	r3, r5
 8002d60:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d62:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d8d8      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_ADC_ConfigChannel+0xd8>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2d10      	cmp	r5, #16
 8002d6e:	d003      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0xc4>
 8002d70:	4909      	ldr	r1, [pc, #36]	; (8002d98 <HAL_ADC_ConfigChannel+0xe4>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e7d0      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x66>
 8002d78:	4908      	ldr	r1, [pc, #32]	; (8002d9c <HAL_ADC_ConfigChannel+0xe8>)
 8002d7a:	e7fa      	b.n	8002d72 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002d80:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d82:	430a      	orrs	r2, r1
 8002d84:	646a      	str	r2, [r5, #68]	; 0x44
 8002d86:	e7c9      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x68>
 8002d88:	00001001 	.word	0x00001001
 8002d8c:	40012708 	.word	0x40012708
 8002d90:	20000000 	.word	0x20000000
 8002d94:	000f4240 	.word	0x000f4240
 8002d98:	ffbfffff 	.word	0xffbfffff
 8002d9c:	ff7fffff 	.word	0xff7fffff

08002da0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da2:	0006      	movs	r6, r0
 8002da4:	3640      	adds	r6, #64	; 0x40
 8002da6:	7833      	ldrb	r3, [r6, #0]
{
 8002da8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002daa:	2002      	movs	r0, #2
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d042      	beq.n	8002e36 <HAL_ADCEx_Calibration_Start+0x96>
 8002db0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002db2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8002db4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	2a01      	cmp	r2, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADCEx_Calibration_Start+0x2c>
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	4211      	tst	r1, r2
 8002dc4:	d138      	bne.n	8002e38 <HAL_ADCEx_Calibration_Start+0x98>
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	0412      	lsls	r2, r2, #16
 8002dca:	d435      	bmi.n	8002e38 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002dcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002dce:	491d      	ldr	r1, [pc, #116]	; (8002e44 <HAL_ADCEx_Calibration_Start+0xa4>)
 8002dd0:	4011      	ands	r1, r2
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dd6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8002dd8:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dda:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	438a      	bics	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	0612      	lsls	r2, r2, #24
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002dec:	f7ff fdbe 	bl	800296c <HAL_GetTick>
 8002df0:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	db0e      	blt.n	8002e18 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dfa:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002dfc:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dfe:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002e00:	430d      	orrs	r5, r1
 8002e02:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8002e08:	4393      	bics	r3, r2
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e12:	2300      	movs	r3, #0
 8002e14:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8002e16:	e00e      	b.n	8002e36 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e18:	f7ff fda8 	bl	800296c <HAL_GetTick>
 8002e1c:	1bc0      	subs	r0, r0, r7
 8002e1e:	2802      	cmp	r0, #2
 8002e20:	d9e7      	bls.n	8002df2 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8002e22:	2212      	movs	r2, #18
 8002e24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8002e28:	4393      	bics	r3, r2
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002e32:	2300      	movs	r3, #0
 8002e34:	7033      	strb	r3, [r6, #0]
}
 8002e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	2320      	movs	r3, #32
 8002e3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	6463      	str	r3, [r4, #68]	; 0x44
 8002e42:	e7e6      	b.n	8002e12 <HAL_ADCEx_Calibration_Start+0x72>
 8002e44:	fffffefd 	.word	0xfffffefd

08002e48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	da14      	bge.n	8002e7a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e50:	230f      	movs	r3, #15
 8002e52:	b2c0      	uxtb	r0, r0
 8002e54:	4003      	ands	r3, r0
 8002e56:	3b08      	subs	r3, #8
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_NVIC_SetPriority+0x58>)
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	2203      	movs	r2, #3
 8002e62:	4010      	ands	r0, r2
 8002e64:	4090      	lsls	r0, r2
 8002e66:	32fc      	adds	r2, #252	; 0xfc
 8002e68:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e6a:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e6e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e70:	69dc      	ldr	r4, [r3, #28]
 8002e72:	43ac      	bics	r4, r5
 8002e74:	4321      	orrs	r1, r4
 8002e76:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e7a:	2503      	movs	r5, #3
 8002e7c:	0883      	lsrs	r3, r0, #2
 8002e7e:	4028      	ands	r0, r5
 8002e80:	40a8      	lsls	r0, r5
 8002e82:	35fc      	adds	r5, #252	; 0xfc
 8002e84:	002e      	movs	r6, r5
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_NVIC_SetPriority+0x5c>)
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	22c0      	movs	r2, #192	; 0xc0
 8002e8e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e90:	4029      	ands	r1, r5
 8002e92:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	589c      	ldr	r4, [r3, r2]
 8002e98:	43b4      	bics	r4, r6
 8002e9a:	4321      	orrs	r1, r4
 8002e9c:	5099      	str	r1, [r3, r2]
 8002e9e:	e7eb      	b.n	8002e78 <HAL_NVIC_SetPriority+0x30>
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ea8:	231f      	movs	r3, #31
 8002eaa:	4018      	ands	r0, r3
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	4083      	lsls	r3, r0
 8002eb0:	4a01      	ldr	r2, [pc, #4]	; (8002eb8 <HAL_NVIC_EnableIRQ+0x10>)
 8002eb2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002eb4:	4770      	bx	lr
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_SYSTICK_Config+0x28>)
 8002ebe:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d80d      	bhi.n	8002ee2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ecc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ece:	6a03      	ldr	r3, [r0, #32]
 8002ed0:	0609      	lsls	r1, r1, #24
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eda:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002edc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ede:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ee2:	4770      	bx	lr
 8002ee4:	00ffffff 	.word	0x00ffffff
 8002ee8:	e000e010 	.word	0xe000e010
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
  if(NULL == hdma)
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	d028      	beq.n	8002f4c <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efa:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002efc:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efe:	1ca5      	adds	r5, r4, #2
 8002f00:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8002f02:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f06:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f08:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	68e1      	ldr	r1, [r4, #12]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6921      	ldr	r1, [r4, #16]
 8002f14:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	6961      	ldr	r1, [r4, #20]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	69a1      	ldr	r1, [r4, #24]
 8002f1c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	69e1      	ldr	r1, [r4, #28]
 8002f20:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002f22:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002f24:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_DMA_Init+0x64>)
 8002f28:	2114      	movs	r1, #20
 8002f2a:	18c0      	adds	r0, r0, r3
 8002f2c:	f7fd f900 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f32:	0080      	lsls	r0, r0, #2
 8002f34:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f36:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8002f38:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8002f3c:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002f3e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002f40:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002f42:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f44:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002f46:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002f48:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002f4a:	77e0      	strb	r0, [r4, #31]
}  
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	ffffc00f 	.word	0xffffc00f
 8002f54:	bffdfff8 	.word	0xbffdfff8
 8002f58:	40020000 	.word	0x40020000

08002f5c <HAL_DMA_Abort_IT>:
{  
 8002f5c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f5e:	1c84      	adds	r4, r0, #2
 8002f60:	7fe3      	ldrb	r3, [r4, #31]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d004      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f66:	2304      	movs	r3, #4
 8002f68:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002f6a:	3b03      	subs	r3, #3
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f70:	210e      	movs	r1, #14
 8002f72:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f74:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	438a      	bics	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	4391      	bics	r1, r2
 8002f82:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f84:	0011      	movs	r1, r2
 8002f86:	40a9      	lsls	r1, r5
 8002f88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f8a:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002f8e:	2400      	movs	r4, #0
 8002f90:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8002f92:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002f94:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002f98:	42a2      	cmp	r2, r4
 8002f9a:	d0e7      	beq.n	8002f6c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002f9c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	e7e4      	b.n	8002f6c <HAL_DMA_Abort_IT+0x10>

08002fa2 <HAL_DMA_IRQHandler>:
{
 8002fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fa4:	2704      	movs	r7, #4
 8002fa6:	003e      	movs	r6, r7
 8002fa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002faa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fac:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fae:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fb4:	422e      	tst	r6, r5
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x32>
 8002fb8:	423c      	tst	r4, r7
 8002fba:	d00b      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	0689      	lsls	r1, r1, #26
 8002fc0:	d402      	bmi.n	8002fc8 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	43b9      	bics	r1, r7
 8002fc6:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fca:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d019      	beq.n	8003004 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8002fd0:	4798      	blx	r3
}  
 8002fd2:	e017      	b.n	8003004 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fd4:	2702      	movs	r7, #2
 8002fd6:	003e      	movs	r6, r7
 8002fd8:	408e      	lsls	r6, r1
 8002fda:	422e      	tst	r6, r5
 8002fdc:	d013      	beq.n	8003006 <HAL_DMA_IRQHandler+0x64>
 8002fde:	423c      	tst	r4, r7
 8002fe0:	d011      	beq.n	8003006 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	0689      	lsls	r1, r1, #26
 8002fe6:	d406      	bmi.n	8002ff6 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fe8:	240a      	movs	r4, #10
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	43a1      	bics	r1, r4
 8002fee:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	19c3      	adds	r3, r0, r7
 8002ff4:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ff6:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	1c43      	adds	r3, r0, #1
 8002ffc:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002ffe:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8003000:	4293      	cmp	r3, r2
 8003002:	d1e5      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x2e>
}  
 8003004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003006:	2608      	movs	r6, #8
 8003008:	0037      	movs	r7, r6
 800300a:	408f      	lsls	r7, r1
 800300c:	423d      	tst	r5, r7
 800300e:	d0f9      	beq.n	8003004 <HAL_DMA_IRQHandler+0x62>
 8003010:	4234      	tst	r4, r6
 8003012:	d0f7      	beq.n	8003004 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003014:	250e      	movs	r5, #14
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	43ac      	bics	r4, r5
 800301a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800301c:	2301      	movs	r3, #1
 800301e:	001c      	movs	r4, r3
 8003020:	408c      	lsls	r4, r1
 8003022:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8003024:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003026:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003028:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 800302a:	2200      	movs	r2, #0
 800302c:	18c3      	adds	r3, r0, r3
 800302e:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8003030:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003032:	e7e5      	b.n	8003000 <HAL_DMA_IRQHandler+0x5e>

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003036:	680b      	ldr	r3, [r1, #0]
{ 
 8003038:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800303a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 800303c:	2300      	movs	r3, #0
{ 
 800303e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003040:	9a02      	ldr	r2, [sp, #8]
 8003042:	40da      	lsrs	r2, r3
 8003044:	d101      	bne.n	800304a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8003046:	b007      	add	sp, #28
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800304a:	2201      	movs	r2, #1
 800304c:	409a      	lsls	r2, r3
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	9903      	ldr	r1, [sp, #12]
 8003052:	9a02      	ldr	r2, [sp, #8]
 8003054:	400a      	ands	r2, r1
 8003056:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8003058:	d100      	bne.n	800305c <HAL_GPIO_Init+0x28>
 800305a:	e08c      	b.n	8003176 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800305c:	9a01      	ldr	r2, [sp, #4]
 800305e:	2110      	movs	r1, #16
 8003060:	6852      	ldr	r2, [r2, #4]
 8003062:	0016      	movs	r6, r2
 8003064:	438e      	bics	r6, r1
 8003066:	2e02      	cmp	r6, #2
 8003068:	d10e      	bne.n	8003088 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800306a:	2507      	movs	r5, #7
 800306c:	401d      	ands	r5, r3
 800306e:	00ad      	lsls	r5, r5, #2
 8003070:	3901      	subs	r1, #1
 8003072:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8003074:	08dc      	lsrs	r4, r3, #3
 8003076:	00a4      	lsls	r4, r4, #2
 8003078:	1904      	adds	r4, r0, r4
 800307a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800307c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800307e:	9901      	ldr	r1, [sp, #4]
 8003080:	6909      	ldr	r1, [r1, #16]
 8003082:	40a9      	lsls	r1, r5
 8003084:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003088:	2403      	movs	r4, #3
 800308a:	005f      	lsls	r7, r3, #1
 800308c:	40bc      	lsls	r4, r7
 800308e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8003090:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003092:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003094:	4025      	ands	r5, r4
 8003096:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	2503      	movs	r5, #3
 800309a:	4015      	ands	r5, r2
 800309c:	40bd      	lsls	r5, r7
 800309e:	4661      	mov	r1, ip
 80030a0:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80030a2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a4:	2e01      	cmp	r6, #1
 80030a6:	d80f      	bhi.n	80030c8 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030a8:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80030aa:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030ac:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ae:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030b0:	40bd      	lsls	r5, r7
 80030b2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80030b4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80030b6:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80030b8:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ba:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80030bc:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030be:	2101      	movs	r1, #1
 80030c0:	400d      	ands	r5, r1
 80030c2:	409d      	lsls	r5, r3
 80030c4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80030c6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80030c8:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80030ca:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030cc:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80030ce:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80030d0:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80030d2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80030d4:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80030d6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80030d8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80030da:	420a      	tst	r2, r1
 80030dc:	d04b      	beq.n	8003176 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2101      	movs	r1, #1
 80030e0:	4c26      	ldr	r4, [pc, #152]	; (800317c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80030e2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80030e6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	430d      	orrs	r5, r1
 80030ea:	61a5      	str	r5, [r4, #24]
 80030ec:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80030ee:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	400c      	ands	r4, r1
 80030f2:	9405      	str	r4, [sp, #20]
 80030f4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80030f6:	240f      	movs	r4, #15
 80030f8:	4921      	ldr	r1, [pc, #132]	; (8003180 <HAL_GPIO_Init+0x14c>)
 80030fa:	00ad      	lsls	r5, r5, #2
 80030fc:	00b6      	lsls	r6, r6, #2
 80030fe:	186d      	adds	r5, r5, r1
 8003100:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8003104:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003108:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310a:	2400      	movs	r4, #0
 800310c:	4288      	cmp	r0, r1
 800310e:	d00c      	beq.n	800312a <HAL_GPIO_Init+0xf6>
 8003110:	491c      	ldr	r1, [pc, #112]	; (8003184 <HAL_GPIO_Init+0x150>)
 8003112:	3401      	adds	r4, #1
 8003114:	4288      	cmp	r0, r1
 8003116:	d008      	beq.n	800312a <HAL_GPIO_Init+0xf6>
 8003118:	491b      	ldr	r1, [pc, #108]	; (8003188 <HAL_GPIO_Init+0x154>)
 800311a:	3401      	adds	r4, #1
 800311c:	4288      	cmp	r0, r1
 800311e:	d004      	beq.n	800312a <HAL_GPIO_Init+0xf6>
 8003120:	491a      	ldr	r1, [pc, #104]	; (800318c <HAL_GPIO_Init+0x158>)
 8003122:	3403      	adds	r4, #3
 8003124:	4288      	cmp	r0, r1
 8003126:	d100      	bne.n	800312a <HAL_GPIO_Init+0xf6>
 8003128:	3c02      	subs	r4, #2
 800312a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800312c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8003130:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8003132:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8003134:	4c16      	ldr	r4, [pc, #88]	; (8003190 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003136:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8003138:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800313a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313c:	03d1      	lsls	r1, r2, #15
 800313e:	d401      	bmi.n	8003144 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003140:	003e      	movs	r6, r7
 8003142:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003144:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8003146:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8003148:	9e00      	ldr	r6, [sp, #0]
 800314a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800314c:	0391      	lsls	r1, r2, #14
 800314e:	d401      	bmi.n	8003154 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003150:	003e      	movs	r6, r7
 8003152:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003154:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8003156:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8003158:	9e00      	ldr	r6, [sp, #0]
 800315a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800315c:	02d1      	lsls	r1, r2, #11
 800315e:	d401      	bmi.n	8003164 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003160:	003e      	movs	r6, r7
 8003162:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003164:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8003166:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8003168:	9f00      	ldr	r7, [sp, #0]
 800316a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316c:	0292      	lsls	r2, r2, #10
 800316e:	d401      	bmi.n	8003174 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003170:	402e      	ands	r6, r5
 8003172:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003174:	60e7      	str	r7, [r4, #12]
    position++;
 8003176:	3301      	adds	r3, #1
 8003178:	e762      	b.n	8003040 <HAL_GPIO_Init+0xc>
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	48000c00 	.word	0x48000c00
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8003198:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800319a:	2c00      	cmp	r4, #0
 800319c:	d03f      	beq.n	800321e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	0025      	movs	r5, r4
 80031a0:	3541      	adds	r5, #65	; 0x41
 80031a2:	782b      	ldrb	r3, [r5, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	0022      	movs	r2, r4
 80031ac:	3240      	adds	r2, #64	; 0x40
 80031ae:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031b0:	0020      	movs	r0, r4
 80031b2:	f001 fbd5 	bl	8004960 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b6:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ba:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80031bc:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68a6      	ldr	r6, [r4, #8]
 80031c4:	438a      	bics	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c8:	6861      	ldr	r1, [r4, #4]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_I2C_Init+0xa0>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_I2C_Init+0xa4>)
 80031d4:	4011      	ands	r1, r2
 80031d6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031d8:	2801      	cmp	r0, #1
 80031da:	d121      	bne.n	8003220 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031dc:	2180      	movs	r1, #128	; 0x80
 80031de:	0209      	lsls	r1, r1, #8
 80031e0:	4331      	orrs	r1, r6
 80031e2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031e4:	6858      	ldr	r0, [r3, #4]
 80031e6:	4915      	ldr	r1, [pc, #84]	; (800323c <HAL_I2C_Init+0xa8>)
 80031e8:	4301      	orrs	r1, r0
 80031ea:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ec:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ee:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031f0:	400a      	ands	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80031f4:	6961      	ldr	r1, [r4, #20]
 80031f6:	6922      	ldr	r2, [r4, #16]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	69a1      	ldr	r1, [r4, #24]
 80031fc:	0209      	lsls	r1, r1, #8
 80031fe:	430a      	orrs	r2, r1
 8003200:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003202:	6a21      	ldr	r1, [r4, #32]
 8003204:	69e2      	ldr	r2, [r4, #28]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800320a:	2201      	movs	r2, #1
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003216:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003218:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	3442      	adds	r4, #66	; 0x42
 800321c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800321e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003220:	2184      	movs	r1, #132	; 0x84
 8003222:	0209      	lsls	r1, r1, #8
 8003224:	4331      	orrs	r1, r6
 8003226:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003228:	2802      	cmp	r0, #2
 800322a:	d1db      	bne.n	80031e4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	0109      	lsls	r1, r1, #4
 8003230:	6059      	str	r1, [r3, #4]
 8003232:	e7d7      	b.n	80031e4 <HAL_I2C_Init+0x50>
 8003234:	f0ffffff 	.word	0xf0ffffff
 8003238:	ffff7fff 	.word	0xffff7fff
 800323c:	02008000 	.word	0x02008000

08003240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003240:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003242:	0004      	movs	r4, r0
 8003244:	3441      	adds	r4, #65	; 0x41
 8003246:	7822      	ldrb	r2, [r4, #0]
{
 8003248:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800324a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800324c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800324e:	2a20      	cmp	r2, #32
 8003250:	d118      	bne.n	8003284 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8003252:	001d      	movs	r5, r3
 8003254:	3540      	adds	r5, #64	; 0x40
 8003256:	782e      	ldrb	r6, [r5, #0]
 8003258:	2e01      	cmp	r6, #1
 800325a:	d013      	beq.n	8003284 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 800325c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800325e:	3022      	adds	r0, #34	; 0x22
 8003260:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003262:	681e      	ldr	r6, [r3, #0]
 8003264:	3823      	subs	r0, #35	; 0x23
 8003266:	4386      	bics	r6, r0
 8003268:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800326a:	681e      	ldr	r6, [r3, #0]
 800326c:	4f06      	ldr	r7, [pc, #24]	; (8003288 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800326e:	403e      	ands	r6, r7
 8003270:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003272:	681e      	ldr	r6, [r3, #0]
 8003274:	4331      	orrs	r1, r6
 8003276:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	4308      	orrs	r0, r1
 800327c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800327e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003282:	7028      	strb	r0, [r5, #0]
  }
}
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	ffffefff 	.word	0xffffefff

0800328c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328e:	0005      	movs	r5, r0
 8003290:	3541      	adds	r5, #65	; 0x41
 8003292:	782a      	ldrb	r2, [r5, #0]
{
 8003294:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003298:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	2a20      	cmp	r2, #32
 800329c:	d117      	bne.n	80032ce <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800329e:	001c      	movs	r4, r3
 80032a0:	3440      	adds	r4, #64	; 0x40
 80032a2:	7826      	ldrb	r6, [r4, #0]
 80032a4:	2e01      	cmp	r6, #1
 80032a6:	d012      	beq.n	80032ce <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80032a8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	3022      	adds	r0, #34	; 0x22
 80032ac:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80032ae:	681e      	ldr	r6, [r3, #0]
 80032b0:	3823      	subs	r0, #35	; 0x23
 80032b2:	4386      	bics	r6, r0
 80032b4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80032b6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80032b8:	4f05      	ldr	r7, [pc, #20]	; (80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80032ba:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80032bc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80032be:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80032c0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	4308      	orrs	r0, r1
 80032c6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80032c8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80032cc:	7020      	strb	r0, [r4, #0]
  }
}
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	fffff0ff 	.word	0xfffff0ff

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	6803      	ldr	r3, [r0, #0]
{
 80032d8:	b085      	sub	sp, #20
 80032da:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032dc:	07db      	lsls	r3, r3, #31
 80032de:	d42f      	bmi.n	8003340 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	079b      	lsls	r3, r3, #30
 80032e4:	d500      	bpl.n	80032e8 <HAL_RCC_OscConfig+0x14>
 80032e6:	e081      	b.n	80033ec <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	071b      	lsls	r3, r3, #28
 80032ec:	d500      	bpl.n	80032f0 <HAL_RCC_OscConfig+0x1c>
 80032ee:	e0bc      	b.n	800346a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	075b      	lsls	r3, r3, #29
 80032f4:	d500      	bpl.n	80032f8 <HAL_RCC_OscConfig+0x24>
 80032f6:	e0df      	b.n	80034b8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	06db      	lsls	r3, r3, #27
 80032fc:	d51a      	bpl.n	8003334 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80032fe:	696a      	ldr	r2, [r5, #20]
 8003300:	4cb5      	ldr	r4, [pc, #724]	; (80035d8 <HAL_RCC_OscConfig+0x304>)
 8003302:	2304      	movs	r3, #4
 8003304:	2a01      	cmp	r2, #1
 8003306:	d000      	beq.n	800330a <HAL_RCC_OscConfig+0x36>
 8003308:	e14b      	b.n	80035a2 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800330a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800330c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800330e:	430b      	orrs	r3, r1
 8003310:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003314:	431a      	orrs	r2, r3
 8003316:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003318:	f7ff fb28 	bl	800296c <HAL_GetTick>
 800331c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800331e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003320:	4233      	tst	r3, r6
 8003322:	d100      	bne.n	8003326 <HAL_RCC_OscConfig+0x52>
 8003324:	e136      	b.n	8003594 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003326:	21f8      	movs	r1, #248	; 0xf8
 8003328:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800332a:	69ab      	ldr	r3, [r5, #24]
 800332c:	438a      	bics	r2, r1
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4313      	orrs	r3, r2
 8003332:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003334:	6a29      	ldr	r1, [r5, #32]
 8003336:	2900      	cmp	r1, #0
 8003338:	d000      	beq.n	800333c <HAL_RCC_OscConfig+0x68>
 800333a:	e159      	b.n	80035f0 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800333c:	2000      	movs	r0, #0
 800333e:	e013      	b.n	8003368 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003340:	210c      	movs	r1, #12
 8003342:	4ca5      	ldr	r4, [pc, #660]	; (80035d8 <HAL_RCC_OscConfig+0x304>)
 8003344:	6862      	ldr	r2, [r4, #4]
 8003346:	400a      	ands	r2, r1
 8003348:	2a04      	cmp	r2, #4
 800334a:	d006      	beq.n	800335a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800334c:	6863      	ldr	r3, [r4, #4]
 800334e:	400b      	ands	r3, r1
 8003350:	2b08      	cmp	r3, #8
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x98>
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	03db      	lsls	r3, r3, #15
 8003358:	d508      	bpl.n	800336c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	039b      	lsls	r3, r3, #14
 800335e:	d5bf      	bpl.n	80032e0 <HAL_RCC_OscConfig+0xc>
 8003360:	686b      	ldr	r3, [r5, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1bc      	bne.n	80032e0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
}
 8003368:	b005      	add	sp, #20
 800336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	686b      	ldr	r3, [r5, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d113      	bne.n	800339a <HAL_RCC_OscConfig+0xc6>
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	025b      	lsls	r3, r3, #9
 8003378:	4313      	orrs	r3, r2
 800337a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800337c:	f7ff faf6 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003380:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003382:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003384:	02b6      	lsls	r6, r6, #10
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	4233      	tst	r3, r6
 800338a:	d1a9      	bne.n	80032e0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800338c:	f7ff faee 	bl	800296c <HAL_GetTick>
 8003390:	1bc0      	subs	r0, r0, r7
 8003392:	2864      	cmp	r0, #100	; 0x64
 8003394:	d9f7      	bls.n	8003386 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8003396:	2003      	movs	r0, #3
 8003398:	e7e6      	b.n	8003368 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0xf8>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	4a8e      	ldr	r2, [pc, #568]	; (80035dc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	4013      	ands	r3, r2
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	4a8d      	ldr	r2, [pc, #564]	; (80035e0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ac:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	4013      	ands	r3, r2
 80033b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80033b2:	f7ff fadb 	bl	800296c <HAL_GetTick>
 80033b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	4233      	tst	r3, r6
 80033bc:	d100      	bne.n	80033c0 <HAL_RCC_OscConfig+0xec>
 80033be:	e78f      	b.n	80032e0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7ff fad4 	bl	800296c <HAL_GetTick>
 80033c4:	1bc0      	subs	r0, r0, r7
 80033c6:	2864      	cmp	r0, #100	; 0x64
 80033c8:	d9f6      	bls.n	80033b8 <HAL_RCC_OscConfig+0xe4>
 80033ca:	e7e4      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x108>
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	02db      	lsls	r3, r3, #11
 80033d6:	4313      	orrs	r3, r2
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	e7ca      	b.n	8003372 <HAL_RCC_OscConfig+0x9e>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	4a7f      	ldr	r2, [pc, #508]	; (80035dc <HAL_RCC_OscConfig+0x308>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	4a7e      	ldr	r2, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x30c>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	e7c6      	b.n	800337a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033ec:	220c      	movs	r2, #12
 80033ee:	4c7a      	ldr	r4, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x304>)
 80033f0:	6863      	ldr	r3, [r4, #4]
 80033f2:	4213      	tst	r3, r2
 80033f4:	d006      	beq.n	8003404 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d110      	bne.n	8003420 <HAL_RCC_OscConfig+0x14c>
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	03db      	lsls	r3, r3, #15
 8003402:	d40d      	bmi.n	8003420 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	079b      	lsls	r3, r3, #30
 8003408:	d502      	bpl.n	8003410 <HAL_RCC_OscConfig+0x13c>
 800340a:	68eb      	ldr	r3, [r5, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d1aa      	bne.n	8003366 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	21f8      	movs	r1, #248	; 0xf8
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	692b      	ldr	r3, [r5, #16]
 8003416:	438a      	bics	r2, r1
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4313      	orrs	r3, r2
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	e763      	b.n	80032e8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003420:	68ea      	ldr	r2, [r5, #12]
 8003422:	2301      	movs	r3, #1
 8003424:	2a00      	cmp	r2, #0
 8003426:	d00f      	beq.n	8003448 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8003428:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800342c:	4313      	orrs	r3, r2
 800342e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003430:	f7ff fa9c 	bl	800296c <HAL_GetTick>
 8003434:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	4233      	tst	r3, r6
 800343a:	d1e9      	bne.n	8003410 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343c:	f7ff fa96 	bl	800296c <HAL_GetTick>
 8003440:	1bc0      	subs	r0, r0, r7
 8003442:	2802      	cmp	r0, #2
 8003444:	d9f7      	bls.n	8003436 <HAL_RCC_OscConfig+0x162>
 8003446:	e7a6      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8003448:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800344c:	439a      	bics	r2, r3
 800344e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8003450:	f7ff fa8c 	bl	800296c <HAL_GetTick>
 8003454:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	4233      	tst	r3, r6
 800345a:	d100      	bne.n	800345e <HAL_RCC_OscConfig+0x18a>
 800345c:	e744      	b.n	80032e8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345e:	f7ff fa85 	bl	800296c <HAL_GetTick>
 8003462:	1bc0      	subs	r0, r0, r7
 8003464:	2802      	cmp	r0, #2
 8003466:	d9f6      	bls.n	8003456 <HAL_RCC_OscConfig+0x182>
 8003468:	e795      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	69ea      	ldr	r2, [r5, #28]
 800346c:	2301      	movs	r3, #1
 800346e:	4c5a      	ldr	r4, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x304>)
 8003470:	2a00      	cmp	r2, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8003474:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8003478:	4313      	orrs	r3, r2
 800347a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800347c:	f7ff fa76 	bl	800296c <HAL_GetTick>
 8003480:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003484:	4233      	tst	r3, r6
 8003486:	d000      	beq.n	800348a <HAL_RCC_OscConfig+0x1b6>
 8003488:	e732      	b.n	80032f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7ff fa6f 	bl	800296c <HAL_GetTick>
 800348e:	1bc0      	subs	r0, r0, r7
 8003490:	2802      	cmp	r0, #2
 8003492:	d9f6      	bls.n	8003482 <HAL_RCC_OscConfig+0x1ae>
 8003494:	e77f      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8003496:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800349a:	439a      	bics	r2, r3
 800349c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800349e:	f7ff fa65 	bl	800296c <HAL_GetTick>
 80034a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a6:	4233      	tst	r3, r6
 80034a8:	d100      	bne.n	80034ac <HAL_RCC_OscConfig+0x1d8>
 80034aa:	e721      	b.n	80032f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7ff fa5e 	bl	800296c <HAL_GetTick>
 80034b0:	1bc0      	subs	r0, r0, r7
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d9f6      	bls.n	80034a4 <HAL_RCC_OscConfig+0x1d0>
 80034b6:	e76e      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80034ba:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034bc:	4c46      	ldr	r4, [pc, #280]	; (80035d8 <HAL_RCC_OscConfig+0x304>)
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c4:	4213      	tst	r3, r2
 80034c6:	d108      	bne.n	80034da <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	69e3      	ldr	r3, [r4, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61e3      	str	r3, [r4, #28]
 80034ce:	69e3      	ldr	r3, [r4, #28]
 80034d0:	4013      	ands	r3, r2
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	2780      	movs	r7, #128	; 0x80
 80034dc:	4e41      	ldr	r6, [pc, #260]	; (80035e4 <HAL_RCC_OscConfig+0x310>)
 80034de:	007f      	lsls	r7, r7, #1
 80034e0:	6833      	ldr	r3, [r6, #0]
 80034e2:	423b      	tst	r3, r7
 80034e4:	d006      	beq.n	80034f4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	68ab      	ldr	r3, [r5, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d113      	bne.n	8003514 <HAL_RCC_OscConfig+0x240>
 80034ec:	6a22      	ldr	r2, [r4, #32]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	6223      	str	r3, [r4, #32]
 80034f2:	e030      	b.n	8003556 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f4:	6833      	ldr	r3, [r6, #0]
 80034f6:	433b      	orrs	r3, r7
 80034f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80034fa:	f7ff fa37 	bl	800296c <HAL_GetTick>
 80034fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	6833      	ldr	r3, [r6, #0]
 8003502:	423b      	tst	r3, r7
 8003504:	d1ef      	bne.n	80034e6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7ff fa31 	bl	800296c <HAL_GetTick>
 800350a:	9b01      	ldr	r3, [sp, #4]
 800350c:	1ac0      	subs	r0, r0, r3
 800350e:	2864      	cmp	r0, #100	; 0x64
 8003510:	d9f6      	bls.n	8003500 <HAL_RCC_OscConfig+0x22c>
 8003512:	e740      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
 8003514:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003516:	2b00      	cmp	r3, #0
 8003518:	d114      	bne.n	8003544 <HAL_RCC_OscConfig+0x270>
 800351a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351e:	4393      	bics	r3, r2
 8003520:	6223      	str	r3, [r4, #32]
 8003522:	6a23      	ldr	r3, [r4, #32]
 8003524:	3203      	adds	r2, #3
 8003526:	4393      	bics	r3, r2
 8003528:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800352a:	f7ff fa1f 	bl	800296c <HAL_GetTick>
 800352e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	6a23      	ldr	r3, [r4, #32]
 8003532:	423b      	tst	r3, r7
 8003534:	d025      	beq.n	8003582 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7ff fa19 	bl	800296c <HAL_GetTick>
 800353a:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x314>)
 800353c:	1b80      	subs	r0, r0, r6
 800353e:	4298      	cmp	r0, r3
 8003540:	d9f6      	bls.n	8003530 <HAL_RCC_OscConfig+0x25c>
 8003542:	e728      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003544:	2b05      	cmp	r3, #5
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x28c>
 8003548:	6a21      	ldr	r1, [r4, #32]
 800354a:	3b01      	subs	r3, #1
 800354c:	430b      	orrs	r3, r1
 800354e:	6223      	str	r3, [r4, #32]
 8003550:	6a23      	ldr	r3, [r4, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8003556:	f7ff fa09 	bl	800296c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800355c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00d      	b.n	800357c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	6a23      	ldr	r3, [r4, #32]
 8003562:	4393      	bics	r3, r2
 8003564:	2204      	movs	r2, #4
 8003566:	6223      	str	r3, [r4, #32]
 8003568:	6a23      	ldr	r3, [r4, #32]
 800356a:	4393      	bics	r3, r2
 800356c:	e7c0      	b.n	80034f0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7ff f9fd 	bl	800296c <HAL_GetTick>
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_OscConfig+0x314>)
 8003574:	1b80      	subs	r0, r0, r6
 8003576:	4298      	cmp	r0, r3
 8003578:	d900      	bls.n	800357c <HAL_RCC_OscConfig+0x2a8>
 800357a:	e70c      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	6a23      	ldr	r3, [r4, #32]
 800357e:	423b      	tst	r3, r7
 8003580:	d0f5      	beq.n	800356e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8003582:	9b00      	ldr	r3, [sp, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d000      	beq.n	800358a <HAL_RCC_OscConfig+0x2b6>
 8003588:	e6b6      	b.n	80032f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	69e3      	ldr	r3, [r4, #28]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_RCC_OscConfig+0x318>)
 800358e:	4013      	ands	r3, r2
 8003590:	61e3      	str	r3, [r4, #28]
 8003592:	e6b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003594:	f7ff f9ea 	bl	800296c <HAL_GetTick>
 8003598:	1bc0      	subs	r0, r0, r7
 800359a:	2802      	cmp	r0, #2
 800359c:	d800      	bhi.n	80035a0 <HAL_RCC_OscConfig+0x2cc>
 800359e:	e6be      	b.n	800331e <HAL_RCC_OscConfig+0x4a>
 80035a0:	e6f9      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035a2:	3205      	adds	r2, #5
 80035a4:	d103      	bne.n	80035ae <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80035a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80035a8:	439a      	bics	r2, r3
 80035aa:	6362      	str	r2, [r4, #52]	; 0x34
 80035ac:	e6bb      	b.n	8003326 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80035ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035b0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80035b2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80035b4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80035b6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80035b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ba:	4393      	bics	r3, r2
 80035bc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80035be:	f7ff f9d5 	bl	800296c <HAL_GetTick>
 80035c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035c6:	4233      	tst	r3, r6
 80035c8:	d100      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f8>
 80035ca:	e6b3      	b.n	8003334 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035cc:	f7ff f9ce 	bl	800296c <HAL_GetTick>
 80035d0:	1bc0      	subs	r0, r0, r7
 80035d2:	2802      	cmp	r0, #2
 80035d4:	d9f6      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
 80035d6:	e6de      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	fffeffff 	.word	0xfffeffff
 80035e0:	fffbffff 	.word	0xfffbffff
 80035e4:	40007000 	.word	0x40007000
 80035e8:	00001388 	.word	0x00001388
 80035ec:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	220c      	movs	r2, #12
 80035f2:	4c26      	ldr	r4, [pc, #152]	; (800368c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d100      	bne.n	8003600 <HAL_RCC_OscConfig+0x32c>
 80035fe:	e6b3      	b.n	8003368 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_RCC_OscConfig+0x3bc>)
 8003604:	4013      	ands	r3, r2
 8003606:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003608:	2902      	cmp	r1, #2
 800360a:	d12f      	bne.n	800366c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 800360c:	f7ff f9ae 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003612:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003614:	04b6      	lsls	r6, r6, #18
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	4233      	tst	r3, r6
 800361a:	d121      	bne.n	8003660 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361c:	220f      	movs	r2, #15
 800361e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003620:	4393      	bics	r3, r2
 8003622:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003624:	4313      	orrs	r3, r2
 8003626:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003628:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800362a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800362c:	6862      	ldr	r2, [r4, #4]
 800362e:	430b      	orrs	r3, r1
 8003630:	4918      	ldr	r1, [pc, #96]	; (8003694 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003632:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003634:	400a      	ands	r2, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	045b      	lsls	r3, r3, #17
 8003640:	4313      	orrs	r3, r2
 8003642:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003644:	f7ff f992 	bl	800296c <HAL_GetTick>
 8003648:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800364a:	04ad      	lsls	r5, r5, #18
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	422b      	tst	r3, r5
 8003650:	d000      	beq.n	8003654 <HAL_RCC_OscConfig+0x380>
 8003652:	e673      	b.n	800333c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7ff f98a 	bl	800296c <HAL_GetTick>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	2802      	cmp	r0, #2
 800365c:	d9f6      	bls.n	800364c <HAL_RCC_OscConfig+0x378>
 800365e:	e69a      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7ff f984 	bl	800296c <HAL_GetTick>
 8003664:	1bc0      	subs	r0, r0, r7
 8003666:	2802      	cmp	r0, #2
 8003668:	d9d5      	bls.n	8003616 <HAL_RCC_OscConfig+0x342>
 800366a:	e694      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800366c:	f7ff f97e 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003670:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003672:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	04ad      	lsls	r5, r5, #18
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	422b      	tst	r3, r5
 800367a:	d100      	bne.n	800367e <HAL_RCC_OscConfig+0x3aa>
 800367c:	e65e      	b.n	800333c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367e:	f7ff f975 	bl	800296c <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2802      	cmp	r0, #2
 8003686:	d9f6      	bls.n	8003676 <HAL_RCC_OscConfig+0x3a2>
 8003688:	e685      	b.n	8003396 <HAL_RCC_OscConfig+0xc2>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	40021000 	.word	0x40021000
 8003690:	feffffff 	.word	0xfeffffff
 8003694:	ffc2ffff 	.word	0xffc2ffff

08003698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800369a:	4c14      	ldr	r4, [pc, #80]	; (80036ec <HAL_RCC_GetSysClockFreq+0x54>)
{
 800369c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800369e:	2210      	movs	r2, #16
 80036a0:	0021      	movs	r1, r4
 80036a2:	4668      	mov	r0, sp
 80036a4:	f001 fd78 	bl	8005198 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036a8:	0021      	movs	r1, r4
 80036aa:	ad04      	add	r5, sp, #16
 80036ac:	2210      	movs	r2, #16
 80036ae:	3110      	adds	r1, #16
 80036b0:	0028      	movs	r0, r5
 80036b2:	f001 fd71 	bl	8005198 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80036b8:	4e0d      	ldr	r6, [pc, #52]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x58>)
 80036ba:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036bc:	401a      	ands	r2, r3
 80036be:	2a08      	cmp	r2, #8
 80036c0:	d111      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036c2:	200f      	movs	r0, #15
 80036c4:	466a      	mov	r2, sp
 80036c6:	0c99      	lsrs	r1, r3, #18
 80036c8:	4001      	ands	r1, r0
 80036ca:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036cc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80036ce:	4002      	ands	r2, r0
 80036d0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036d2:	03db      	lsls	r3, r3, #15
 80036d4:	d505      	bpl.n	80036e2 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80036d6:	4807      	ldr	r0, [pc, #28]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80036d8:	f7fc fd2a 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80036dc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036de:	b008      	add	sp, #32
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80036e2:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80036e4:	e7fa      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80036e6:	4803      	ldr	r0, [pc, #12]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80036e8:	e7f9      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x46>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	080051d4 	.word	0x080051d4
 80036f0:	40021000 	.word	0x40021000
 80036f4:	007a1200 	.word	0x007a1200
 80036f8:	003d0900 	.word	0x003d0900

080036fc <HAL_RCC_ClockConfig>:
{
 80036fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80036fe:	2201      	movs	r2, #1
 8003700:	4c43      	ldr	r4, [pc, #268]	; (8003810 <HAL_RCC_ClockConfig+0x114>)
{
 8003702:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003704:	6823      	ldr	r3, [r4, #0]
{
 8003706:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003708:	4013      	ands	r3, r2
 800370a:	428b      	cmp	r3, r1
 800370c:	d31c      	bcc.n	8003748 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370e:	6832      	ldr	r2, [r6, #0]
 8003710:	0793      	lsls	r3, r2, #30
 8003712:	d423      	bmi.n	800375c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003714:	07d3      	lsls	r3, r2, #31
 8003716:	d429      	bmi.n	800376c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003718:	2301      	movs	r3, #1
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	401a      	ands	r2, r3
 800371e:	4297      	cmp	r7, r2
 8003720:	d367      	bcc.n	80037f2 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	4c3b      	ldr	r4, [pc, #236]	; (8003814 <HAL_RCC_ClockConfig+0x118>)
 8003726:	075b      	lsls	r3, r3, #29
 8003728:	d46a      	bmi.n	8003800 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800372a:	f7ff ffb5 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800372e:	6863      	ldr	r3, [r4, #4]
 8003730:	4a39      	ldr	r2, [pc, #228]	; (8003818 <HAL_RCC_ClockConfig+0x11c>)
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	0f1b      	lsrs	r3, r3, #28
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	40d8      	lsrs	r0, r3
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_RCC_ClockConfig+0x120>)
 800373c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800373e:	2000      	movs	r0, #0
 8003740:	f7ff f8ea 	bl	8002918 <HAL_InitTick>
  return HAL_OK;
 8003744:	2000      	movs	r0, #0
 8003746:	e008      	b.n	800375a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	4393      	bics	r3, r2
 800374c:	430b      	orrs	r3, r1
 800374e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	4013      	ands	r3, r2
 8003754:	4299      	cmp	r1, r3
 8003756:	d0da      	beq.n	800370e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8003758:	2001      	movs	r0, #1
}
 800375a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	20f0      	movs	r0, #240	; 0xf0
 800375e:	492d      	ldr	r1, [pc, #180]	; (8003814 <HAL_RCC_ClockConfig+0x118>)
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	4383      	bics	r3, r0
 8003764:	68b0      	ldr	r0, [r6, #8]
 8003766:	4303      	orrs	r3, r0
 8003768:	604b      	str	r3, [r1, #4]
 800376a:	e7d3      	b.n	8003714 <HAL_RCC_ClockConfig+0x18>
 800376c:	4d29      	ldr	r5, [pc, #164]	; (8003814 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003770:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	2a01      	cmp	r2, #1
 8003774:	d11a      	bne.n	80037ac <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	039b      	lsls	r3, r3, #14
 8003778:	d5ee      	bpl.n	8003758 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	2103      	movs	r1, #3
 800377c:	686b      	ldr	r3, [r5, #4]
 800377e:	438b      	bics	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003784:	f7ff f8f2 	bl	800296c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800378a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	2b01      	cmp	r3, #1
 800378e:	d115      	bne.n	80037bc <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	220c      	movs	r2, #12
 8003792:	686b      	ldr	r3, [r5, #4]
 8003794:	4013      	ands	r3, r2
 8003796:	2b04      	cmp	r3, #4
 8003798:	d0be      	beq.n	8003718 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379a:	f7ff f8e7 	bl	800296c <HAL_GetTick>
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_RCC_ClockConfig+0x124>)
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d9f3      	bls.n	8003790 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80037a8:	2003      	movs	r0, #3
 80037aa:	e7d6      	b.n	800375a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ac:	2a02      	cmp	r2, #2
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	d4e2      	bmi.n	800377a <HAL_RCC_ClockConfig+0x7e>
 80037b4:	e7d0      	b.n	8003758 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	079b      	lsls	r3, r3, #30
 80037b8:	d4df      	bmi.n	800377a <HAL_RCC_ClockConfig+0x7e>
 80037ba:	e7cd      	b.n	8003758 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d012      	beq.n	80037e6 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c0:	220c      	movs	r2, #12
 80037c2:	686b      	ldr	r3, [r5, #4]
 80037c4:	4213      	tst	r3, r2
 80037c6:	d0a7      	beq.n	8003718 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7ff f8d0 	bl	800296c <HAL_GetTick>
 80037cc:	9b01      	ldr	r3, [sp, #4]
 80037ce:	1ac0      	subs	r0, r0, r3
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_ClockConfig+0x124>)
 80037d2:	4298      	cmp	r0, r3
 80037d4:	d9f4      	bls.n	80037c0 <HAL_RCC_ClockConfig+0xc4>
 80037d6:	e7e7      	b.n	80037a8 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7ff f8c8 	bl	800296c <HAL_GetTick>
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	1ac0      	subs	r0, r0, r3
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_ClockConfig+0x124>)
 80037e2:	4298      	cmp	r0, r3
 80037e4:	d8e0      	bhi.n	80037a8 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e6:	220c      	movs	r2, #12
 80037e8:	686b      	ldr	r3, [r5, #4]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d1f3      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xdc>
 80037f0:	e792      	b.n	8003718 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	439a      	bics	r2, r3
 80037f6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	421a      	tst	r2, r3
 80037fc:	d1ac      	bne.n	8003758 <HAL_RCC_ClockConfig+0x5c>
 80037fe:	e790      	b.n	8003722 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	6863      	ldr	r3, [r4, #4]
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_RCC_ClockConfig+0x128>)
 8003804:	4013      	ands	r3, r2
 8003806:	68f2      	ldr	r2, [r6, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	6063      	str	r3, [r4, #4]
 800380c:	e78d      	b.n	800372a <HAL_RCC_ClockConfig+0x2e>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40022000 	.word	0x40022000
 8003814:	40021000 	.word	0x40021000
 8003818:	080052b8 	.word	0x080052b8
 800381c:	20000000 	.word	0x20000000
 8003820:	00001388 	.word	0x00001388
 8003824:	fffff8ff 	.word	0xfffff8ff

08003828 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCC_GetHCLKFreq+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
}
 800382c:	4770      	bx	lr
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	055b      	lsls	r3, r3, #21
 800383c:	0f5b      	lsrs	r3, r3, #29
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	4a03      	ldr	r2, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003842:	6810      	ldr	r0, [r2, #0]
 8003844:	40d8      	lsrs	r0, r3
}    
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	080052c8 	.word	0x080052c8
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003856:	6803      	ldr	r3, [r0, #0]
{
 8003858:	b085      	sub	sp, #20
 800385a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800385c:	03db      	lsls	r3, r3, #15
 800385e:	d528      	bpl.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003860:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4c37      	ldr	r4, [pc, #220]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003866:	0552      	lsls	r2, r2, #21
 8003868:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800386a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386c:	4213      	tst	r3, r2
 800386e:	d108      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	69e3      	ldr	r3, [r4, #28]
 8003872:	4313      	orrs	r3, r2
 8003874:	61e3      	str	r3, [r4, #28]
 8003876:	69e3      	ldr	r3, [r4, #28]
 8003878:	4013      	ands	r3, r2
 800387a:	9303      	str	r3, [sp, #12]
 800387c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	2780      	movs	r7, #128	; 0x80
 8003884:	4e30      	ldr	r6, [pc, #192]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003886:	007f      	lsls	r7, r7, #1
 8003888:	6833      	ldr	r3, [r6, #0]
 800388a:	423b      	tst	r3, r7
 800388c:	d026      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800388e:	22c0      	movs	r2, #192	; 0xc0
 8003890:	6a23      	ldr	r3, [r4, #32]
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	4e2d      	ldr	r6, [pc, #180]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003898:	d132      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389a:	6a23      	ldr	r3, [r4, #32]
 800389c:	401e      	ands	r6, r3
 800389e:	686b      	ldr	r3, [r5, #4]
 80038a0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038a2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d103      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	69e3      	ldr	r3, [r4, #28]
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b2:	682a      	ldr	r2, [r5, #0]
 80038b4:	07d3      	lsls	r3, r2, #31
 80038b6:	d506      	bpl.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b8:	2003      	movs	r0, #3
 80038ba:	4922      	ldr	r1, [pc, #136]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80038bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80038be:	4383      	bics	r3, r0
 80038c0:	68a8      	ldr	r0, [r5, #8]
 80038c2:	4303      	orrs	r3, r0
 80038c4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038c6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c8:	0693      	lsls	r3, r2, #26
 80038ca:	d517      	bpl.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038cc:	2110      	movs	r1, #16
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80038d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80038d2:	438b      	bics	r3, r1
 80038d4:	68e9      	ldr	r1, [r5, #12]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	e00f      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	433b      	orrs	r3, r7
 80038e0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80038e2:	f7ff f843 	bl	800296c <HAL_GetTick>
 80038e6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	6833      	ldr	r3, [r6, #0]
 80038ea:	423b      	tst	r3, r7
 80038ec:	d1cf      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7ff f83d 	bl	800296c <HAL_GetTick>
 80038f2:	9b01      	ldr	r3, [sp, #4]
 80038f4:	1ac0      	subs	r0, r0, r3
 80038f6:	2864      	cmp	r0, #100	; 0x64
 80038f8:	d9f6      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 80038fa:	2003      	movs	r0, #3
}
 80038fc:	b005      	add	sp, #20
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003900:	6869      	ldr	r1, [r5, #4]
 8003902:	400a      	ands	r2, r1
 8003904:	4293      	cmp	r3, r2
 8003906:	d0c8      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003908:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800390c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	4303      	orrs	r3, r0
 8003914:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003916:	6a23      	ldr	r3, [r4, #32]
 8003918:	480e      	ldr	r0, [pc, #56]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391c:	4003      	ands	r3, r0
 800391e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003920:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003922:	07d3      	lsls	r3, r2, #31
 8003924:	d5b9      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8003926:	f7ff f821 	bl	800296c <HAL_GetTick>
 800392a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	2202      	movs	r2, #2
 800392e:	6a23      	ldr	r3, [r4, #32]
 8003930:	4213      	tst	r3, r2
 8003932:	d1b2      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7ff f81a 	bl	800296c <HAL_GetTick>
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800393a:	1bc0      	subs	r0, r0, r7
 800393c:	4298      	cmp	r0, r3
 800393e:	d9f5      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003940:	e7db      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	fffffcff 	.word	0xfffffcff
 8003950:	efffffff 	.word	0xefffffff
 8003954:	fffeffff 	.word	0xfffeffff
 8003958:	00001388 	.word	0x00001388

0800395c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395c:	2201      	movs	r2, #1
 800395e:	6a03      	ldr	r3, [r0, #32]
{
 8003960:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	4393      	bics	r3, r2
 8003964:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800396c:	3272      	adds	r2, #114	; 0x72
 800396e:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003970:	680a      	ldr	r2, [r1, #0]
 8003972:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003974:	2202      	movs	r2, #2
 8003976:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003978:	688a      	ldr	r2, [r1, #8]
 800397a:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <TIM_OC1_SetConfig+0x74>)
 800397e:	4290      	cmp	r0, r2
 8003980:	d008      	beq.n	8003994 <TIM_OC1_SetConfig+0x38>
 8003982:	4e14      	ldr	r6, [pc, #80]	; (80039d4 <TIM_OC1_SetConfig+0x78>)
 8003984:	42b0      	cmp	r0, r6
 8003986:	d005      	beq.n	8003994 <TIM_OC1_SetConfig+0x38>
 8003988:	4e13      	ldr	r6, [pc, #76]	; (80039d8 <TIM_OC1_SetConfig+0x7c>)
 800398a:	42b0      	cmp	r0, r6
 800398c:	d002      	beq.n	8003994 <TIM_OC1_SetConfig+0x38>
 800398e:	4e13      	ldr	r6, [pc, #76]	; (80039dc <TIM_OC1_SetConfig+0x80>)
 8003990:	42b0      	cmp	r0, r6
 8003992:	d116      	bne.n	80039c2 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003994:	2608      	movs	r6, #8
 8003996:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003998:	68ce      	ldr	r6, [r1, #12]
 800399a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800399c:	2604      	movs	r6, #4
 800399e:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	4290      	cmp	r0, r2
 80039a2:	d008      	beq.n	80039b6 <TIM_OC1_SetConfig+0x5a>
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <TIM_OC1_SetConfig+0x78>)
 80039a6:	4290      	cmp	r0, r2
 80039a8:	d005      	beq.n	80039b6 <TIM_OC1_SetConfig+0x5a>
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <TIM_OC1_SetConfig+0x7c>)
 80039ac:	4290      	cmp	r0, r2
 80039ae:	d002      	beq.n	80039b6 <TIM_OC1_SetConfig+0x5a>
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <TIM_OC1_SetConfig+0x80>)
 80039b2:	4290      	cmp	r0, r2
 80039b4:	d105      	bne.n	80039c2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ba:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80039bc:	694c      	ldr	r4, [r1, #20]
 80039be:	4334      	orrs	r4, r6
 80039c0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80039c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80039c6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80039c8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	6203      	str	r3, [r0, #32]
}
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	fffffcff 	.word	0xfffffcff

080039e4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e6:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e8:	6a03      	ldr	r3, [r0, #32]
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <TIM_OC3_SetConfig+0x64>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80039f0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80039f2:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80039f4:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f6:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	680d      	ldr	r5, [r1, #0]
 80039fa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fc:	4d13      	ldr	r5, [pc, #76]	; (8003a4c <TIM_OC3_SetConfig+0x68>)
 80039fe:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a00:	688d      	ldr	r5, [r1, #8]
 8003a02:	022d      	lsls	r5, r5, #8
 8003a04:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a06:	4d12      	ldr	r5, [pc, #72]	; (8003a50 <TIM_OC3_SetConfig+0x6c>)
 8003a08:	42a8      	cmp	r0, r5
 8003a0a:	d10e      	bne.n	8003a2a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0c:	4d11      	ldr	r5, [pc, #68]	; (8003a54 <TIM_OC3_SetConfig+0x70>)
 8003a0e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a10:	68cb      	ldr	r3, [r1, #12]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a16:	4d10      	ldr	r5, [pc, #64]	; (8003a58 <TIM_OC3_SetConfig+0x74>)
 8003a18:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	4d10      	ldr	r5, [pc, #64]	; (8003a5c <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a1c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a20:	698a      	ldr	r2, [r1, #24]
 8003a22:	4332      	orrs	r2, r6
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	432a      	orrs	r2, r5
 8003a28:	e008      	b.n	8003a3c <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2a:	4d0d      	ldr	r5, [pc, #52]	; (8003a60 <TIM_OC3_SetConfig+0x7c>)
 8003a2c:	42a8      	cmp	r0, r5
 8003a2e:	d0f4      	beq.n	8003a1a <TIM_OC3_SetConfig+0x36>
 8003a30:	4d0c      	ldr	r5, [pc, #48]	; (8003a64 <TIM_OC3_SetConfig+0x80>)
 8003a32:	42a8      	cmp	r0, r5
 8003a34:	d0f1      	beq.n	8003a1a <TIM_OC3_SetConfig+0x36>
 8003a36:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <TIM_OC3_SetConfig+0x84>)
 8003a38:	42a8      	cmp	r0, r5
 8003a3a:	d0ee      	beq.n	8003a1a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a3e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003a42:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a44:	6203      	str	r3, [r0, #32]
}
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	fffffeff 	.word	0xfffffeff
 8003a4c:	fffffdff 	.word	0xfffffdff
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	fffff7ff 	.word	0xfffff7ff
 8003a58:	fffffbff 	.word	0xfffffbff
 8003a5c:	ffffcfff 	.word	0xffffcfff
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800

08003a6c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a6c:	6a03      	ldr	r3, [r0, #32]
 8003a6e:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <TIM_OC4_SetConfig+0x54>)
{
 8003a70:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a72:	4013      	ands	r3, r2
 8003a74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a78:	4c12      	ldr	r4, [pc, #72]	; (8003ac4 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003a7a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003a7c:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a7e:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a80:	680c      	ldr	r4, [r1, #0]
 8003a82:	0224      	lsls	r4, r4, #8
 8003a84:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a86:	4c10      	ldr	r4, [pc, #64]	; (8003ac8 <TIM_OC4_SetConfig+0x5c>)
 8003a88:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a8a:	688c      	ldr	r4, [r1, #8]
 8003a8c:	0324      	lsls	r4, r4, #12
 8003a8e:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	4c0e      	ldr	r4, [pc, #56]	; (8003acc <TIM_OC4_SetConfig+0x60>)
 8003a92:	42a0      	cmp	r0, r4
 8003a94:	d008      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x3c>
 8003a96:	4c0e      	ldr	r4, [pc, #56]	; (8003ad0 <TIM_OC4_SetConfig+0x64>)
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d005      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x3c>
 8003a9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ad4 <TIM_OC4_SetConfig+0x68>)
 8003a9e:	42a0      	cmp	r0, r4
 8003aa0:	d002      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x3c>
 8003aa2:	4c0d      	ldr	r4, [pc, #52]	; (8003ad8 <TIM_OC4_SetConfig+0x6c>)
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d104      	bne.n	8003ab2 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa8:	4c0c      	ldr	r4, [pc, #48]	; (8003adc <TIM_OC4_SetConfig+0x70>)
 8003aaa:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aac:	694c      	ldr	r4, [r1, #20]
 8003aae:	01a4      	lsls	r4, r4, #6
 8003ab0:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ab6:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	6202      	str	r2, [r0, #32]
}
 8003abc:	bd30      	pop	{r4, r5, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	ffffefff 	.word	0xffffefff
 8003ac4:	ffff8cff 	.word	0xffff8cff
 8003ac8:	ffffdfff 	.word	0xffffdfff
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	ffffbfff 	.word	0xffffbfff

08003ae0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <TIM_Base_SetConfig+0x74>)
{
 8003ae2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003ae4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae6:	4290      	cmp	r0, r2
 8003ae8:	d002      	beq.n	8003af0 <TIM_Base_SetConfig+0x10>
 8003aea:	4c1b      	ldr	r4, [pc, #108]	; (8003b58 <TIM_Base_SetConfig+0x78>)
 8003aec:	42a0      	cmp	r0, r4
 8003aee:	d108      	bne.n	8003b02 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af0:	2470      	movs	r4, #112	; 0x70
 8003af2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003af4:	684c      	ldr	r4, [r1, #4]
 8003af6:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af8:	4290      	cmp	r0, r2
 8003afa:	d00e      	beq.n	8003b1a <TIM_Base_SetConfig+0x3a>
 8003afc:	4c16      	ldr	r4, [pc, #88]	; (8003b58 <TIM_Base_SetConfig+0x78>)
 8003afe:	42a0      	cmp	r0, r4
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0x3a>
 8003b02:	4c16      	ldr	r4, [pc, #88]	; (8003b5c <TIM_Base_SetConfig+0x7c>)
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d008      	beq.n	8003b1a <TIM_Base_SetConfig+0x3a>
 8003b08:	4c15      	ldr	r4, [pc, #84]	; (8003b60 <TIM_Base_SetConfig+0x80>)
 8003b0a:	42a0      	cmp	r0, r4
 8003b0c:	d005      	beq.n	8003b1a <TIM_Base_SetConfig+0x3a>
 8003b0e:	4c15      	ldr	r4, [pc, #84]	; (8003b64 <TIM_Base_SetConfig+0x84>)
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d002      	beq.n	8003b1a <TIM_Base_SetConfig+0x3a>
 8003b14:	4c14      	ldr	r4, [pc, #80]	; (8003b68 <TIM_Base_SetConfig+0x88>)
 8003b16:	42a0      	cmp	r0, r4
 8003b18:	d103      	bne.n	8003b22 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	4c14      	ldr	r4, [pc, #80]	; (8003b6c <TIM_Base_SetConfig+0x8c>)
 8003b1c:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	68cc      	ldr	r4, [r1, #12]
 8003b20:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b22:	2480      	movs	r4, #128	; 0x80
 8003b24:	43a3      	bics	r3, r4
 8003b26:	694c      	ldr	r4, [r1, #20]
 8003b28:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8003b2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	688b      	ldr	r3, [r1, #8]
 8003b2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003b30:	680b      	ldr	r3, [r1, #0]
 8003b32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	4290      	cmp	r0, r2
 8003b36:	d008      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <TIM_Base_SetConfig+0x80>)
 8003b3a:	4298      	cmp	r0, r3
 8003b3c:	d005      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <TIM_Base_SetConfig+0x84>)
 8003b40:	4298      	cmp	r0, r3
 8003b42:	d002      	beq.n	8003b4a <TIM_Base_SetConfig+0x6a>
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <TIM_Base_SetConfig+0x88>)
 8003b46:	4298      	cmp	r0, r3
 8003b48:	d101      	bne.n	8003b4e <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4a:	690b      	ldr	r3, [r1, #16]
 8003b4c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	6143      	str	r3, [r0, #20]
}
 8003b52:	bd10      	pop	{r4, pc}
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40002000 	.word	0x40002000
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800
 8003b6c:	fffffcff 	.word	0xfffffcff

08003b70 <HAL_TIM_OC_Init>:
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
  if(htim == NULL)
 8003b76:	2c00      	cmp	r4, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_TIM_OC_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003b7a:	0025      	movs	r5, r4
 8003b7c:	353d      	adds	r5, #61	; 0x3d
 8003b7e:	782b      	ldrb	r3, [r5, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003b86:	0022      	movs	r2, r4
 8003b88:	323c      	adds	r2, #60	; 0x3c
 8003b8a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8003b8c:	0020      	movs	r0, r4
 8003b8e:	f001 f8eb 	bl	8004d68 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003b92:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b94:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003b96:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b98:	1d21      	adds	r1, r4, #4
 8003b9a:	f7ff ffa1 	bl	8003ae0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003b9e:	2301      	movs	r3, #1
  return HAL_OK;
 8003ba0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003ba2:	702b      	strb	r3, [r5, #0]
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}

08003ba6 <HAL_TIM_PWM_Init>:
{
 8003ba6:	b570      	push	{r4, r5, r6, lr}
 8003ba8:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
  if(htim == NULL)
 8003bac:	2c00      	cmp	r4, #0
 8003bae:	d014      	beq.n	8003bda <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003bb0:	0025      	movs	r5, r4
 8003bb2:	353d      	adds	r5, #61	; 0x3d
 8003bb4:	782b      	ldrb	r3, [r5, #0]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003bbc:	0022      	movs	r2, r4
 8003bbe:	323c      	adds	r2, #60	; 0x3c
 8003bc0:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003bc2:	0020      	movs	r0, r4
 8003bc4:	f001 f8ac 	bl	8004d20 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003bc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bca:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003bcc:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bce:	1d21      	adds	r1, r4, #4
 8003bd0:	f7ff ff86 	bl	8003ae0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003bd4:	2301      	movs	r3, #1
  return HAL_OK;
 8003bd6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003bd8:	702b      	strb	r3, [r5, #0]
}
 8003bda:	bd70      	pop	{r4, r5, r6, pc}

08003bdc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bdc:	2210      	movs	r2, #16
 8003bde:	6a03      	ldr	r3, [r0, #32]
{
 8003be0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be2:	4393      	bics	r3, r2
 8003be4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003be6:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be8:	4d16      	ldr	r5, [pc, #88]	; (8003c44 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003bea:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003bec:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bee:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	680d      	ldr	r5, [r1, #0]
 8003bf2:	022d      	lsls	r5, r5, #8
 8003bf4:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf6:	2520      	movs	r5, #32
 8003bf8:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfa:	688d      	ldr	r5, [r1, #8]
 8003bfc:	012d      	lsls	r5, r5, #4
 8003bfe:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c00:	4d11      	ldr	r5, [pc, #68]	; (8003c48 <TIM_OC2_SetConfig+0x6c>)
 8003c02:	42a8      	cmp	r0, r5
 8003c04:	d10f      	bne.n	8003c26 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c06:	2580      	movs	r5, #128	; 0x80
 8003c08:	43aa      	bics	r2, r5
 8003c0a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c0c:	68ca      	ldr	r2, [r1, #12]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c12:	2540      	movs	r5, #64	; 0x40
 8003c14:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c16:	4d0d      	ldr	r5, [pc, #52]	; (8003c4c <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c18:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c1a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c1c:	698b      	ldr	r3, [r1, #24]
 8003c1e:	4333      	orrs	r3, r6
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	432b      	orrs	r3, r5
 8003c24:	e008      	b.n	8003c38 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	4d0a      	ldr	r5, [pc, #40]	; (8003c50 <TIM_OC2_SetConfig+0x74>)
 8003c28:	42a8      	cmp	r0, r5
 8003c2a:	d0f4      	beq.n	8003c16 <TIM_OC2_SetConfig+0x3a>
 8003c2c:	4d09      	ldr	r5, [pc, #36]	; (8003c54 <TIM_OC2_SetConfig+0x78>)
 8003c2e:	42a8      	cmp	r0, r5
 8003c30:	d0f1      	beq.n	8003c16 <TIM_OC2_SetConfig+0x3a>
 8003c32:	4d09      	ldr	r5, [pc, #36]	; (8003c58 <TIM_OC2_SetConfig+0x7c>)
 8003c34:	42a8      	cmp	r0, r5
 8003c36:	d0ee      	beq.n	8003c16 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003c38:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c3a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c3c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c3e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003c40:	6202      	str	r2, [r0, #32]
}
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	ffff8cff 	.word	0xffff8cff
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	fffff3ff 	.word	0xfffff3ff
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <HAL_TIM_OC_ConfigChannel>:
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003c5e:	0004      	movs	r4, r0
 8003c60:	2602      	movs	r6, #2
 8003c62:	343c      	adds	r4, #60	; 0x3c
 8003c64:	7825      	ldrb	r5, [r4, #0]
{
 8003c66:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003c68:	0030      	movs	r0, r6
 8003c6a:	2d01      	cmp	r5, #1
 8003c6c:	d017      	beq.n	8003c9e <HAL_TIM_OC_ConfigChannel+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8003c70:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8003c74:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c76:	702e      	strb	r6, [r5, #0]
  switch (Channel)
 8003c78:	2a0c      	cmp	r2, #12
 8003c7a:	d80c      	bhi.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x3a>
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	f7fc fa4d 	bl	800011c <__gnu_thumb1_case_uqi>
 8003c82:	0a07      	.short	0x0a07
 8003c84:	0a0f0a0a 	.word	0x0a0f0a0a
 8003c88:	0a130a0a 	.word	0x0a130a0a
 8003c8c:	0a0a      	.short	0x0a0a
 8003c8e:	17          	.byte	0x17
 8003c8f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f7ff fe63 	bl	800395c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003c98:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003c9c:	7020      	strb	r0, [r4, #0]
}
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f7ff ff9b 	bl	8003bdc <TIM_OC2_SetConfig>
    break;
 8003ca6:	e7f6      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f7ff fe9b 	bl	80039e4 <TIM_OC3_SetConfig>
    break;
 8003cae:	e7f2      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x3a>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	f7ff fedb 	bl	8003a6c <TIM_OC4_SetConfig>
    break;
 8003cb6:	e7ee      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x3a>

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003cba:	0006      	movs	r6, r0
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	363c      	adds	r6, #60	; 0x3c
{
 8003cc0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003cc2:	7831      	ldrb	r1, [r6, #0]
{
 8003cc4:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	2901      	cmp	r1, #1
 8003cca:	d025      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8003cce:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8003cd2:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8003cd6:	2a0c      	cmp	r2, #12
 8003cd8:	d81a      	bhi.n	8003d10 <HAL_TIM_PWM_ConfigChannel+0x58>
 8003cda:	0010      	movs	r0, r2
 8003cdc:	f7fc fa1e 	bl	800011c <__gnu_thumb1_case_uqi>
 8003ce0:	18181807 	.word	0x18181807
 8003ce4:	1818181d 	.word	0x1818181d
 8003ce8:	1818182f 	.word	0x1818182f
 8003cec:	41          	.byte	0x41
 8003ced:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cee:	0029      	movs	r1, r5
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	f7ff fe33 	bl	800395c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	6999      	ldr	r1, [r3, #24]
 8003cfc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cfe:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	438a      	bics	r2, r1
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003d12:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8003d16:	7030      	strb	r0, [r6, #0]
}
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d1a:	0029      	movs	r1, r5
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f7ff ff5d 	bl	8003bdc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	4915      	ldr	r1, [pc, #84]	; (8003d88 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d36:	692a      	ldr	r2, [r5, #16]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	0212      	lsls	r2, r2, #8
 8003d3c:	e7e6      	b.n	8003d0c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3e:	0029      	movs	r1, r5
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	f7ff fe4f 	bl	80039e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d46:	2208      	movs	r2, #8
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d4e:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	438a      	bics	r2, r1
 8003d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
    break;
 8003d60:	e7d6      	b.n	8003d10 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d62:	0029      	movs	r1, r5
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	f7ff fe81 	bl	8003a6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	69d9      	ldr	r1, [r3, #28]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d7e:	692a      	ldr	r2, [r5, #16]
 8003d80:	69d9      	ldr	r1, [r3, #28]
 8003d82:	0212      	lsls	r2, r2, #8
 8003d84:	e7ea      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	fffffbff 	.word	0xfffffbff

08003d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d8c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003d8e:	2401      	movs	r4, #1
 8003d90:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003d92:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003d94:	6a03      	ldr	r3, [r0, #32]
 8003d96:	43a3      	bics	r3, r4
 8003d98:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003d9a:	6a03      	ldr	r3, [r0, #32]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	6202      	str	r2, [r0, #32]
}
 8003da0:	bd10      	pop	{r4, pc}
	...

08003da4 <HAL_TIM_PWM_Start>:
{
 8003da4:	b510      	push	{r4, lr}
 8003da6:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da8:	2201      	movs	r2, #1
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	f7ff ffee 	bl	8003d8c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <HAL_TIM_PWM_Start+0x3c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d008      	beq.n	8003dca <HAL_TIM_PWM_Start+0x26>
 8003db8:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <HAL_TIM_PWM_Start+0x40>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d005      	beq.n	8003dca <HAL_TIM_PWM_Start+0x26>
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_TIM_PWM_Start+0x44>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d002      	beq.n	8003dca <HAL_TIM_PWM_Start+0x26>
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_TIM_PWM_Start+0x48>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003dce:	0212      	lsls	r2, r2, #8
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	6819      	ldr	r1, [r3, #0]
}
 8003dd8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <HAL_TIM_OC_Start>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	f7ff ffd7 	bl	8003da4 <HAL_TIM_PWM_Start>
 8003df6:	bd10      	pop	{r4, pc}

08003df8 <HAL_TIM_PWM_Start_IT>:
{
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	0004      	movs	r4, r0
  switch (Channel)
 8003dfc:	290c      	cmp	r1, #12
 8003dfe:	d80e      	bhi.n	8003e1e <HAL_TIM_PWM_Start_IT+0x26>
 8003e00:	0008      	movs	r0, r1
 8003e02:	f7fc f98b 	bl	800011c <__gnu_thumb1_case_uqi>
 8003e06:	0c07      	.short	0x0c07
 8003e08:	0c280c0c 	.word	0x0c280c0c
 8003e0c:	0c2c0c0c 	.word	0x0c2c0c0c
 8003e10:	0c0c      	.short	0x0c0c
 8003e12:	30          	.byte	0x30
 8003e13:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e14:	2302      	movs	r3, #2
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e1a:	4303      	orrs	r3, r0
 8003e1c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e1e:	2201      	movs	r2, #1
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	f7ff ffb3 	bl	8003d8c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_TIM_PWM_Start_IT+0x78>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d008      	beq.n	8003e40 <HAL_TIM_PWM_Start_IT+0x48>
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <HAL_TIM_PWM_Start_IT+0x7c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d005      	beq.n	8003e40 <HAL_TIM_PWM_Start_IT+0x48>
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <HAL_TIM_PWM_Start_IT+0x80>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d002      	beq.n	8003e40 <HAL_TIM_PWM_Start_IT+0x48>
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_TIM_PWM_Start_IT+0x84>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start_IT+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e44:	0212      	lsls	r2, r2, #8
 8003e46:	430a      	orrs	r2, r1
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	6819      	ldr	r1, [r3, #0]
}
 8003e4e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003e50:	430a      	orrs	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	2304      	movs	r3, #4
 8003e5a:	68d0      	ldr	r0, [r2, #12]
 8003e5c:	e7dd      	b.n	8003e1a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	2308      	movs	r3, #8
 8003e62:	68d0      	ldr	r0, [r2, #12]
 8003e64:	e7d9      	b.n	8003e1a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	2310      	movs	r3, #16
 8003e6a:	68d0      	ldr	r0, [r2, #12]
 8003e6c:	e7d5      	b.n	8003e1a <HAL_TIM_PWM_Start_IT+0x22>
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003e80:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003e82:	0004      	movs	r4, r0
 8003e84:	343c      	adds	r4, #60	; 0x3c
 8003e86:	7822      	ldrb	r2, [r4, #0]
{
 8003e88:	0003      	movs	r3, r0
 8003e8a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003e8c:	2a01      	cmp	r2, #1
 8003e8e:	d017      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003e92:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	353d      	adds	r5, #61	; 0x3d
 8003e96:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	306e      	adds	r0, #110	; 0x6e
 8003e9c:	4382      	bics	r2, r0
 8003e9e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ea4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea6:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003ea8:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003eaa:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4382      	bics	r2, r0
 8003eb0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003eb2:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003eb4:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003ebe:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003ec0:	bd30      	pop	{r4, r5, pc}
	...

08003ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ec4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec6:	0004      	movs	r4, r0
 8003ec8:	343c      	adds	r4, #60	; 0x3c
 8003eca:	7823      	ldrb	r3, [r4, #0]
{
 8003ecc:	0002      	movs	r2, r0
 8003ece:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d024      	beq.n	8003f1e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	0015      	movs	r5, r2
 8003ed6:	353d      	adds	r5, #61	; 0x3d
 8003ed8:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003edc:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ede:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ee0:	4003      	ands	r3, r0
 8003ee2:	6888      	ldr	r0, [r1, #8]
 8003ee4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ee6:	480f      	ldr	r0, [pc, #60]	; (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003ee8:	4003      	ands	r3, r0
 8003eea:	6848      	ldr	r0, [r1, #4]
 8003eec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eee:	480e      	ldr	r0, [pc, #56]	; (8003f28 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8003ef0:	4003      	ands	r3, r0
 8003ef2:	6808      	ldr	r0, [r1, #0]
 8003ef4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ef6:	480d      	ldr	r0, [pc, #52]	; (8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8003ef8:	4003      	ands	r3, r0
 8003efa:	6908      	ldr	r0, [r1, #16]
 8003efc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8003f00:	4003      	ands	r3, r0
 8003f02:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f04:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f08:	480a      	ldr	r0, [pc, #40]	; (8003f34 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8003f0a:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f0c:	480a      	ldr	r0, [pc, #40]	; (8003f38 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f0e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f10:	4003      	ands	r3, r0
 8003f12:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003f14:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003f16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003f1c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003f1e:	bd30      	pop	{r4, r5, pc}
 8003f20:	fffffcff 	.word	0xfffffcff
 8003f24:	fffffbff 	.word	0xfffffbff
 8003f28:	fffff7ff 	.word	0xfffff7ff
 8003f2c:	ffffefff 	.word	0xffffefff
 8003f30:	ffffdfff 	.word	0xffffdfff
 8003f34:	ffffbfff 	.word	0xffffbfff
 8003f38:	ffff7fff 	.word	0xffff7fff

08003f3c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3c:	6803      	ldr	r3, [r0, #0]
 8003f3e:	4906      	ldr	r1, [pc, #24]	; (8003f58 <UART_EndRxTransfer+0x1c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	3123      	adds	r1, #35	; 0x23
 8003f4c:	31ff      	adds	r1, #255	; 0xff
 8003f4e:	438a      	bics	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003f52:	2320      	movs	r3, #32
 8003f54:	7003      	strb	r3, [r0, #0]
}
 8003f56:	4770      	bx	lr
 8003f58:	fffffedf 	.word	0xfffffedf

08003f5c <HAL_UART_TxCpltCallback>:
 8003f5c:	4770      	bx	lr

08003f5e <HAL_UART_RxCpltCallback>:
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_ErrorCallback>:
 8003f60:	4770      	bx	lr

08003f62 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003f62:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	0002      	movs	r2, r0
{
 8003f68:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003f6a:	325a      	adds	r2, #90	; 0x5a
 8003f6c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003f6e:	3a08      	subs	r2, #8
 8003f70:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003f72:	f7ff fff5 	bl	8003f60 <HAL_UART_ErrorCallback>
}
 8003f76:	bd10      	pop	{r4, pc}

08003f78 <UART_SetConfig>:
{
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f7c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f7e:	69c2      	ldr	r2, [r0, #28]
 8003f80:	6883      	ldr	r3, [r0, #8]
 8003f82:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f84:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f86:	4303      	orrs	r3, r0
 8003f88:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	4e3f      	ldr	r6, [pc, #252]	; (8004088 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f8e:	483f      	ldr	r0, [pc, #252]	; (800408c <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f90:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f92:	4001      	ands	r1, r0
 8003f94:	430b      	orrs	r3, r1
 8003f96:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f98:	686b      	ldr	r3, [r5, #4]
 8003f9a:	493d      	ldr	r1, [pc, #244]	; (8004090 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f9c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	68e1      	ldr	r1, [r4, #12]
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003fa6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003fa8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003faa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003fac:	4839      	ldr	r0, [pc, #228]	; (8004094 <UART_SetConfig+0x11c>)
 8003fae:	4001      	ands	r1, r0
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	60ab      	str	r3, [r5, #8]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb8:	42b5      	cmp	r5, r6
 8003fba:	d110      	bne.n	8003fde <UART_SetConfig+0x66>
 8003fbc:	2003      	movs	r0, #3
 8003fbe:	4936      	ldr	r1, [pc, #216]	; (8004098 <UART_SetConfig+0x120>)
 8003fc0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8003fc2:	4001      	ands	r1, r0
 8003fc4:	4835      	ldr	r0, [pc, #212]	; (800409c <UART_SetConfig+0x124>)
 8003fc6:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d013      	beq.n	8003ff4 <UART_SetConfig+0x7c>
    switch (clocksource)
 8003fcc:	2808      	cmp	r0, #8
 8003fce:	d858      	bhi.n	8004082 <UART_SetConfig+0x10a>
 8003fd0:	f7fc f8a4 	bl	800011c <__gnu_thumb1_case_uqi>
 8003fd4:	57425737 	.word	0x57425737
 8003fd8:	5757574b 	.word	0x5757574b
 8003fdc:	50          	.byte	0x50
 8003fdd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fde:	4930      	ldr	r1, [pc, #192]	; (80040a0 <UART_SetConfig+0x128>)
 8003fe0:	428d      	cmp	r5, r1
 8003fe2:	d14c      	bne.n	800407e <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d12c      	bne.n	8004042 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003fe8:	f7ff fc24 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003fec:	6863      	ldr	r3, [r4, #4]
 8003fee:	0040      	lsls	r0, r0, #1
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	e00b      	b.n	800400c <UART_SetConfig+0x94>
    switch (clocksource)
 8003ff4:	2808      	cmp	r0, #8
 8003ff6:	d821      	bhi.n	800403c <UART_SetConfig+0xc4>
 8003ff8:	f7fc f886 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003ffc:	200520f6 	.word	0x200520f6
 8004000:	20202018 	.word	0x20202018
 8004004:	1b          	.byte	0x1b
 8004005:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004006:	6863      	ldr	r3, [r4, #4]
 8004008:	0858      	lsrs	r0, r3, #1
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800400c:	18c0      	adds	r0, r0, r3
 800400e:	6861      	ldr	r1, [r4, #4]
 8004010:	f7fc f88e 	bl	8000130 <__udivsi3>
 8004014:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8004016:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8004018:	220f      	movs	r2, #15
 800401a:	0019      	movs	r1, r3
 800401c:	4391      	bics	r1, r2
 800401e:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004020:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8004022:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004024:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8004026:	4313      	orrs	r3, r2
 8004028:	60cb      	str	r3, [r1, #12]
}
 800402a:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800402c:	f7ff fb34 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8004030:	e7dc      	b.n	8003fec <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	0858      	lsrs	r0, r3, #1
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	025b      	lsls	r3, r3, #9
 800403a:	e7e7      	b.n	800400c <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800403c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800403e:	2300      	movs	r3, #0
 8004040:	e7ea      	b.n	8004018 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004042:	f7ff fbf7 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8004046:	6861      	ldr	r1, [r4, #4]
 8004048:	084b      	lsrs	r3, r1, #1
 800404a:	1818      	adds	r0, r3, r0
 800404c:	f7fc f870 	bl	8000130 <__udivsi3>
 8004050:	b280      	uxth	r0, r0
 8004052:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004054:	2000      	movs	r0, #0
        break;
 8004056:	e7e8      	b.n	800402a <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004058:	6861      	ldr	r1, [r4, #4]
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <UART_SetConfig+0x130>)
 800405c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800405e:	18c0      	adds	r0, r0, r3
 8004060:	f7fc f866 	bl	8000130 <__udivsi3>
 8004064:	b280      	uxth	r0, r0
 8004066:	60f0      	str	r0, [r6, #12]
 8004068:	e7f4      	b.n	8004054 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800406a:	f7ff fb15 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800406e:	6861      	ldr	r1, [r4, #4]
 8004070:	084b      	lsrs	r3, r1, #1
 8004072:	e7f4      	b.n	800405e <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	6861      	ldr	r1, [r4, #4]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	0848      	lsrs	r0, r1, #1
 800407c:	e7ef      	b.n	800405e <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	429a      	cmp	r2, r3
 8004080:	d0dc      	beq.n	800403c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8004082:	2001      	movs	r0, #1
  return ret;
 8004084:	e7d1      	b.n	800402a <UART_SetConfig+0xb2>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	40013800 	.word	0x40013800
 800408c:	ffff69f3 	.word	0xffff69f3
 8004090:	ffffcfff 	.word	0xffffcfff
 8004094:	fffff4ff 	.word	0xfffff4ff
 8004098:	40021000 	.word	0x40021000
 800409c:	080052b4 	.word	0x080052b4
 80040a0:	40004400 	.word	0x40004400
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	007a1200 	.word	0x007a1200

080040ac <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80040ae:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b0:	07da      	lsls	r2, r3, #31
 80040b2:	d506      	bpl.n	80040c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b4:	6801      	ldr	r1, [r0, #0]
 80040b6:	4c28      	ldr	r4, [pc, #160]	; (8004158 <UART_AdvFeatureConfig+0xac>)
 80040b8:	684a      	ldr	r2, [r1, #4]
 80040ba:	4022      	ands	r2, r4
 80040bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80040be:	4322      	orrs	r2, r4
 80040c0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c2:	079a      	lsls	r2, r3, #30
 80040c4:	d506      	bpl.n	80040d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c6:	6801      	ldr	r1, [r0, #0]
 80040c8:	4c24      	ldr	r4, [pc, #144]	; (800415c <UART_AdvFeatureConfig+0xb0>)
 80040ca:	684a      	ldr	r2, [r1, #4]
 80040cc:	4022      	ands	r2, r4
 80040ce:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80040d0:	4322      	orrs	r2, r4
 80040d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d4:	075a      	lsls	r2, r3, #29
 80040d6:	d506      	bpl.n	80040e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040d8:	6801      	ldr	r1, [r0, #0]
 80040da:	4c21      	ldr	r4, [pc, #132]	; (8004160 <UART_AdvFeatureConfig+0xb4>)
 80040dc:	684a      	ldr	r2, [r1, #4]
 80040de:	4022      	ands	r2, r4
 80040e0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80040e2:	4322      	orrs	r2, r4
 80040e4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040e6:	071a      	lsls	r2, r3, #28
 80040e8:	d506      	bpl.n	80040f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ea:	6801      	ldr	r1, [r0, #0]
 80040ec:	4c1d      	ldr	r4, [pc, #116]	; (8004164 <UART_AdvFeatureConfig+0xb8>)
 80040ee:	684a      	ldr	r2, [r1, #4]
 80040f0:	4022      	ands	r2, r4
 80040f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80040f4:	4322      	orrs	r2, r4
 80040f6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	06da      	lsls	r2, r3, #27
 80040fa:	d506      	bpl.n	800410a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fc:	6801      	ldr	r1, [r0, #0]
 80040fe:	4c1a      	ldr	r4, [pc, #104]	; (8004168 <UART_AdvFeatureConfig+0xbc>)
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	4022      	ands	r2, r4
 8004104:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004106:	4322      	orrs	r2, r4
 8004108:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	069a      	lsls	r2, r3, #26
 800410c:	d506      	bpl.n	800411c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410e:	6801      	ldr	r1, [r0, #0]
 8004110:	4c16      	ldr	r4, [pc, #88]	; (800416c <UART_AdvFeatureConfig+0xc0>)
 8004112:	688a      	ldr	r2, [r1, #8]
 8004114:	4022      	ands	r2, r4
 8004116:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004118:	4322      	orrs	r2, r4
 800411a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800411c:	065a      	lsls	r2, r3, #25
 800411e:	d510      	bpl.n	8004142 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	6801      	ldr	r1, [r0, #0]
 8004122:	4d13      	ldr	r5, [pc, #76]	; (8004170 <UART_AdvFeatureConfig+0xc4>)
 8004124:	684a      	ldr	r2, [r1, #4]
 8004126:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004128:	402a      	ands	r2, r5
 800412a:	4322      	orrs	r2, r4
 800412c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	0352      	lsls	r2, r2, #13
 8004132:	4294      	cmp	r4, r2
 8004134:	d105      	bne.n	8004142 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004136:	684a      	ldr	r2, [r1, #4]
 8004138:	4c0e      	ldr	r4, [pc, #56]	; (8004174 <UART_AdvFeatureConfig+0xc8>)
 800413a:	4022      	ands	r2, r4
 800413c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800413e:	4322      	orrs	r2, r4
 8004140:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	d506      	bpl.n	8004154 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004146:	6802      	ldr	r2, [r0, #0]
 8004148:	490b      	ldr	r1, [pc, #44]	; (8004178 <UART_AdvFeatureConfig+0xcc>)
 800414a:	6853      	ldr	r3, [r2, #4]
 800414c:	400b      	ands	r3, r1
 800414e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004150:	430b      	orrs	r3, r1
 8004152:	6053      	str	r3, [r2, #4]
}
 8004154:	bd30      	pop	{r4, r5, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	fffdffff 	.word	0xfffdffff
 800415c:	fffeffff 	.word	0xfffeffff
 8004160:	fffbffff 	.word	0xfffbffff
 8004164:	ffff7fff 	.word	0xffff7fff
 8004168:	ffffefff 	.word	0xffffefff
 800416c:	ffffdfff 	.word	0xffffdfff
 8004170:	ffefffff 	.word	0xffefffff
 8004174:	ff9fffff 	.word	0xff9fffff
 8004178:	fff7ffff 	.word	0xfff7ffff

0800417c <HAL_UART_Init>:
{
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004182:	2001      	movs	r0, #1
}
 8004184:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004186:	0005      	movs	r5, r0
 8004188:	3569      	adds	r5, #105	; 0x69
 800418a:	782b      	ldrb	r3, [r5, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8004192:	0002      	movs	r2, r0
 8004194:	3268      	adds	r2, #104	; 0x68
 8004196:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004198:	f000 ff76 	bl	8005088 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800419e:	2101      	movs	r1, #1
 80041a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80041a2:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80041a4:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80041a8:	438b      	bics	r3, r1
 80041aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ac:	f7ff fee4 	bl	8003f78 <UART_SetConfig>
 80041b0:	2801      	cmp	r0, #1
 80041b2:	d0e6      	beq.n	8004182 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80041ba:	0020      	movs	r0, r4
 80041bc:	f7ff ff76 	bl	80040ac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	490b      	ldr	r1, [pc, #44]	; (80041f0 <HAL_UART_Init+0x74>)
 80041c4:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80041c8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041ca:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80041cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	438a      	bics	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80041d4:	2201      	movs	r2, #1
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80041de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80041e2:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 80041e4:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80041e6:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80041ea:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80041ec:	e7ca      	b.n	8004184 <HAL_UART_Init+0x8>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	fffff7ff 	.word	0xfffff7ff

080041f4 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f4:	0003      	movs	r3, r0
{
 80041f6:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f8:	3369      	adds	r3, #105	; 0x69
 80041fa:	781b      	ldrb	r3, [r3, #0]
{
 80041fc:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004200:	2b21      	cmp	r3, #33	; 0x21
 8004202:	d10f      	bne.n	8004224 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8004204:	0014      	movs	r4, r2
 8004206:	3452      	adds	r4, #82	; 0x52
 8004208:	8823      	ldrh	r3, [r4, #0]
 800420a:	6811      	ldr	r1, [r2, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004212:	680a      	ldr	r2, [r1, #0]
 8004214:	307e      	adds	r0, #126	; 0x7e
 8004216:	4382      	bics	r2, r0
 8004218:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	6808      	ldr	r0, [r1, #0]
 800421e:	4302      	orrs	r2, r0
 8004220:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8004222:	2000      	movs	r0, #0
  }
}
 8004224:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004226:	2080      	movs	r0, #128	; 0x80
 8004228:	6895      	ldr	r5, [r2, #8]
 800422a:	0140      	lsls	r0, r0, #5
 800422c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800422e:	4285      	cmp	r5, r0
 8004230:	d10d      	bne.n	800424e <UART_Transmit_IT+0x5a>
 8004232:	6910      	ldr	r0, [r2, #16]
 8004234:	2800      	cmp	r0, #0
 8004236:	d10a      	bne.n	800424e <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004238:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 800423a:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800423c:	05c0      	lsls	r0, r0, #23
 800423e:	0dc0      	lsrs	r0, r0, #23
 8004240:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004242:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8004244:	8823      	ldrh	r3, [r4, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	8023      	strh	r3, [r4, #0]
 800424c:	e7e9      	b.n	8004222 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800424e:	1c58      	adds	r0, r3, #1
 8004250:	64d0      	str	r0, [r2, #76]	; 0x4c
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	850b      	strh	r3, [r1, #40]	; 0x28
 8004256:	e7f5      	b.n	8004244 <UART_Transmit_IT+0x50>

08004258 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	6802      	ldr	r2, [r0, #0]
{
 800425c:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	438b      	bics	r3, r1
 8004262:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004264:	0003      	movs	r3, r0
 8004266:	2220      	movs	r2, #32
 8004268:	3369      	adds	r3, #105	; 0x69
 800426a:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 800426c:	f7ff fe76 	bl	8003f5c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8004270:	2000      	movs	r0, #0
 8004272:	bd10      	pop	{r4, pc}

08004274 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004274:	0002      	movs	r2, r0
{
 8004276:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004278:	326a      	adds	r2, #106	; 0x6a
 800427a:	7811      	ldrb	r1, [r2, #0]
 800427c:	6803      	ldr	r3, [r0, #0]
 800427e:	2922      	cmp	r1, #34	; 0x22
 8004280:	d12d      	bne.n	80042de <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8004282:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8004286:	315c      	adds	r1, #92	; 0x5c
 8004288:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800428a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	0164      	lsls	r4, r4, #5
 800428e:	4029      	ands	r1, r5
 8004290:	6885      	ldr	r5, [r0, #8]
 8004292:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004294:	42a5      	cmp	r5, r4
 8004296:	d11e      	bne.n	80042d6 <UART_Receive_IT+0x62>
 8004298:	6904      	ldr	r4, [r0, #16]
 800429a:	2c00      	cmp	r4, #0
 800429c:	d11b      	bne.n	80042d6 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800429e:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80042a0:	3302      	adds	r3, #2
 80042a2:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80042a4:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80042a6:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80042a8:	315a      	adds	r1, #90	; 0x5a
 80042aa:	880b      	ldrh	r3, [r1, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	800b      	strh	r3, [r1, #0]
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	d10d      	bne.n	80042d2 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	4d0c      	ldr	r5, [pc, #48]	; (80042ec <UART_Receive_IT+0x78>)
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	4029      	ands	r1, r5
 80042be:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	6899      	ldr	r1, [r3, #8]
 80042c2:	3523      	adds	r5, #35	; 0x23
 80042c4:	35ff      	adds	r5, #255	; 0xff
 80042c6:	43a9      	bics	r1, r5
 80042c8:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80042ca:	2320      	movs	r3, #32
 80042cc:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 80042ce:	f7ff fe46 	bl	8003f5e <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80042d2:	0020      	movs	r0, r4
 80042d4:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d6:	1c5c      	adds	r4, r3, #1
 80042d8:	6544      	str	r4, [r0, #84]	; 0x54
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	e7e2      	b.n	80042a4 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042de:	2208      	movs	r2, #8
 80042e0:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 80042e2:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042e4:	430a      	orrs	r2, r1
 80042e6:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80042e8:	e7f3      	b.n	80042d2 <UART_Receive_IT+0x5e>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	fffffedf 	.word	0xfffffedf

080042f0 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80042f0:	220f      	movs	r2, #15
{
 80042f2:	b570      	push	{r4, r5, r6, lr}
 80042f4:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fa:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80042fc:	401a      	ands	r2, r3
  if (errorflags == RESET)
 80042fe:	d108      	bne.n	8004312 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004300:	2520      	movs	r5, #32
 8004302:	422b      	tst	r3, r5
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0x22>
 8004306:	4229      	tst	r1, r5
 8004308:	d003      	beq.n	8004312 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800430a:	0020      	movs	r0, r4
 800430c:	f7ff ffb2 	bl	8004274 <UART_Receive_IT>
}
 8004310:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8004312:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8004314:	2a00      	cmp	r2, #0
 8004316:	d060      	beq.n	80043da <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004318:	2201      	movs	r2, #1
 800431a:	4015      	ands	r5, r2
 800431c:	d103      	bne.n	8004326 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800431e:	2690      	movs	r6, #144	; 0x90
 8004320:	0076      	lsls	r6, r6, #1
 8004322:	4231      	tst	r1, r6
 8004324:	d059      	beq.n	80043da <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004326:	4213      	tst	r3, r2
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0x46>
 800432a:	05ce      	lsls	r6, r1, #23
 800432c:	d503      	bpl.n	8004336 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800432e:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004330:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004332:	4332      	orrs	r2, r6
 8004334:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004336:	2202      	movs	r2, #2
 8004338:	4213      	tst	r3, r2
 800433a:	d006      	beq.n	800434a <HAL_UART_IRQHandler+0x5a>
 800433c:	2d00      	cmp	r5, #0
 800433e:	d004      	beq.n	800434a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8004340:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004342:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004344:	1892      	adds	r2, r2, r2
 8004346:	4332      	orrs	r2, r6
 8004348:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	2204      	movs	r2, #4
 800434c:	4213      	tst	r3, r2
 800434e:	d006      	beq.n	800435e <HAL_UART_IRQHandler+0x6e>
 8004350:	2d00      	cmp	r5, #0
 8004352:	d004      	beq.n	800435e <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004354:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004356:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004358:	3a02      	subs	r2, #2
 800435a:	4332      	orrs	r2, r6
 800435c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800435e:	071a      	lsls	r2, r3, #28
 8004360:	d508      	bpl.n	8004374 <HAL_UART_IRQHandler+0x84>
 8004362:	068a      	lsls	r2, r1, #26
 8004364:	d401      	bmi.n	800436a <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004366:	2d00      	cmp	r5, #0
 8004368:	d004      	beq.n	8004374 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800436a:	2208      	movs	r2, #8
 800436c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800436e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004370:	4302      	orrs	r2, r0
 8004372:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004374:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004376:	2a00      	cmp	r2, #0
 8004378:	d0ca      	beq.n	8004310 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800437a:	2220      	movs	r2, #32
 800437c:	4213      	tst	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_UART_IRQHandler+0x9a>
 8004380:	4211      	tst	r1, r2
 8004382:	d002      	beq.n	800438a <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8004384:	0020      	movs	r0, r4
 8004386:	f7ff ff75 	bl	8004274 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800438a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800438c:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800438e:	071b      	lsls	r3, r3, #28
 8004390:	d404      	bmi.n	800439c <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	689d      	ldr	r5, [r3, #8]
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800439a:	d01a      	beq.n	80043d2 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 800439c:	f7ff fdce 	bl	8003f3c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	420a      	tst	r2, r1
 80043a8:	d00f      	beq.n	80043ca <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043aa:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80043ac:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	438a      	bics	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d009      	beq.n	80043ca <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_UART_IRQHandler+0x114>)
 80043b8:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ba:	f7fe fdcf 	bl	8002f5c <HAL_DMA_Abort_IT>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0a6      	beq.n	8004310 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80043c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043c6:	4798      	blx	r3
 80043c8:	e7a2      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80043ca:	0020      	movs	r0, r4
 80043cc:	f7ff fdc8 	bl	8003f60 <HAL_UART_ErrorCallback>
 80043d0:	e79e      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 80043d2:	f7ff fdc5 	bl	8003f60 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	66e5      	str	r5, [r4, #108]	; 0x6c
 80043d8:	e79a      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	4213      	tst	r3, r2
 80043de:	d005      	beq.n	80043ec <HAL_UART_IRQHandler+0xfc>
 80043e0:	4211      	tst	r1, r2
 80043e2:	d003      	beq.n	80043ec <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 80043e4:	0020      	movs	r0, r4
 80043e6:	f7ff ff05 	bl	80041f4 <UART_Transmit_IT>
    return;
 80043ea:	e791      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ec:	2240      	movs	r2, #64	; 0x40
 80043ee:	4213      	tst	r3, r2
 80043f0:	d100      	bne.n	80043f4 <HAL_UART_IRQHandler+0x104>
 80043f2:	e78d      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
 80043f4:	4211      	tst	r1, r2
 80043f6:	d100      	bne.n	80043fa <HAL_UART_IRQHandler+0x10a>
 80043f8:	e78a      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 80043fa:	0020      	movs	r0, r4
 80043fc:	f7ff ff2c 	bl	8004258 <UART_EndTransmit_IT>
    return;
 8004400:	e786      	b.n	8004310 <HAL_UART_IRQHandler+0x20>
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	08003f63 	.word	0x08003f63

08004408 <HAL_ADC_MspInit>:
  HAL_ADC_MspInit(&hadc);

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	0005      	movs	r5, r0
 800440c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440e:	2214      	movs	r2, #20
 8004410:	2100      	movs	r1, #0
 8004412:	a803      	add	r0, sp, #12
 8004414:	f000 fec9 	bl	80051aa <memset>
  if(adcHandle->Instance==ADC1)
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_ADC_MspInit+0x98>)
 800441a:	682a      	ldr	r2, [r5, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d13d      	bne.n	800449c <HAL_ADC_MspInit+0x94>
  {

    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004420:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004422:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_ADC_MspInit+0x9c>)
 8004426:	00b6      	lsls	r6, r6, #2
 8004428:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442a:	0280      	lsls	r0, r0, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800442c:	4332      	orrs	r2, r6
 800442e:	619a      	str	r2, [r3, #24]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	4032      	ands	r2, r6
 8004434:	9200      	str	r2, [sp, #0]
 8004436:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004438:	6959      	ldr	r1, [r3, #20]
 800443a:	4301      	orrs	r1, r0
 800443c:	6159      	str	r1, [r3, #20]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800443e:	2101      	movs	r1, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	4002      	ands	r2, r0
 8004444:	9201      	str	r2, [sp, #4]
 8004446:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004448:	695a      	ldr	r2, [r3, #20]
    */
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
                          |CURRENT_PHASE_V_Pin|CURRENT_PHASE_W_Pin|THROTTLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_DMA1_CLK_ENABLE();
 800444c:	430a      	orrs	r2, r1
 800444e:	615a      	str	r2, [r3, #20]
 8004450:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004452:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004454:	400b      	ands	r3, r1
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 800445a:	237f      	movs	r3, #127	; 0x7f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 800445e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004460:	3b7c      	subs	r3, #124	; 0x7c
 8004462:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004464:	f7fe fde6 	bl	8003034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004468:	4c0f      	ldr	r4, [pc, #60]	; (80044a8 <HAL_ADC_MspInit+0xa0>)
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_ADC_MspInit+0xa4>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800446c:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 800446e:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004470:	2300      	movs	r3, #0
 8004472:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004474:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004476:	3380      	adds	r3, #128	; 0x80
 8004478:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004480:	2320      	movs	r3, #32
 8004482:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004488:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800448a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800448c:	f7fe fd30 	bl	8002ef0 <HAL_DMA_Init>
 8004490:	2800      	cmp	r0, #0
 8004492:	d001      	beq.n	8004498 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8004494:	f000 fb56 	bl	8004b44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8004498:	63ec      	str	r4, [r5, #60]	; 0x3c
 800449a:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800449c:	b008      	add	sp, #32
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	40012400 	.word	0x40012400
 80044a4:	40021000 	.word	0x40021000
 80044a8:	20000064 	.word	0x20000064
 80044ac:	40020008 	.word	0x40020008

080044b0 <MX_ADC_Init>:
{
 80044b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80044b2:	220c      	movs	r2, #12
 80044b4:	2100      	movs	r1, #0
 80044b6:	a801      	add	r0, sp, #4
 80044b8:	f000 fe77 	bl	80051aa <memset>
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80044bc:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 80044be:	4c1e      	ldr	r4, [pc, #120]	; (8004538 <MX_ADC_Init+0x88>)
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <MX_ADC_Init+0x8c>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80044c2:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 80044c4:	6222      	str	r2, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044c6:	22c2      	movs	r2, #194	; 0xc2
 80044c8:	32ff      	adds	r2, #255	; 0xff
 80044ca:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80044cc:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 80044ce:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044d0:	2108      	movs	r1, #8
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80044d2:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80044d4:	00d2      	lsls	r2, r2, #3
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80044d6:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80044d8:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80044da:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044dc:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044de:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80044e0:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80044e2:	61e3      	str	r3, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80044e4:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80044e6:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80044e8:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80044ea:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80044ec:	f7fe fa90 	bl	8002a10 <HAL_ADC_Init>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d001      	beq.n	80044f8 <MX_ADC_Init+0x48>
    Error_Handler();
 80044f4:	f000 fb26 	bl	8004b44 <Error_Handler>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	015b      	lsls	r3, r3, #5
 80044fc:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	055b      	lsls	r3, r3, #21
 8004502:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_6;
 8004504:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004506:	a901      	add	r1, sp, #4
 8004508:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 800450a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800450c:	f7fe fbd2 	bl	8002cb4 <HAL_ADC_ConfigChannel>
 8004510:	2800      	cmp	r0, #0
 8004512:	d001      	beq.n	8004518 <MX_ADC_Init+0x68>
    Error_Handler();
 8004514:	f000 fb16 	bl	8004b44 <Error_Handler>
  HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8004518:	2200      	movs	r2, #0
 800451a:	2101      	movs	r1, #1
 800451c:	200c      	movs	r0, #12
 800451e:	f7fe fc93 	bl	8002e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004522:	200c      	movs	r0, #12
 8004524:	f7fe fcc0 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
  HAL_ADCEx_Calibration_Start(&hadc);
 8004528:	0020      	movs	r0, r4
 800452a:	f7fe fc39 	bl	8002da0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_MspInit(&hadc);
 800452e:	0020      	movs	r0, r4
 8004530:	f7ff ff6a 	bl	8004408 <HAL_ADC_MspInit>
}
 8004534:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	200000ac 	.word	0x200000ac
 800453c:	40012400 	.word	0x40012400

08004540 <UpdateWaveform>:
  * @brief Function to update a specific phase waveform
  * @param phase to update
  * @retval none
  */
void UpdateWaveform(phase_t phase)
{
 8004540:	b570      	push	{r4, r5, r6, lr}
	switch(phase)
 8004542:	2800      	cmp	r0, #0
 8004544:	d003      	beq.n	800454e <UpdateWaveform+0xe>
 8004546:	2801      	cmp	r0, #1
 8004548:	d100      	bne.n	800454c <UpdateWaveform+0xc>
 800454a:	e07e      	b.n	800464a <UpdateWaveform+0x10a>
	case phase_W:
		return;
	default:
		return;
	}
}
 800454c:	bd70      	pop	{r4, r5, r6, pc}
	    if(waveformU_state == waveform_running)
 800454e:	4a5b      	ldr	r2, [pc, #364]	; (80046bc <UpdateWaveform+0x17c>)
 8004550:	7813      	ldrb	r3, [r2, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d14d      	bne.n	80045f2 <UpdateWaveform+0xb2>
	        waveformU_switchCount++;
 8004556:	4c5a      	ldr	r4, [pc, #360]	; (80046c0 <UpdateWaveform+0x180>)
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8004558:	495a      	ldr	r1, [pc, #360]	; (80046c4 <UpdateWaveform+0x184>)
	        waveformU_switchCount++;
 800455a:	6823      	ldr	r3, [r4, #0]
	        if(waveformU_switchCount >= waveform_maxSwitches)
 800455c:	680e      	ldr	r6, [r1, #0]
	        waveformU_switchCount++;
 800455e:	3301      	adds	r3, #1
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	4959      	ldr	r1, [pc, #356]	; (80046c8 <UpdateWaveform+0x188>)
 8004564:	4d59      	ldr	r5, [pc, #356]	; (80046cc <UpdateWaveform+0x18c>)
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8004566:	42b3      	cmp	r3, r6
 8004568:	d311      	bcc.n	800458e <UpdateWaveform+0x4e>
	        	if(phaseU_low_state == switchOff)
 800456a:	4e59      	ldr	r6, [pc, #356]	; (80046d0 <UpdateWaveform+0x190>)
 800456c:	7833      	ldrb	r3, [r6, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d132      	bne.n	80045d8 <UpdateWaveform+0x98>
	        		phaseU_low_state = switchClosing;
 8004572:	2002      	movs	r0, #2
 8004574:	7030      	strb	r0, [r6, #0]
	        		TIM1->CCR1 = 0;
 8004576:	4e57      	ldr	r6, [pc, #348]	; (80046d4 <UpdateWaveform+0x194>)
	        		phaseU_high_state = switchOff;
 8004578:	700b      	strb	r3, [r1, #0]
	        		TIM1->CCR1 = 0;
 800457a:	6373      	str	r3, [r6, #52]	; 0x34
	        		phaseV_low_state = switchOff;
 800457c:	4e56      	ldr	r6, [pc, #344]	; (80046d8 <UpdateWaveform+0x198>)
 800457e:	7033      	strb	r3, [r6, #0]
	        		TIM3->CCR2 = 0;
 8004580:	4e56      	ldr	r6, [pc, #344]	; (80046dc <UpdateWaveform+0x19c>)
 8004582:	63b3      	str	r3, [r6, #56]	; 0x38
	        		phaseV_high_state = switchClosing;
 8004584:	7028      	strb	r0, [r5, #0]
	        	waveformU_switchCount = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	6023      	str	r3, [r4, #0]
	        	waveformU_state = waveform_deadTime;
 800458a:	3302      	adds	r3, #2
 800458c:	7013      	strb	r3, [r2, #0]
	        if(phaseU_high_state == switchOn)
 800458e:	780b      	ldrb	r3, [r1, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10e      	bne.n	80045b2 <UpdateWaveform+0x72>
	        	float pwm_target = waveformAmplitude * sine_lookup[waveformU_switchCount];
 8004594:	4b52      	ldr	r3, [pc, #328]	; (80046e0 <UpdateWaveform+0x1a0>)
 8004596:	8818      	ldrh	r0, [r3, #0]
 8004598:	f7fc fb54 	bl	8000c44 <__aeabi_i2f>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	4a51      	ldr	r2, [pc, #324]	; (80046e4 <UpdateWaveform+0x1a4>)
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	5899      	ldr	r1, [r3, r2]
 80045a4:	f7fc f872 	bl	800068c <__aeabi_fmul>
	        	TIM1->CCR1 = (uint16_t) pwm_target;
 80045a8:	f7fb ffb0 	bl	800050c <__aeabi_f2uiz>
 80045ac:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <UpdateWaveform+0x194>)
 80045ae:	b280      	uxth	r0, r0
 80045b0:	6358      	str	r0, [r3, #52]	; 0x34
	        if(phaseV_high_state == switchOn)
 80045b2:	782b      	ldrb	r3, [r5, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d1c9      	bne.n	800454c <UpdateWaveform+0xc>
	        	float pwm_target = waveformAmplitude * sine_lookup[waveformU_switchCount];
 80045b8:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <UpdateWaveform+0x1a0>)
 80045ba:	8818      	ldrh	r0, [r3, #0]
 80045bc:	f7fc fb42 	bl	8000c44 <__aeabi_i2f>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	4a48      	ldr	r2, [pc, #288]	; (80046e4 <UpdateWaveform+0x1a4>)
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	5899      	ldr	r1, [r3, r2]
 80045c8:	f7fc f860 	bl	800068c <__aeabi_fmul>
	        	TIM1->CCR2 = (uint16_t) pwm_target;
 80045cc:	f7fb ff9e 	bl	800050c <__aeabi_f2uiz>
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <UpdateWaveform+0x194>)
 80045d2:	b280      	uxth	r0, r0
 80045d4:	6398      	str	r0, [r3, #56]	; 0x38
 80045d6:	e7b9      	b.n	800454c <UpdateWaveform+0xc>
	        	else if(phaseU_low_state == switchOn)
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d1d4      	bne.n	8004586 <UpdateWaveform+0x46>
	        		TIM3->CCR1 = 0;
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <UpdateWaveform+0x19c>)
	        		phaseU_low_state = switchOff;
 80045de:	7030      	strb	r0, [r6, #0]
	        		TIM3->CCR1 = 0;
 80045e0:	6358      	str	r0, [r3, #52]	; 0x34
	        		phaseU_high_state = switchClosing;
 80045e2:	2302      	movs	r3, #2
	        		phaseV_low_state = switchClosing;
 80045e4:	4e3c      	ldr	r6, [pc, #240]	; (80046d8 <UpdateWaveform+0x198>)
	        		phaseU_high_state = switchClosing;
 80045e6:	700b      	strb	r3, [r1, #0]
	        		phaseV_low_state = switchClosing;
 80045e8:	7033      	strb	r3, [r6, #0]
	        		TIM1->CCR2 = 0;
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <UpdateWaveform+0x194>)
	        		phaseV_high_state = switchOff;
 80045ec:	7028      	strb	r0, [r5, #0]
	        		TIM1->CCR2 = 0;
 80045ee:	6398      	str	r0, [r3, #56]	; 0x38
 80045f0:	e7c9      	b.n	8004586 <UpdateWaveform+0x46>
	    else if(waveformU_state == waveform_deadTime)
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d1aa      	bne.n	800454c <UpdateWaveform+0xc>
	        waveformU_switchCount++;
 80045f6:	4932      	ldr	r1, [pc, #200]	; (80046c0 <UpdateWaveform+0x180>)
 80045f8:	680b      	ldr	r3, [r1, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	600b      	str	r3, [r1, #0]
	        if(waveformU_switchCount >= WAVEFORM_DEADTIME)
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0a4      	beq.n	800454c <UpdateWaveform+0xc>
	        	if(phaseU_low_state == switchClosing)
 8004602:	4b33      	ldr	r3, [pc, #204]	; (80046d0 <UpdateWaveform+0x190>)
 8004604:	7818      	ldrb	r0, [r3, #0]
 8004606:	2802      	cmp	r0, #2
 8004608:	d105      	bne.n	8004616 <UpdateWaveform+0xd6>
	        		TIM3->CCR1 = TIM_PERIOD;
 800460a:	24c8      	movs	r4, #200	; 0xc8
 800460c:	4833      	ldr	r0, [pc, #204]	; (80046dc <UpdateWaveform+0x19c>)
 800460e:	00a4      	lsls	r4, r4, #2
 8004610:	6344      	str	r4, [r0, #52]	; 0x34
	        		phaseU_low_state = switchOn;
 8004612:	2001      	movs	r0, #1
 8004614:	7018      	strb	r0, [r3, #0]
	        	if(phaseU_high_state == switchClosing)
 8004616:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <UpdateWaveform+0x188>)
 8004618:	7818      	ldrb	r0, [r3, #0]
 800461a:	2802      	cmp	r0, #2
 800461c:	d101      	bne.n	8004622 <UpdateWaveform+0xe2>
	        		phaseU_high_state = switchOn;
 800461e:	3801      	subs	r0, #1
 8004620:	7018      	strb	r0, [r3, #0]
	        	if(phaseV_low_state == switchClosing)
 8004622:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <UpdateWaveform+0x198>)
 8004624:	7818      	ldrb	r0, [r3, #0]
 8004626:	2802      	cmp	r0, #2
 8004628:	d105      	bne.n	8004636 <UpdateWaveform+0xf6>
	        		TIM3->CCR2 = TIM_PERIOD;
 800462a:	24c8      	movs	r4, #200	; 0xc8
 800462c:	482b      	ldr	r0, [pc, #172]	; (80046dc <UpdateWaveform+0x19c>)
 800462e:	00a4      	lsls	r4, r4, #2
 8004630:	6384      	str	r4, [r0, #56]	; 0x38
	        		phaseV_low_state = switchOn;
 8004632:	2001      	movs	r0, #1
	        		phaseV_low_state = switchOn;
 8004634:	7018      	strb	r0, [r3, #0]
	        	if(phaseV_high_state == switchClosing)
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <UpdateWaveform+0x18c>)
 8004638:	7818      	ldrb	r0, [r3, #0]
 800463a:	2802      	cmp	r0, #2
 800463c:	d101      	bne.n	8004642 <UpdateWaveform+0x102>
	        		phaseV_high_state = switchOn;
 800463e:	3801      	subs	r0, #1
 8004640:	7018      	strb	r0, [r3, #0]
	        	waveformV_switchCount = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_running;
 8004646:	3301      	adds	r3, #1
 8004648:	e019      	b.n	800467e <UpdateWaveform+0x13e>
	    if(waveformV_state == waveform_running)
 800464a:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <UpdateWaveform+0x1a8>)
 800464c:	7813      	ldrb	r3, [r2, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d121      	bne.n	8004696 <UpdateWaveform+0x156>
	        waveformV_switchCount++;
 8004652:	4926      	ldr	r1, [pc, #152]	; (80046ec <UpdateWaveform+0x1ac>)
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8004654:	481b      	ldr	r0, [pc, #108]	; (80046c4 <UpdateWaveform+0x184>)
	        waveformV_switchCount++;
 8004656:	680b      	ldr	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8004658:	6800      	ldr	r0, [r0, #0]
	        waveformV_switchCount++;
 800465a:	3301      	adds	r3, #1
 800465c:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 800465e:	4283      	cmp	r3, r0
 8004660:	d200      	bcs.n	8004664 <UpdateWaveform+0x124>
 8004662:	e773      	b.n	800454c <UpdateWaveform+0xc>
	        	if(phaseV_low_state == switchOff)
 8004664:	481c      	ldr	r0, [pc, #112]	; (80046d8 <UpdateWaveform+0x198>)
 8004666:	7803      	ldrb	r3, [r0, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <UpdateWaveform+0x142>
	        		phaseV_low_state = switchClosing;
 800466c:	2402      	movs	r4, #2
 800466e:	7004      	strb	r4, [r0, #0]
	        		phaseV_high_state = switchOff;
 8004670:	4816      	ldr	r0, [pc, #88]	; (80046cc <UpdateWaveform+0x18c>)
 8004672:	7003      	strb	r3, [r0, #0]
	        		TIM1->CCR2 = 0;
 8004674:	4817      	ldr	r0, [pc, #92]	; (80046d4 <UpdateWaveform+0x194>)
 8004676:	6383      	str	r3, [r0, #56]	; 0x38
	        	waveformV_switchCount = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_deadTime;
 800467c:	3302      	adds	r3, #2
	        	waveformV_state = waveform_running;
 800467e:	7013      	strb	r3, [r2, #0]
 8004680:	e764      	b.n	800454c <UpdateWaveform+0xc>
	        	else if(phaseV_low_state == switchOn)
 8004682:	2b01      	cmp	r3, #1
 8004684:	d1f8      	bne.n	8004678 <UpdateWaveform+0x138>
	        		phaseV_low_state = switchOff;
 8004686:	2300      	movs	r3, #0
 8004688:	7003      	strb	r3, [r0, #0]
	        		TIM3->CCR2 = 0;
 800468a:	4814      	ldr	r0, [pc, #80]	; (80046dc <UpdateWaveform+0x19c>)
 800468c:	6383      	str	r3, [r0, #56]	; 0x38
	        		phaseV_high_state = switchClosing;
 800468e:	2002      	movs	r0, #2
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <UpdateWaveform+0x18c>)
 8004692:	7018      	strb	r0, [r3, #0]
 8004694:	e7f0      	b.n	8004678 <UpdateWaveform+0x138>
	    else if(waveformV_state == waveform_deadTime)
 8004696:	2b02      	cmp	r3, #2
 8004698:	d000      	beq.n	800469c <UpdateWaveform+0x15c>
 800469a:	e757      	b.n	800454c <UpdateWaveform+0xc>
	        waveformV_switchCount++;
 800469c:	4913      	ldr	r1, [pc, #76]	; (80046ec <UpdateWaveform+0x1ac>)
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= WAVEFORM_DEADTIME)
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d100      	bne.n	80046aa <UpdateWaveform+0x16a>
 80046a8:	e750      	b.n	800454c <UpdateWaveform+0xc>
	        	if(phaseV_low_state == switchClosing)
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <UpdateWaveform+0x198>)
 80046ac:	781c      	ldrb	r4, [r3, #0]
 80046ae:	2c02      	cmp	r4, #2
 80046b0:	d1c1      	bne.n	8004636 <UpdateWaveform+0xf6>
	        		TIM3->CCR2 = TIM_PERIOD;
 80046b2:	25c8      	movs	r5, #200	; 0xc8
 80046b4:	4c09      	ldr	r4, [pc, #36]	; (80046dc <UpdateWaveform+0x19c>)
 80046b6:	00ad      	lsls	r5, r5, #2
 80046b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80046ba:	e7bb      	b.n	8004634 <UpdateWaveform+0xf4>
 80046bc:	20000035 	.word	0x20000035
 80046c0:	2000003c 	.word	0x2000003c
 80046c4:	20000030 	.word	0x20000030
 80046c8:	20000034 	.word	0x20000034
 80046cc:	20001098 	.word	0x20001098
 80046d0:	20000024 	.word	0x20000024
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	20000038 	.word	0x20000038
 80046dc:	40000400 	.word	0x40000400
 80046e0:	20000026 	.word	0x20000026
 80046e4:	200000f8 	.word	0x200000f8
 80046e8:	2000002a 	.word	0x2000002a
 80046ec:	2000005c 	.word	0x2000005c

080046f0 <fast_sin>:
  * @brief Use the fast sin algorithm to calculate sin(x)
  * @param x = input to sin(x)
  * @retval floating point value of result
  */
float fast_sin(float x)
{
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	1c04      	adds	r4, r0, #0
	// If a value outside of -Pi - Pi is given, correct it
	if(x < -(PI))
 80046f4:	f7fe f816 	bl	8002724 <__aeabi_f2d>
 80046f8:	4a42      	ldr	r2, [pc, #264]	; (8004804 <fast_sin+0x114>)
 80046fa:	4b43      	ldr	r3, [pc, #268]	; (8004808 <fast_sin+0x118>)
 80046fc:	0006      	movs	r6, r0
 80046fe:	000f      	movs	r7, r1
 8004700:	f7fb fea2 	bl	8000448 <__aeabi_dcmplt>
 8004704:	2800      	cmp	r0, #0
 8004706:	d04e      	beq.n	80047a6 <fast_sin+0xb6>
	{
		x += TWO_PI;
 8004708:	4a40      	ldr	r2, [pc, #256]	; (800480c <fast_sin+0x11c>)
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <fast_sin+0x120>)
 800470c:	0030      	movs	r0, r6
 800470e:	0039      	movs	r1, r7
 8004710:	f7fc fb2e 	bl	8000d70 <__aeabi_dadd>
	}
	else if(x > PI)
	{
		x -= TWO_PI;
 8004714:	f7fe f858 	bl	80027c8 <__aeabi_d2f>
 8004718:	1c04      	adds	r4, r0, #0
	}

	// Compute the approximation of sine
	float sine;
	// Compute the brunt of the calculation using sin(x) ~ (4/pi)x +- (4/(pi^2))x^2
	if(x < 0)
 800471a:	2100      	movs	r1, #0
 800471c:	1c20      	adds	r0, r4, #0
 800471e:	f7fb fecd 	bl	80004bc <__aeabi_fcmplt>
 8004722:	2800      	cmp	r0, #0
 8004724:	d04e      	beq.n	80047c4 <fast_sin+0xd4>
	{
		sine = (FOUR_OVER_PI * x) + (FOUR_OVER_PI2 * x * x);
 8004726:	1c20      	adds	r0, r4, #0
 8004728:	f7fd fffc 	bl	8002724 <__aeabi_f2d>
 800472c:	0004      	movs	r4, r0
 800472e:	000d      	movs	r5, r1
 8004730:	4a38      	ldr	r2, [pc, #224]	; (8004814 <fast_sin+0x124>)
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <fast_sin+0x128>)
 8004734:	f7fd fa60 	bl	8001bf8 <__aeabi_dmul>
 8004738:	0022      	movs	r2, r4
 800473a:	002b      	movs	r3, r5
 800473c:	f7fd fa5c 	bl	8001bf8 <__aeabi_dmul>
 8004740:	4a36      	ldr	r2, [pc, #216]	; (800481c <fast_sin+0x12c>)
 8004742:	0006      	movs	r6, r0
 8004744:	000f      	movs	r7, r1
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <fast_sin+0x130>)
 8004748:	0020      	movs	r0, r4
 800474a:	0029      	movs	r1, r5
 800474c:	f7fd fa54 	bl	8001bf8 <__aeabi_dmul>
 8004750:	0002      	movs	r2, r0
 8004752:	000b      	movs	r3, r1
 8004754:	0030      	movs	r0, r6
 8004756:	0039      	movs	r1, r7
 8004758:	f7fc fb0a 	bl	8000d70 <__aeabi_dadd>
	}
	else
	{
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 800475c:	f7fe f834 	bl	80027c8 <__aeabi_d2f>
	}
	// Make the calculation more accurate by = .225 * (+-(sine)^2 - sine) + sine
    if (sine < 0)
 8004760:	2100      	movs	r1, #0
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 8004762:	1c04      	adds	r4, r0, #0
    if (sine < 0)
 8004764:	f7fb feaa 	bl	80004bc <__aeabi_fcmplt>
 8004768:	2800      	cmp	r0, #0
 800476a:	d047      	beq.n	80047fc <fast_sin+0x10c>
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * -1 * sine - sine) + sine;
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	18e0      	adds	r0, r4, r3
 8004772:	1c21      	adds	r1, r4, #0
    }
    else
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 8004774:	f7fb ff8a 	bl	800068c <__aeabi_fmul>
 8004778:	1c21      	adds	r1, r4, #0
 800477a:	f7fc f8a7 	bl	80008cc <__aeabi_fsub>
 800477e:	f7fd ffd1 	bl	8002724 <__aeabi_f2d>
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <fast_sin+0x134>)
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <fast_sin+0x138>)
 8004786:	f7fd fa37 	bl	8001bf8 <__aeabi_dmul>
 800478a:	0006      	movs	r6, r0
 800478c:	1c20      	adds	r0, r4, #0
 800478e:	000f      	movs	r7, r1
 8004790:	f7fd ffc8 	bl	8002724 <__aeabi_f2d>
 8004794:	0002      	movs	r2, r0
 8004796:	000b      	movs	r3, r1
 8004798:	0030      	movs	r0, r6
 800479a:	0039      	movs	r1, r7
 800479c:	f7fc fae8 	bl	8000d70 <__aeabi_dadd>
 80047a0:	f7fe f812 	bl	80027c8 <__aeabi_d2f>
    }
    // Return the calculated value
    return sine;
}
 80047a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(x > PI)
 80047a6:	4a17      	ldr	r2, [pc, #92]	; (8004804 <fast_sin+0x114>)
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <fast_sin+0x13c>)
 80047aa:	0030      	movs	r0, r6
 80047ac:	0039      	movs	r1, r7
 80047ae:	f7fb fe5f 	bl	8000470 <__aeabi_dcmpgt>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0b1      	beq.n	800471a <fast_sin+0x2a>
		x -= TWO_PI;
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <fast_sin+0x11c>)
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <fast_sin+0x120>)
 80047ba:	0030      	movs	r0, r6
 80047bc:	0039      	movs	r1, r7
 80047be:	f7fd fc9b 	bl	80020f8 <__aeabi_dsub>
 80047c2:	e7a7      	b.n	8004714 <fast_sin+0x24>
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 80047c4:	1c20      	adds	r0, r4, #0
 80047c6:	f7fd ffad 	bl	8002724 <__aeabi_f2d>
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <fast_sin+0x12c>)
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <fast_sin+0x130>)
 80047ce:	0004      	movs	r4, r0
 80047d0:	000d      	movs	r5, r1
 80047d2:	f7fd fa11 	bl	8001bf8 <__aeabi_dmul>
 80047d6:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <fast_sin+0x124>)
 80047d8:	0006      	movs	r6, r0
 80047da:	000f      	movs	r7, r1
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <fast_sin+0x128>)
 80047de:	0020      	movs	r0, r4
 80047e0:	0029      	movs	r1, r5
 80047e2:	f7fd fa09 	bl	8001bf8 <__aeabi_dmul>
 80047e6:	0022      	movs	r2, r4
 80047e8:	002b      	movs	r3, r5
 80047ea:	f7fd fa05 	bl	8001bf8 <__aeabi_dmul>
 80047ee:	0002      	movs	r2, r0
 80047f0:	000b      	movs	r3, r1
 80047f2:	0030      	movs	r0, r6
 80047f4:	0039      	movs	r1, r7
 80047f6:	f7fd fc7f 	bl	80020f8 <__aeabi_dsub>
 80047fa:	e7af      	b.n	800475c <fast_sin+0x6c>
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 80047fc:	1c21      	adds	r1, r4, #0
 80047fe:	1c20      	adds	r0, r4, #0
 8004800:	e7b8      	b.n	8004774 <fast_sin+0x84>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	53c8d4f1 	.word	0x53c8d4f1
 8004808:	c00921fb 	.word	0xc00921fb
 800480c:	5474a168 	.word	0x5474a168
 8004810:	401921fb 	.word	0x401921fb
 8004814:	62992759 	.word	0x62992759
 8004818:	3fd9f02f 	.word	0x3fd9f02f
 800481c:	6c8462a6 	.word	0x6c8462a6
 8004820:	3ff45f30 	.word	0x3ff45f30
 8004824:	cccccccd 	.word	0xcccccccd
 8004828:	3fcccccc 	.word	0x3fcccccc
 800482c:	400921fb 	.word	0x400921fb

08004830 <Create_SineTable>:
  * @brief Creates a lookup table for the sine wave
  * @param none
  * @retval none
  */
void Create_SineTable(void)
{
 8004830:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004832:	25fa      	movs	r5, #250	; 0xfa
{
 8004834:	2400      	movs	r4, #0
	{
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 8004836:	4e0c      	ldr	r6, [pc, #48]	; (8004868 <Create_SineTable+0x38>)
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004838:	00ad      	lsls	r5, r5, #2
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 800483a:	b2a0      	uxth	r0, r4
 800483c:	f7fc fa52 	bl	8000ce4 <__aeabi_ui2f>
 8004840:	f7fd ff70 	bl	8002724 <__aeabi_f2d>
 8004844:	4a09      	ldr	r2, [pc, #36]	; (800486c <Create_SineTable+0x3c>)
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <Create_SineTable+0x40>)
 8004848:	f7fd f9d6 	bl	8001bf8 <__aeabi_dmul>
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <Create_SineTable+0x44>)
 800484e:	2200      	movs	r2, #0
 8004850:	f7fc fd9e 	bl	8001390 <__aeabi_ddiv>
 8004854:	f7fd ffb8 	bl	80027c8 <__aeabi_d2f>
 8004858:	f7ff ff4a 	bl	80046f0 <fast_sin>
 800485c:	00a3      	lsls	r3, r4, #2
 800485e:	3401      	adds	r4, #1
 8004860:	50f0      	str	r0, [r6, r3]
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004862:	42ac      	cmp	r4, r5
 8004864:	d1e9      	bne.n	800483a <Create_SineTable+0xa>
	}
}
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	200000f8 	.word	0x200000f8
 800486c:	53c8d4f1 	.word	0x53c8d4f1
 8004870:	400921fb 	.word	0x400921fb
 8004874:	408f4000 	.word	0x408f4000

08004878 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004878:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800487a:	2001      	movs	r0, #1
 800487c:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <MX_DMA_Init+0x28>)
 800487e:	6951      	ldr	r1, [r2, #20]
 8004880:	4301      	orrs	r1, r0
 8004882:	6151      	str	r1, [r2, #20]
 8004884:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004888:	4003      	ands	r3, r0
 800488a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800488c:	0011      	movs	r1, r2
 800488e:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004890:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004892:	f7fe fad9 	bl	8002e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004896:	2009      	movs	r0, #9
 8004898:	f7fe fb06 	bl	8002ea8 <HAL_NVIC_EnableIRQ>

}
 800489c:	bd07      	pop	{r0, r1, r2, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	40021000 	.word	0x40021000

080048a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80048a4:	b500      	push	{lr}
 80048a6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	2214      	movs	r2, #20
 80048aa:	2100      	movs	r1, #0
 80048ac:	a803      	add	r0, sp, #12
 80048ae:	f000 fc7c 	bl	80051aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b2:	2080      	movs	r0, #128	; 0x80
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <MX_GPIO_Init+0x58>)
 80048b6:	0280      	lsls	r0, r0, #10
 80048b8:	6959      	ldr	r1, [r3, #20]
 80048ba:	4301      	orrs	r1, r0
 80048bc:	6159      	str	r1, [r3, #20]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c2:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c4:	9200      	str	r2, [sp, #0]
 80048c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c8:	6959      	ldr	r1, [r3, #20]
 80048ca:	02c0      	lsls	r0, r0, #11
 80048cc:	4301      	orrs	r1, r0
 80048ce:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d2:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d4:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d6:	4002      	ands	r2, r0
 80048d8:	9201      	str	r2, [sp, #4]
 80048da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048dc:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048de:	4808      	ldr	r0, [pc, #32]	; (8004900 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e0:	430a      	orrs	r2, r1
 80048e2:	615a      	str	r2, [r3, #20]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	400b      	ands	r3, r1
 80048e8:	9302      	str	r3, [sp, #8]
 80048ea:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 80048ec:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 80048f0:	01db      	lsls	r3, r3, #7
 80048f2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f4:	f7fe fb9e 	bl	8003034 <HAL_GPIO_Init>

}
 80048f8:	b009      	add	sp, #36	; 0x24
 80048fa:	bd00      	pop	{pc}
 80048fc:	40021000 	.word	0x40021000
 8004900:	48000400 	.word	0x48000400

08004904 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004904:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <MX_I2C1_Init+0x50>)
 8004908:	4c13      	ldr	r4, [pc, #76]	; (8004958 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800490a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 800490c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004910:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8004912:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004914:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004916:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8004918:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800491a:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800491c:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800491e:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004920:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004922:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004924:	f7fe fc36 	bl	8003194 <HAL_I2C_Init>
 8004928:	2800      	cmp	r0, #0
 800492a:	d001      	beq.n	8004930 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 800492c:	f000 f90a 	bl	8004b44 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004930:	2100      	movs	r1, #0
 8004932:	0020      	movs	r0, r4
 8004934:	f7fe fc84 	bl	8003240 <HAL_I2CEx_ConfigAnalogFilter>
 8004938:	2800      	cmp	r0, #0
 800493a:	d001      	beq.n	8004940 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 800493c:	f000 f902 	bl	8004b44 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004940:	2100      	movs	r1, #0
 8004942:	0020      	movs	r0, r4
 8004944:	f7fe fca2 	bl	800328c <HAL_I2CEx_ConfigDigitalFilter>
 8004948:	2800      	cmp	r0, #0
 800494a:	d001      	beq.n	8004950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800494c:	f000 f8fa 	bl	8004b44 <Error_Handler>
  }

}
 8004950:	bd10      	pop	{r4, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40005400 	.word	0x40005400
 8004958:	2000109c 	.word	0x2000109c
 800495c:	2000090e 	.word	0x2000090e

08004960 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004960:	b510      	push	{r4, lr}
 8004962:	0004      	movs	r4, r0
 8004964:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004966:	2214      	movs	r2, #20
 8004968:	2100      	movs	r1, #0
 800496a:	a803      	add	r0, sp, #12
 800496c:	f000 fc1d 	bl	80051aa <memset>
  if(i2cHandle->Instance==I2C1)
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_I2C_MspInit+0x60>)
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d120      	bne.n	80049ba <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	4c12      	ldr	r4, [pc, #72]	; (80049c4 <HAL_I2C_MspInit+0x64>)
 800497c:	02c9      	lsls	r1, r1, #11
 800497e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004980:	4811      	ldr	r0, [pc, #68]	; (80049c8 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004982:	430a      	orrs	r2, r1
 8004984:	6162      	str	r2, [r4, #20]
 8004986:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004988:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	400b      	ands	r3, r1
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004990:	23c0      	movs	r3, #192	; 0xc0
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004996:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004998:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800499a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499c:	3b11      	subs	r3, #17
 800499e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80049a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a4:	f7fe fb46 	bl	8003034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	69e2      	ldr	r2, [r4, #28]
 80049ac:	0389      	lsls	r1, r1, #14
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61e2      	str	r2, [r4, #28]
 80049b2:	69e3      	ldr	r3, [r4, #28]
 80049b4:	400b      	ands	r3, r1
 80049b6:	9302      	str	r3, [sp, #8]
 80049b8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80049ba:	b008      	add	sp, #32
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	40005400 	.word	0x40005400
 80049c4:	40021000 	.word	0x40021000
 80049c8:	48000400 	.word	0x48000400

080049cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049cc:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049ce:	2410      	movs	r4, #16
{
 80049d0:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049d2:	2230      	movs	r2, #48	; 0x30
 80049d4:	2100      	movs	r1, #0
 80049d6:	a808      	add	r0, sp, #32
 80049d8:	f000 fbe7 	bl	80051aa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049dc:	0022      	movs	r2, r4
 80049de:	2100      	movs	r1, #0
 80049e0:	4668      	mov	r0, sp
 80049e2:	f000 fbe2 	bl	80051aa <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049e6:	0022      	movs	r2, r4
 80049e8:	2100      	movs	r1, #0
 80049ea:	a804      	add	r0, sp, #16
 80049ec:	f000 fbdd 	bl	80051aa <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80049f0:	2312      	movs	r3, #18
 80049f2:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80049f4:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049f6:	2501      	movs	r5, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049f8:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80049fa:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80049fc:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049fe:	3c0e      	subs	r4, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a00:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a02:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004a04:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a06:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8004a08:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a0a:	f7fe fc63 	bl	80032d4 <HAL_RCC_OscConfig>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d000      	beq.n	8004a14 <SystemClock_Config+0x48>
 8004a12:	e7fe      	b.n	8004a12 <SystemClock_Config+0x46>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a14:	2307      	movs	r3, #7
							  |RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a16:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a18:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a1a:	0029      	movs	r1, r5
 8004a1c:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a1e:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a20:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a22:	f7fe fe6b 	bl	80036fc <HAL_RCC_ClockConfig>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d000      	beq.n	8004a2c <SystemClock_Config+0x60>
 8004a2a:	e7fe      	b.n	8004a2a <SystemClock_Config+0x5e>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004a2c:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a2e:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004a30:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a32:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004a34:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a36:	f7fe ff0d 	bl	8003854 <HAL_RCCEx_PeriphCLKConfig>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d000      	beq.n	8004a40 <SystemClock_Config+0x74>
 8004a3e:	e7fe      	b.n	8004a3e <SystemClock_Config+0x72>
	{
		Error_Handler();
	}
}
 8004a40:	b015      	add	sp, #84	; 0x54
 8004a42:	bd30      	pop	{r4, r5, pc}

08004a44 <main>:
	waveform_frequency = WAVEFORM_FREQ_HZ;
 8004a44:	2232      	movs	r2, #50	; 0x32
 8004a46:	4b21      	ldr	r3, [pc, #132]	; (8004acc <main+0x88>)
{
 8004a48:	b510      	push	{r4, lr}
	waveform_frequency = WAVEFORM_FREQ_HZ;
 8004a4a:	801a      	strh	r2, [r3, #0]
	waveform_maxSwitches = WAVEFORM_MAX_COUNT;
 8004a4c:	22fa      	movs	r2, #250	; 0xfa
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <main+0x8c>)
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	601a      	str	r2, [r3, #0]
	waveformU_switchCount = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <main+0x90>)
 8004a58:	6013      	str	r3, [r2, #0]
	waveformV_switchCount = 0;
 8004a5a:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <main+0x94>)
 8004a5c:	6013      	str	r3, [r2, #0]
	waveformW_switchCount = 0;
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <main+0x98>)
 8004a60:	6013      	str	r3, [r2, #0]
	phaseU_low_state = switchOff;
 8004a62:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <main+0x9c>)
 8004a64:	7013      	strb	r3, [r2, #0]
	phaseW_low_state = switchOff;
 8004a66:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <main+0xa0>)
 8004a68:	7013      	strb	r3, [r2, #0]
	phaseV_low_state = switchOff;
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <main+0xa4>)
 8004a6c:	7013      	strb	r3, [r2, #0]
	phaseU_high_state = switchOff;
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <main+0xa8>)
 8004a70:	7013      	strb	r3, [r2, #0]
	phaseW_high_state = switchOff;
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <main+0xac>)
 8004a74:	7013      	strb	r3, [r2, #0]
	phaseV_high_state = switchOff;
 8004a76:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <main+0xb0>)
 8004a78:	7013      	strb	r3, [r2, #0]
	waveformU_state = waveform_running;
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <main+0xb4>)
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	7013      	strb	r3, [r2, #0]
	waveformV_state = waveform_running;
 8004a80:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <main+0xb8>)
 8004a82:	7013      	strb	r3, [r2, #0]
	waveformW_state = waveform_running;
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <main+0xbc>)
 8004a86:	7013      	strb	r3, [r2, #0]
	waveformAmplitude = TIM_PERIOD / 2;
 8004a88:	22c8      	movs	r2, #200	; 0xc8
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <main+0xc0>)
 8004a8c:	0052      	lsls	r2, r2, #1
 8004a8e:	801a      	strh	r2, [r3, #0]
	Create_SineTable();
 8004a90:	f7ff fece 	bl	8004830 <Create_SineTable>
	HAL_Init();
 8004a94:	f7fd ff52 	bl	800293c <HAL_Init>
	SystemClock_Config();
 8004a98:	f7ff ff98 	bl	80049cc <SystemClock_Config>
	MX_GPIO_Init();
 8004a9c:	f7ff ff02 	bl	80048a4 <MX_GPIO_Init>
	MX_DMA_Init();
 8004aa0:	f7ff feea 	bl	8004878 <MX_DMA_Init>
	MX_ADC_Init();
 8004aa4:	f7ff fd04 	bl	80044b0 <MX_ADC_Init>
	MX_I2C1_Init();
 8004aa8:	f7ff ff2c 	bl	8004904 <MX_I2C1_Init>
	MX_TIM1_Init();
 8004aac:	f000 f9c8 	bl	8004e40 <MX_TIM1_Init>
	MX_TIM3_Init();
 8004ab0:	f000 fa52 	bl	8004f58 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8004ab4:	f000 facc 	bl	8005050 <MX_USART1_UART_Init>
	MX_TIM15_Init();
 8004ab8:	f000 f8c4 	bl	8004c44 <MX_TIM15_Init>
	if(HAL_ADC_Start_IT(&hadc) != HAL_OK)
 8004abc:	4812      	ldr	r0, [pc, #72]	; (8004b08 <main+0xc4>)
 8004abe:	f7fe f84d 	bl	8002b5c <HAL_ADC_Start_IT>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d000      	beq.n	8004ac8 <main+0x84>
 8004ac6:	e7fe      	b.n	8004ac6 <main+0x82>
 8004ac8:	e7fe      	b.n	8004ac8 <main+0x84>
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	2000002c 	.word	0x2000002c
 8004ad0:	20000030 	.word	0x20000030
 8004ad4:	2000003c 	.word	0x2000003c
 8004ad8:	2000005c 	.word	0x2000005c
 8004adc:	200000a8 	.word	0x200000a8
 8004ae0:	20000024 	.word	0x20000024
 8004ae4:	20000028 	.word	0x20000028
 8004ae8:	20000038 	.word	0x20000038
 8004aec:	20000034 	.word	0x20000034
 8004af0:	20000060 	.word	0x20000060
 8004af4:	20001098 	.word	0x20001098
 8004af8:	20000035 	.word	0x20000035
 8004afc:	2000002a 	.word	0x2000002a
 8004b00:	20000029 	.word	0x20000029
 8004b04:	20000026 	.word	0x20000026
 8004b08:	200000ac 	.word	0x200000ac

08004b0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	// Get the current ADC conversion
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <HAL_ADC_ConvCpltCallback+0x28>)
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_ADC_ConvCpltCallback+0x2c>)
 8004b10:	8810      	ldrh	r0, [r2, #0]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	0840      	lsrs	r0, r0, #1
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	18c0      	adds	r0, r0, r3
	waveformAmplitude = TIM_PERIOD * throttleValue / (2 *THROTTLE_MAX_VALUE);
 8004b1a:	23c8      	movs	r3, #200	; 0xc8
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004b1c:	b280      	uxth	r0, r0
	waveformAmplitude = TIM_PERIOD * throttleValue / (2 *THROTTLE_MAX_VALUE);
 8004b1e:	009b      	lsls	r3, r3, #2
{
 8004b20:	b510      	push	{r4, lr}
	waveformAmplitude = TIM_PERIOD * throttleValue / (2 *THROTTLE_MAX_VALUE);
 8004b22:	4906      	ldr	r1, [pc, #24]	; (8004b3c <HAL_ADC_ConvCpltCallback+0x30>)
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004b24:	8010      	strh	r0, [r2, #0]
	waveformAmplitude = TIM_PERIOD * throttleValue / (2 *THROTTLE_MAX_VALUE);
 8004b26:	4358      	muls	r0, r3
 8004b28:	f7fb fb8c 	bl	8000244 <__divsi3>
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_ADC_ConvCpltCallback+0x34>)
 8004b2e:	8018      	strh	r0, [r3, #0]
}
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	20000036 	.word	0x20000036
 8004b38:	40012400 	.word	0x40012400
 8004b3c:	00001ffe 	.word	0x00001ffe
 8004b40:	20000026 	.word	0x20000026

08004b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b44:	e7fe      	b.n	8004b44 <Error_Handler>
	...

08004b48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b48:	2001      	movs	r0, #1
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_MspInit+0x2c>)
{
 8004b4c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4e:	6999      	ldr	r1, [r3, #24]
 8004b50:	4301      	orrs	r1, r0
 8004b52:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b54:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b56:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5a:	4002      	ands	r2, r0
 8004b5c:	9200      	str	r2, [sp, #0]
 8004b5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	400b      	ands	r3, r1
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b6e:	b002      	add	sp, #8
 8004b70:	4770      	bx	lr
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	40021000 	.word	0x40021000

08004b78 <NMI_Handler>:
 8004b78:	4770      	bx	lr

08004b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b7a:	e7fe      	b.n	8004b7a <HardFault_Handler>

08004b7c <SVC_Handler>:
 8004b7c:	4770      	bx	lr

08004b7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b7e:	4770      	bx	lr

08004b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b82:	f7fd feeb 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004b8a:	4802      	ldr	r0, [pc, #8]	; (8004b94 <DMA1_Channel1_IRQHandler+0xc>)
 8004b8c:	f7fe fa09 	bl	8002fa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b90:	bd10      	pop	{r4, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	20000064 	.word	0x20000064

08004b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b9a:	4802      	ldr	r0, [pc, #8]	; (8004ba4 <USART1_IRQHandler+0xc>)
 8004b9c:	f7ff fba8 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	200011a8 	.word	0x200011a8

08004ba8 <TIM3_IRQHandler>:
// Interrupt handler
void TIM3_IRQHandler(void)
{

	// Check for CC1 interrupt
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8004ba8:	2202      	movs	r2, #2
{
 8004baa:	b510      	push	{r4, lr}
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8004bac:	4c08      	ldr	r4, [pc, #32]	; (8004bd0 <TIM3_IRQHandler+0x28>)
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6919      	ldr	r1, [r3, #16]
 8004bb2:	4211      	tst	r1, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM3_IRQHandler+0x26>
	{
		if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) !=RESET)
 8004bb6:	68d9      	ldr	r1, [r3, #12]
 8004bb8:	4211      	tst	r1, r2
 8004bba:	d008      	beq.n	8004bce <TIM3_IRQHandler+0x26>
		{
			// Clear the interrupt
		    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 8004bbc:	3a05      	subs	r2, #5
 8004bbe:	611a      	str	r2, [r3, #16]
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc0:	2301      	movs	r3, #1

		    UpdateWaveform(phase_U);
 8004bc2:	2000      	movs	r0, #0
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc4:	7723      	strb	r3, [r4, #28]
		    UpdateWaveform(phase_U);
 8004bc6:	f7ff fcbb 	bl	8004540 <UpdateWaveform>

			htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	7723      	strb	r3, [r4, #28]
		}
	}

}
 8004bce:	bd10      	pop	{r4, pc}
 8004bd0:	20001128 	.word	0x20001128

08004bd4 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8004bd4:	b510      	push	{r4, lr}

	HAL_ADC_IRQHandler(&hadc);
 8004bd6:	4802      	ldr	r0, [pc, #8]	; (8004be0 <ADC1_IRQHandler+0xc>)
 8004bd8:	f7fd fffc 	bl	8002bd4 <HAL_ADC_IRQHandler>
}
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	200000ac 	.word	0x200000ac

08004be4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004be4:	2101      	movs	r1, #1
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004be8:	4811      	ldr	r0, [pc, #68]	; (8004c30 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4002      	ands	r2, r0
 8004bf4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	480e      	ldr	r0, [pc, #56]	; (8004c34 <SystemInit+0x50>)
 8004bfa:	4002      	ands	r2, r0
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <SystemInit+0x54>)
 8004c02:	4002      	ands	r2, r0
 8004c04:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	480c      	ldr	r0, [pc, #48]	; (8004c3c <SystemInit+0x58>)
 8004c0a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004c0c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004c0e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4382      	bics	r2, r0
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8004c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <SystemInit+0x5c>)
 8004c1a:	4002      	ands	r2, r0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	438a      	bics	r2, r1
 8004c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]

}
 8004c28:	4770      	bx	lr
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	08ffb80c 	.word	0x08ffb80c
 8004c34:	fef6ffff 	.word	0xfef6ffff
 8004c38:	fffbffff 	.word	0xfffbffff
 8004c3c:	ffc0ffff 	.word	0xffc0ffff
 8004c40:	fffffeec 	.word	0xfffffeec

08004c44 <MX_TIM15_Init>:
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004c44:	b530      	push	{r4, r5, lr}
 8004c46:	b093      	sub	sp, #76	; 0x4c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c48:	2208      	movs	r2, #8
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	a802      	add	r0, sp, #8
 8004c4e:	f000 faac 	bl	80051aa <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004c52:	221c      	movs	r2, #28
 8004c54:	2100      	movs	r1, #0
 8004c56:	a804      	add	r0, sp, #16
 8004c58:	f000 faa7 	bl	80051aa <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c5c:	221c      	movs	r2, #28
 8004c5e:	2100      	movs	r1, #0
 8004c60:	a80b      	add	r0, sp, #44	; 0x2c
 8004c62:	f000 faa2 	bl	80051aa <memset>

	htim15.Instance = TIM15;
 8004c66:	4d2b      	ldr	r5, [pc, #172]	; (8004d14 <MX_TIM15_Init+0xd0>)
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <MX_TIM15_Init+0xd4>)
	htim15.Init.Prescaler = 0;
 8004c6a:	2400      	movs	r4, #0
	htim15.Instance = TIM15;
 8004c6c:	602b      	str	r3, [r5, #0]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim15.Init.Period = 1000;
 8004c6e:	23fa      	movs	r3, #250	; 0xfa
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim15.Init.RepetitionCounter = 0;
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8004c70:	0028      	movs	r0, r5
	htim15.Init.Period = 1000;
 8004c72:	009b      	lsls	r3, r3, #2
	htim15.Init.Prescaler = 0;
 8004c74:	606c      	str	r4, [r5, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c76:	60ac      	str	r4, [r5, #8]
	htim15.Init.Period = 1000;
 8004c78:	60eb      	str	r3, [r5, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c7a:	612c      	str	r4, [r5, #16]
	htim15.Init.RepetitionCounter = 0;
 8004c7c:	616c      	str	r4, [r5, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c7e:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8004c80:	f7fe ff76 	bl	8003b70 <HAL_TIM_OC_Init>
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d001      	beq.n	8004c8c <MX_TIM15_Init+0x48>
	{
		Error_Handler();
 8004c88:	f7ff ff5c 	bl	8004b44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004c8c:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004c8e:	a902      	add	r1, sp, #8
 8004c90:	0028      	movs	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c92:	9402      	str	r4, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004c94:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004c96:	f7ff f8f3 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d001      	beq.n	8004ca2 <MX_TIM15_Init+0x5e>
	{
		Error_Handler();
 8004c9e:	f7ff ff51 	bl	8004b44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004ca2:	2400      	movs	r4, #0
	sConfigOC.Pulse = 500;
 8004ca4:	23fa      	movs	r3, #250	; 0xfa
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ca6:	0022      	movs	r2, r4
	sConfigOC.Pulse = 500;
 8004ca8:	005b      	lsls	r3, r3, #1
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004caa:	a904      	add	r1, sp, #16
 8004cac:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004cae:	9404      	str	r4, [sp, #16]
	sConfigOC.Pulse = 500;
 8004cb0:	9305      	str	r3, [sp, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cb2:	9406      	str	r4, [sp, #24]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cb4:	9407      	str	r4, [sp, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cb6:	9408      	str	r4, [sp, #32]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cb8:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cba:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cbc:	f7fe ffce 	bl	8003c5c <HAL_TIM_OC_ConfigChannel>
 8004cc0:	42a0      	cmp	r0, r4
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM15_Init+0x84>
	{
		Error_Handler();
 8004cc4:	f7ff ff3e 	bl	8004b44 <Error_Handler>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cc8:	2380      	movs	r3, #128	; 0x80
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004cca:	a90b      	add	r1, sp, #44	; 0x2c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ccc:	019b      	lsls	r3, r3, #6
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004cce:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cd0:	940b      	str	r4, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004cd2:	940c      	str	r4, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cd4:	940d      	str	r4, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.DeadTime = 0;
 8004cd6:	940e      	str	r4, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cd8:	940f      	str	r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cda:	9310      	str	r3, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cdc:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004cde:	f7ff f8f1 	bl	8003ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM15_Init+0xa6>
	{
		Error_Handler();
 8004ce6:	f7ff ff2d 	bl	8004b44 <Error_Handler>
	}

	// Enable clock tree
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004cea:	2080      	movs	r0, #128	; 0x80
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <MX_TIM15_Init+0xd8>)
 8004cee:	0240      	lsls	r0, r0, #9
 8004cf0:	6991      	ldr	r1, [r2, #24]
 8004cf2:	4301      	orrs	r1, r0
 8004cf4:	6191      	str	r1, [r2, #24]
 8004cf6:	6993      	ldr	r3, [r2, #24]

	// Start Waveform
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004cf8:	2100      	movs	r1, #0
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004cfa:	4003      	ands	r3, r0
 8004cfc:	9301      	str	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004cfe:	0028      	movs	r0, r5
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004d00:	9b01      	ldr	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004d02:	f7ff f875 	bl	8003df0 <HAL_TIM_OC_Start>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d001      	beq.n	8004d0e <MX_TIM15_Init+0xca>
	{
		Error_Handler();
 8004d0a:	f7ff ff1b 	bl	8004b44 <Error_Handler>
	}
}
 8004d0e:	b013      	add	sp, #76	; 0x4c
 8004d10:	bd30      	pop	{r4, r5, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	200010e8 	.word	0x200010e8
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40021000 	.word	0x40021000

08004d20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8004d20:	6803      	ldr	r3, [r0, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <HAL_TIM_PWM_MspInit+0x3c>)
{
 8004d24:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10b      	bne.n	8004d42 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d2a:	2080      	movs	r0, #128	; 0x80
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <HAL_TIM_PWM_MspInit+0x40>)
 8004d2e:	0100      	lsls	r0, r0, #4
 8004d30:	6991      	ldr	r1, [r2, #24]
 8004d32:	4301      	orrs	r1, r0
 8004d34:	6191      	str	r1, [r2, #24]
 8004d36:	6993      	ldr	r3, [r2, #24]
 8004d38:	4003      	ands	r3, r0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004d3e:	b002      	add	sp, #8
 8004d40:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_TIM_PWM_MspInit+0x44>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d1fa      	bne.n	8004d3e <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d48:	2002      	movs	r0, #2
 8004d4a:	4a05      	ldr	r2, [pc, #20]	; (8004d60 <HAL_TIM_PWM_MspInit+0x40>)
 8004d4c:	69d1      	ldr	r1, [r2, #28]
 8004d4e:	4301      	orrs	r1, r0
 8004d50:	61d1      	str	r1, [r2, #28]
 8004d52:	69d3      	ldr	r3, [r2, #28]
 8004d54:	4003      	ands	r3, r0
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	9b01      	ldr	r3, [sp, #4]
}
 8004d5a:	e7f0      	b.n	8004d3e <HAL_TIM_PWM_MspInit+0x1e>
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40000400 	.word	0x40000400

08004d68 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM15)
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <HAL_TIM_OC_MspInit+0x24>)
 8004d6a:	6802      	ldr	r2, [r0, #0]
{
 8004d6c:	b082      	sub	sp, #8
  if(tim_ocHandle->Instance==TIM15)
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d109      	bne.n	8004d86 <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d72:	2080      	movs	r0, #128	; 0x80
 8004d74:	4a06      	ldr	r2, [pc, #24]	; (8004d90 <HAL_TIM_OC_MspInit+0x28>)
 8004d76:	0240      	lsls	r0, r0, #9
 8004d78:	6991      	ldr	r1, [r2, #24]
 8004d7a:	4301      	orrs	r1, r0
 8004d7c:	6191      	str	r1, [r2, #24]
 8004d7e:	6993      	ldr	r3, [r2, #24]
 8004d80:	4003      	ands	r3, r0
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004d86:	b002      	add	sp, #8
 8004d88:	4770      	bx	lr
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40021000 	.word	0x40021000

08004d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d94:	b510      	push	{r4, lr}
 8004d96:	0004      	movs	r4, r0
 8004d98:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d9a:	2214      	movs	r2, #20
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	a803      	add	r0, sp, #12
 8004da0:	f000 fa03 	bl	80051aa <memset>
  if(timHandle->Instance==TIM1)
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <HAL_TIM_MspPostInit+0x98>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d116      	bne.n	8004dda <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dac:	2080      	movs	r0, #128	; 0x80
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_TIM_MspPostInit+0x9c>)
 8004db0:	0280      	lsls	r0, r0, #10
 8004db2:	6951      	ldr	r1, [r2, #20]
 8004db4:	4301      	orrs	r1, r0
 8004db6:	6151      	str	r1, [r2, #20]
 8004db8:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dba:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dbc:	4003      	ands	r3, r0
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
 8004dc2:	23e0      	movs	r3, #224	; 0xe0
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dcc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004dd0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd2:	f7fe f92f 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dd6:	b008      	add	sp, #32
 8004dd8:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIM_MspPostInit+0xa0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d1fa      	bne.n	8004dd6 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de0:	2080      	movs	r0, #128	; 0x80
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_TIM_MspPostInit+0x9c>)
 8004de4:	02c0      	lsls	r0, r0, #11
 8004de6:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dea:	4301      	orrs	r1, r0
 8004dec:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df0:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df2:	0309      	lsls	r1, r1, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df4:	4002      	ands	r2, r0
 8004df6:	9201      	str	r2, [sp, #4]
 8004df8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dfa:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004dfc:	480e      	ldr	r0, [pc, #56]	; (8004e38 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	615a      	str	r2, [r3, #20]
 8004e02:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e06:	400b      	ands	r3, r1
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004e0c:	2301      	movs	r3, #1
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004e0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004e12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004e14:	f7fe f90e 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 8004e18:	23c0      	movs	r3, #192	; 0xc0
 8004e1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004e24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e26:	a903      	add	r1, sp, #12
 8004e28:	4804      	ldr	r0, [pc, #16]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004e2a:	e7d2      	b.n	8004dd2 <HAL_TIM_MspPostInit+0x3e>
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	48000400 	.word	0x48000400
 8004e3c:	48000800 	.word	0x48000800

08004e40 <MX_TIM1_Init>:
{
 8004e40:	b530      	push	{r4, r5, lr}
 8004e42:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e44:	2208      	movs	r2, #8
 8004e46:	2100      	movs	r1, #0
 8004e48:	a801      	add	r0, sp, #4
 8004e4a:	f000 f9ae 	bl	80051aa <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004e4e:	221c      	movs	r2, #28
 8004e50:	2100      	movs	r1, #0
 8004e52:	a803      	add	r0, sp, #12
 8004e54:	f000 f9a9 	bl	80051aa <memset>
	htim1.Instance = TIM1;
 8004e58:	4c3c      	ldr	r4, [pc, #240]	; (8004f4c <MX_TIM1_Init+0x10c>)
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <MX_TIM1_Init+0x110>)
	htim1.Init.Prescaler = 0;
 8004e5c:	2500      	movs	r5, #0
	htim1.Instance = TIM1;
 8004e5e:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = TIM_PERIOD;
 8004e60:	23c8      	movs	r3, #200	; 0xc8
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	60e3      	str	r3, [r4, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e66:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e68:	0020      	movs	r0, r4
	htim1.Init.Prescaler = 0;
 8004e6a:	6065      	str	r5, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e6c:	60a5      	str	r5, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6e:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8004e70:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e72:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e74:	f7fe fe97 	bl	8003ba6 <HAL_TIM_PWM_Init>
 8004e78:	42a8      	cmp	r0, r5
 8004e7a:	d001      	beq.n	8004e80 <MX_TIM1_Init+0x40>
		Error_Handler();
 8004e7c:	f7ff fe62 	bl	8004b44 <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e80:	a901      	add	r1, sp, #4
 8004e82:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e84:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e86:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e88:	f7fe fffa 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_TIM1_Init+0x54>
		Error_Handler();
 8004e90:	f7ff fe58 	bl	8004b44 <Error_Handler>
	sConfigOC.Pulse = 0;
 8004e94:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e96:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e98:	a903      	add	r1, sp, #12
 8004e9a:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e9c:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8004e9e:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ea0:	9205      	str	r2, [sp, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ea2:	9206      	str	r2, [sp, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ea4:	9207      	str	r2, [sp, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ea6:	9208      	str	r2, [sp, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ea8:	9209      	str	r2, [sp, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eaa:	f7fe ff05 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d001      	beq.n	8004eb6 <MX_TIM1_Init+0x76>
		Error_Handler();
 8004eb2:	f7ff fe47 	bl	8004b44 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	a903      	add	r1, sp, #12
 8004eba:	0020      	movs	r0, r4
 8004ebc:	f7fe fefc 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM1_Init+0x88>
		Error_Handler();
 8004ec4:	f7ff fe3e 	bl	8004b44 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ec8:	2208      	movs	r2, #8
 8004eca:	a903      	add	r1, sp, #12
 8004ecc:	0020      	movs	r0, r4
 8004ece:	f7fe fef3 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d001      	beq.n	8004eda <MX_TIM1_Init+0x9a>
		Error_Handler();
 8004ed6:	f7ff fe35 	bl	8004b44 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004eda:	220c      	movs	r2, #12
 8004edc:	a903      	add	r1, sp, #12
 8004ede:	0020      	movs	r0, r4
 8004ee0:	f7fe feea 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d001      	beq.n	8004eec <MX_TIM1_Init+0xac>
		Error_Handler();
 8004ee8:	f7ff fe2c 	bl	8004b44 <Error_Handler>
	HAL_TIM_MspPostInit(&htim1);
 8004eec:	0020      	movs	r0, r4
 8004eee:	f7ff ff51 	bl	8004d94 <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004ef2:	2080      	movs	r0, #128	; 0x80
 8004ef4:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <MX_TIM1_Init+0x114>)
 8004ef6:	0100      	lsls	r0, r0, #4
 8004ef8:	6991      	ldr	r1, [r2, #24]
 8004efa:	4301      	orrs	r1, r0
 8004efc:	6191      	str	r1, [r2, #24]
 8004efe:	6993      	ldr	r3, [r2, #24]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004f00:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004f02:	4003      	ands	r3, r0
 8004f04:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004f06:	0020      	movs	r0, r4
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004f08:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004f0a:	f7fe ff4b 	bl	8003da4 <HAL_TIM_PWM_Start>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d001      	beq.n	8004f16 <MX_TIM1_Init+0xd6>
		Error_Handler();
 8004f12:	f7ff fe17 	bl	8004b44 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8004f16:	2104      	movs	r1, #4
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f7fe ff43 	bl	8003da4 <HAL_TIM_PWM_Start>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d001      	beq.n	8004f26 <MX_TIM1_Init+0xe6>
		Error_Handler();
 8004f22:	f7ff fe0f 	bl	8004b44 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8004f26:	2108      	movs	r1, #8
 8004f28:	0020      	movs	r0, r4
 8004f2a:	f7fe ff3b 	bl	8003da4 <HAL_TIM_PWM_Start>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d001      	beq.n	8004f36 <MX_TIM1_Init+0xf6>
		Error_Handler();
 8004f32:	f7ff fe07 	bl	8004b44 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004f36:	210c      	movs	r1, #12
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7fe ff33 	bl	8003da4 <HAL_TIM_PWM_Start>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d001      	beq.n	8004f46 <MX_TIM1_Init+0x106>
		Error_Handler();
 8004f42:	f7ff fdff 	bl	8004b44 <Error_Handler>
}
 8004f46:	b00b      	add	sp, #44	; 0x2c
 8004f48:	bd30      	pop	{r4, r5, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20001168 	.word	0x20001168
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40021000 	.word	0x40021000

08004f58 <MX_TIM3_Init>:
{
 8004f58:	b530      	push	{r4, r5, lr}
 8004f5a:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	2100      	movs	r1, #0
 8004f60:	a801      	add	r0, sp, #4
 8004f62:	f000 f922 	bl	80051aa <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004f66:	221c      	movs	r2, #28
 8004f68:	2100      	movs	r1, #0
 8004f6a:	a803      	add	r0, sp, #12
 8004f6c:	f000 f91d 	bl	80051aa <memset>
	htim3.Instance = TIM3;
 8004f70:	4c34      	ldr	r4, [pc, #208]	; (8005044 <MX_TIM3_Init+0xec>)
 8004f72:	4b35      	ldr	r3, [pc, #212]	; (8005048 <MX_TIM3_Init+0xf0>)
	htim3.Init.Prescaler = 0;
 8004f74:	2500      	movs	r5, #0
	htim3.Instance = TIM3;
 8004f76:	6023      	str	r3, [r4, #0]
	htim3.Init.Period = TIM_PERIOD;
 8004f78:	23c8      	movs	r3, #200	; 0xc8
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f7a:	0020      	movs	r0, r4
	htim3.Init.Period = TIM_PERIOD;
 8004f7c:	009b      	lsls	r3, r3, #2
	htim3.Init.Prescaler = 0;
 8004f7e:	6065      	str	r5, [r4, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f80:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = TIM_PERIOD;
 8004f82:	60e3      	str	r3, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f84:	6125      	str	r5, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f86:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f88:	f7fe fe0d 	bl	8003ba6 <HAL_TIM_PWM_Init>
 8004f8c:	42a8      	cmp	r0, r5
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM3_Init+0x3c>
		Error_Handler();
 8004f90:	f7ff fdd8 	bl	8004b44 <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f94:	a901      	add	r1, sp, #4
 8004f96:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f98:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9a:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f9c:	f7fe ff70 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM3_Init+0x50>
		Error_Handler();
 8004fa4:	f7ff fdce 	bl	8004b44 <Error_Handler>
	sConfigOC.Pulse = 0;
 8004fa8:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004faa:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fac:	a903      	add	r1, sp, #12
 8004fae:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fb0:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8004fb2:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fb4:	9205      	str	r2, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fb6:	9207      	str	r2, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fb8:	f7fe fe7e 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM3_Init+0x6c>
		Error_Handler();
 8004fc0:	f7ff fdc0 	bl	8004b44 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	a903      	add	r1, sp, #12
 8004fc8:	0020      	movs	r0, r4
 8004fca:	f7fe fe75 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8004fd2:	f7ff fdb7 	bl	8004b44 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	a903      	add	r1, sp, #12
 8004fda:	0020      	movs	r0, r4
 8004fdc:	f7fe fe6c 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_TIM3_Init+0x90>
		Error_Handler();
 8004fe4:	f7ff fdae 	bl	8004b44 <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8004fe8:	0020      	movs	r0, r4
 8004fea:	f7ff fed3 	bl	8004d94 <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004fee:	2002      	movs	r0, #2
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <MX_TIM3_Init+0xf4>)
 8004ff2:	69d1      	ldr	r1, [r2, #28]
 8004ff4:	4301      	orrs	r1, r0
 8004ff6:	61d1      	str	r1, [r2, #28]
 8004ff8:	69d3      	ldr	r3, [r2, #28]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8004ffa:	2100      	movs	r1, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004ffc:	4003      	ands	r3, r0
 8004ffe:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8005000:	0020      	movs	r0, r4
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005002:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8005004:	f7fe fef8 	bl	8003df8 <HAL_TIM_PWM_Start_IT>
 8005008:	2800      	cmp	r0, #0
 800500a:	d001      	beq.n	8005010 <MX_TIM3_Init+0xb8>
		Error_Handler();
 800500c:	f7ff fd9a 	bl	8004b44 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8005010:	2104      	movs	r1, #4
 8005012:	0020      	movs	r0, r4
 8005014:	f7fe fec6 	bl	8003da4 <HAL_TIM_PWM_Start>
 8005018:	2800      	cmp	r0, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM3_Init+0xc8>
		Error_Handler();
 800501c:	f7ff fd92 	bl	8004b44 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8005020:	2108      	movs	r1, #8
 8005022:	0020      	movs	r0, r4
 8005024:	f7fe febe 	bl	8003da4 <HAL_TIM_PWM_Start>
 8005028:	2800      	cmp	r0, #0
 800502a:	d001      	beq.n	8005030 <MX_TIM3_Init+0xd8>
		Error_Handler();
 800502c:	f7ff fd8a 	bl	8004b44 <Error_Handler>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005030:	2200      	movs	r2, #0
 8005032:	2010      	movs	r0, #16
 8005034:	0011      	movs	r1, r2
 8005036:	f7fd ff07 	bl	8002e48 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800503a:	2010      	movs	r0, #16
 800503c:	f7fd ff34 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
}
 8005040:	b00b      	add	sp, #44	; 0x2c
 8005042:	bd30      	pop	{r4, r5, pc}
 8005044:	20001128 	.word	0x20001128
 8005048:	40000400 	.word	0x40000400
 800504c:	40021000 	.word	0x40021000

08005050 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8005050:	480b      	ldr	r0, [pc, #44]	; (8005080 <MX_USART1_UART_Init+0x30>)
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <MX_USART1_UART_Init+0x34>)
{
 8005054:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8005056:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8005058:	2396      	movs	r3, #150	; 0x96
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800505e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005060:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005062:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005064:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005066:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005068:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800506a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800506c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800506e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005070:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005072:	f7ff f883 	bl	800417c <HAL_UART_Init>
 8005076:	2800      	cmp	r0, #0
 8005078:	d001      	beq.n	800507e <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 800507a:	f7ff fd63 	bl	8004b44 <Error_Handler>
  }

}
 800507e:	bd10      	pop	{r4, pc}
 8005080:	200011a8 	.word	0x200011a8
 8005084:	40013800 	.word	0x40013800

08005088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005088:	b510      	push	{r4, lr}
 800508a:	0004      	movs	r4, r0
 800508c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508e:	2214      	movs	r2, #20
 8005090:	2100      	movs	r1, #0
 8005092:	a803      	add	r0, sp, #12
 8005094:	f000 f889 	bl	80051aa <memset>
  if(uartHandle->Instance==USART1)
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_UART_MspInit+0x68>)
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d124      	bne.n	80050ea <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a0:	2080      	movs	r0, #128	; 0x80
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_UART_MspInit+0x6c>)
 80050a4:	01c0      	lsls	r0, r0, #7
 80050a6:	6999      	ldr	r1, [r3, #24]
 80050a8:	4301      	orrs	r1, r0
 80050aa:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ac:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80050ae:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b0:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 80050b2:	4002      	ands	r2, r0
 80050b4:	9201      	str	r2, [sp, #4]
 80050b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ba:	480f      	ldr	r0, [pc, #60]	; (80050f8 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050bc:	430a      	orrs	r2, r1
 80050be:	615a      	str	r2, [r3, #20]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	400b      	ands	r3, r1
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050c8:	23c0      	movs	r3, #192	; 0xc0
 80050ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050cc:	3bbe      	subs	r3, #190	; 0xbe
 80050ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050d2:	3301      	adds	r3, #1
 80050d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d6:	f7fd ffad 	bl	8003034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050da:	2200      	movs	r2, #0
 80050dc:	201b      	movs	r0, #27
 80050de:	0011      	movs	r1, r2
 80050e0:	f7fd feb2 	bl	8002e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050e4:	201b      	movs	r0, #27
 80050e6:	f7fd fedf 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050ea:	b008      	add	sp, #32
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	40013800 	.word	0x40013800
 80050f4:	40021000 	.word	0x40021000
 80050f8:	48000400 	.word	0x48000400

080050fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050fc:	480d      	ldr	r0, [pc, #52]	; (8005134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005100:	480d      	ldr	r0, [pc, #52]	; (8005138 <LoopForever+0x6>)
  ldr r1, =_edata
 8005102:	490e      	ldr	r1, [pc, #56]	; (800513c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005104:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <LoopForever+0xe>)
  movs r3, #0
 8005106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005108:	e002      	b.n	8005110 <LoopCopyDataInit>

0800510a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800510a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800510c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800510e:	3304      	adds	r3, #4

08005110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005114:	d3f9      	bcc.n	800510a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005118:	4c0b      	ldr	r4, [pc, #44]	; (8005148 <LoopForever+0x16>)
  movs r3, #0
 800511a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800511c:	e001      	b.n	8005122 <LoopFillZerobss>

0800511e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800511e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005120:	3204      	adds	r2, #4

08005122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005124:	d3fb      	bcc.n	800511e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005126:	f7ff fd5d 	bl	8004be4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800512a:	f000 f811 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800512e:	f7ff fc89 	bl	8004a44 <main>

08005132 <LoopForever>:

LoopForever:
    b LoopForever
 8005132:	e7fe      	b.n	8005132 <LoopForever>
  ldr   r0, =_estack
 8005134:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800513c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8005140:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 8005144:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8005148:	20001218 	.word	0x20001218

0800514c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800514c:	e7fe      	b.n	800514c <DMA1_Channel2_3_IRQHandler>
	...

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	2600      	movs	r6, #0
 8005154:	4d0c      	ldr	r5, [pc, #48]	; (8005188 <__libc_init_array+0x38>)
 8005156:	4c0d      	ldr	r4, [pc, #52]	; (800518c <__libc_init_array+0x3c>)
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	42a6      	cmp	r6, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	2600      	movs	r6, #0
 8005162:	f000 f82b 	bl	80051bc <_init>
 8005166:	4d0a      	ldr	r5, [pc, #40]	; (8005190 <__libc_init_array+0x40>)
 8005168:	4c0a      	ldr	r4, [pc, #40]	; (8005194 <__libc_init_array+0x44>)
 800516a:	1b64      	subs	r4, r4, r5
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	42a6      	cmp	r6, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	00b3      	lsls	r3, r6, #2
 8005176:	58eb      	ldr	r3, [r5, r3]
 8005178:	4798      	blx	r3
 800517a:	3601      	adds	r6, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	00b3      	lsls	r3, r6, #2
 8005180:	58eb      	ldr	r3, [r5, r3]
 8005182:	4798      	blx	r3
 8005184:	3601      	adds	r6, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	080052d0 	.word	0x080052d0
 800518c:	080052d0 	.word	0x080052d0
 8005190:	080052d0 	.word	0x080052d0
 8005194:	080052d4 	.word	0x080052d4

08005198 <memcpy>:
 8005198:	2300      	movs	r3, #0
 800519a:	b510      	push	{r4, lr}
 800519c:	429a      	cmp	r2, r3
 800519e:	d100      	bne.n	80051a2 <memcpy+0xa>
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	5ccc      	ldrb	r4, [r1, r3]
 80051a4:	54c4      	strb	r4, [r0, r3]
 80051a6:	3301      	adds	r3, #1
 80051a8:	e7f8      	b.n	800519c <memcpy+0x4>

080051aa <memset>:
 80051aa:	0003      	movs	r3, r0
 80051ac:	1882      	adds	r2, r0, r2
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d100      	bne.n	80051b4 <memset+0xa>
 80051b2:	4770      	bx	lr
 80051b4:	7019      	strb	r1, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	e7f9      	b.n	80051ae <memset+0x4>
	...

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
