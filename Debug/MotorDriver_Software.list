
MotorDriver_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002534  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080025f4  080025f4  000125f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  20000004  0800263c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000254  0800263c  00020254  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023f91  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003bac  00000000  00000000  00043fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b34c  00000000  00000000  00047b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cc8  00000000  00000000  00052eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012a0  00000000  00000000  00053b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000896d  00000000  00000000  00054e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000045f4  00000000  00000000  0005d78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00061d81  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002758  00000000  00000000  00061e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025dc 	.word	0x080025dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080025dc 	.word	0x080025dc

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f000 fe38 	bl	8000ec0 <HAL_RCC_GetHCLKFreq>
 8000250:	21fa      	movs	r1, #250	; 0xfa
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 f97c 	bl	8000554 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800025c:	2001      	movs	r0, #1
 800025e:	2200      	movs	r2, #0
 8000260:	0021      	movs	r1, r4
 8000262:	4240      	negs	r0, r0
 8000264:	f000 f93c 	bl	80004e0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	2310      	movs	r3, #16
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
{
 8000270:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	f7ff ffe5 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f001 fea5 	bl	8001fcc <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000020 	.word	0x20000020

080002a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80002ac:	2001      	movs	r0, #1
  if(hadc == NULL)
 80002ae:	2c00      	cmp	r4, #0
 80002b0:	d072      	beq.n	8000398 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002b8:	0022      	movs	r2, r4
 80002ba:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80002bc:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002be:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80002c0:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80002c2:	f001 fc5f 	bl	8001b84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002c8:	06db      	lsls	r3, r3, #27
 80002ca:	d500      	bpl.n	80002ce <HAL_ADC_Init+0x26>
 80002cc:	e079      	b.n	80003c2 <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002ce:	2204      	movs	r2, #4
 80002d0:	6823      	ldr	r3, [r4, #0]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80002d6:	d000      	beq.n	80002da <HAL_ADC_Init+0x32>
 80002d8:	e073      	b.n	80003c2 <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002dc:	4942      	ldr	r1, [pc, #264]	; (80003e8 <HAL_ADC_Init+0x140>)
 80002de:	4011      	ands	r1, r2
 80002e0:	2202      	movs	r2, #2
 80002e2:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002e4:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80002e6:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	400a      	ands	r2, r1
 80002ec:	2a01      	cmp	r2, #1
 80002ee:	d000      	beq.n	80002f2 <HAL_ADC_Init+0x4a>
 80002f0:	e06d      	b.n	80003ce <HAL_ADC_Init+0x126>
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	4211      	tst	r1, r2
 80002f6:	d102      	bne.n	80002fe <HAL_ADC_Init+0x56>
 80002f8:	68da      	ldr	r2, [r3, #12]
 80002fa:	0412      	lsls	r2, r2, #16
 80002fc:	d567      	bpl.n	80003ce <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	493a      	ldr	r1, [pc, #232]	; (80003ec <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000302:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000304:	400a      	ands	r2, r1
 8000306:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000308:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800030a:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800030c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800030e:	69e2      	ldr	r2, [r4, #28]
 8000310:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000312:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000314:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000316:	3a01      	subs	r2, #1
 8000318:	1e56      	subs	r6, r2, #1
 800031a:	41b2      	sbcs	r2, r6
 800031c:	0316      	lsls	r6, r2, #12
 800031e:	68e2      	ldr	r2, [r4, #12]
 8000320:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000322:	6922      	ldr	r2, [r4, #16]
 8000324:	430f      	orrs	r7, r1
 8000326:	2a02      	cmp	r2, #2
 8000328:	d100      	bne.n	800032c <HAL_ADC_Init+0x84>
 800032a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800032c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800032e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000330:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000332:	433a      	orrs	r2, r7
 8000334:	4332      	orrs	r2, r6
 8000336:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000338:	2901      	cmp	r1, #1
 800033a:	d104      	bne.n	8000346 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800033c:	2d00      	cmp	r5, #0
 800033e:	d12c      	bne.n	800039a <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	0249      	lsls	r1, r1, #9
 8000344:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000346:	20c2      	movs	r0, #194	; 0xc2
 8000348:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800034a:	30ff      	adds	r0, #255	; 0xff
 800034c:	4281      	cmp	r1, r0
 800034e:	d002      	beq.n	8000356 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000350:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000352:	4301      	orrs	r1, r0
 8000354:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000356:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000358:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800035a:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800035c:	4311      	orrs	r1, r2
 800035e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000360:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000362:	4281      	cmp	r1, r0
 8000364:	d002      	beq.n	800036c <HAL_ADC_Init+0xc4>
 8000366:	1e48      	subs	r0, r1, #1
 8000368:	2806      	cmp	r0, #6
 800036a:	d807      	bhi.n	800037c <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800036c:	2507      	movs	r5, #7
 800036e:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000370:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000372:	43a8      	bics	r0, r5
 8000374:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000376:	6958      	ldr	r0, [r3, #20]
 8000378:	4301      	orrs	r1, r0
 800037a:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	491c      	ldr	r1, [pc, #112]	; (80003f0 <HAL_ADC_Init+0x148>)
 8000380:	400b      	ands	r3, r1
 8000382:	429a      	cmp	r2, r3
 8000384:	d111      	bne.n	80003aa <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000386:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000388:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800038a:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800038c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800038e:	4393      	bics	r3, r2
 8000390:	001a      	movs	r2, r3
 8000392:	2301      	movs	r3, #1
 8000394:	4313      	orrs	r3, r2
 8000396:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800039a:	2020      	movs	r0, #32
 800039c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800039e:	4328      	orrs	r0, r5
 80003a0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80003a4:	4301      	orrs	r1, r0
 80003a6:	64a1      	str	r1, [r4, #72]	; 0x48
 80003a8:	e7cd      	b.n	8000346 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80003aa:	2212      	movs	r2, #18
 80003ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ae:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80003b0:	4393      	bics	r3, r2
 80003b2:	001a      	movs	r2, r3
 80003b4:	2310      	movs	r3, #16
 80003b6:	4313      	orrs	r3, r2
 80003b8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003bc:	4303      	orrs	r3, r0
 80003be:	64a3      	str	r3, [r4, #72]	; 0x48
 80003c0:	e7ea      	b.n	8000398 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003c2:	2310      	movs	r3, #16
 80003c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80003c6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003c8:	4313      	orrs	r3, r2
 80003ca:	6463      	str	r3, [r4, #68]	; 0x44
 80003cc:	e7e4      	b.n	8000398 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80003ce:	2118      	movs	r1, #24
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	438a      	bics	r2, r1
 80003d4:	68a1      	ldr	r1, [r4, #8]
 80003d6:	430a      	orrs	r2, r1
 80003d8:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003da:	6919      	ldr	r1, [r3, #16]
 80003dc:	6862      	ldr	r2, [r4, #4]
 80003de:	0089      	lsls	r1, r1, #2
 80003e0:	0889      	lsrs	r1, r1, #2
 80003e2:	4311      	orrs	r1, r2
 80003e4:	6119      	str	r1, [r3, #16]
 80003e6:	e78a      	b.n	80002fe <HAL_ADC_Init+0x56>
 80003e8:	fffffefd 	.word	0xfffffefd
 80003ec:	fffe0219 	.word	0xfffe0219
 80003f0:	833fffe7 	.word	0x833fffe7

080003f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80003f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80003f6:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003f8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80003fa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80003fc:	3440      	adds	r4, #64	; 0x40
 80003fe:	7823      	ldrb	r3, [r4, #0]
{
 8000400:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8000402:	2002      	movs	r0, #2
 8000404:	2b01      	cmp	r3, #1
 8000406:	d02b      	beq.n	8000460 <HAL_ADC_ConfigChannel+0x6c>
 8000408:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800040a:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800040c:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800040e:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000410:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000412:	0740      	lsls	r0, r0, #29
 8000414:	d452      	bmi.n	80004bc <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000416:	482c      	ldr	r0, [pc, #176]	; (80004c8 <HAL_ADC_ConfigChannel+0xd4>)
 8000418:	684f      	ldr	r7, [r1, #4]
 800041a:	680d      	ldr	r5, [r1, #0]
 800041c:	4287      	cmp	r7, r0
 800041e:	d03b      	beq.n	8000498 <HAL_ADC_ConfigChannel+0xa4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000420:	40ab      	lsls	r3, r5
 8000422:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000424:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000426:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000428:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800042a:	4338      	orrs	r0, r7
 800042c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800042e:	429e      	cmp	r6, r3
 8000430:	d00f      	beq.n	8000452 <HAL_ADC_ConfigChannel+0x5e>
 8000432:	3e01      	subs	r6, #1
 8000434:	2e06      	cmp	r6, #6
 8000436:	d90c      	bls.n	8000452 <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000438:	688b      	ldr	r3, [r1, #8]
 800043a:	2107      	movs	r1, #7
 800043c:	6950      	ldr	r0, [r2, #20]
 800043e:	4008      	ands	r0, r1
 8000440:	4283      	cmp	r3, r0
 8000442:	d006      	beq.n	8000452 <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000444:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000446:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000448:	4388      	bics	r0, r1
 800044a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800044c:	6950      	ldr	r0, [r2, #20]
 800044e:	4303      	orrs	r3, r0
 8000450:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000452:	002b      	movs	r3, r5
 8000454:	3b10      	subs	r3, #16
 8000456:	2b01      	cmp	r3, #1
 8000458:	d903      	bls.n	8000462 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800045a:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800045c:	2300      	movs	r3, #0
 800045e:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <HAL_ADC_ConfigChannel+0xd8>)
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	2d10      	cmp	r5, #16
 800046a:	d013      	beq.n	8000494 <HAL_ADC_ConfigChannel+0xa0>
 800046c:	03d2      	lsls	r2, r2, #15
 800046e:	430a      	orrs	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000472:	2d10      	cmp	r5, #16
 8000474:	d1f1      	bne.n	800045a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_ADC_ConfigChannel+0xdc>)
 8000478:	4916      	ldr	r1, [pc, #88]	; (80004d4 <HAL_ADC_ConfigChannel+0xe0>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	f7ff fe58 	bl	8000130 <__udivsi3>
 8000480:	230a      	movs	r3, #10
 8000482:	4358      	muls	r0, r3
 8000484:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000486:	9b01      	ldr	r3, [sp, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0e6      	beq.n	800045a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800048c:	9b01      	ldr	r3, [sp, #4]
 800048e:	3b01      	subs	r3, #1
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	e7f8      	b.n	8000486 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000494:	0412      	lsls	r2, r2, #16
 8000496:	e7ea      	b.n	800046e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000498:	40ab      	lsls	r3, r5
 800049a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800049c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800049e:	002b      	movs	r3, r5
 80004a0:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80004a2:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d8d8      	bhi.n	800045a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <HAL_ADC_ConfigChannel+0xd8>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	2d10      	cmp	r5, #16
 80004ae:	d003      	beq.n	80004b8 <HAL_ADC_ConfigChannel+0xc4>
 80004b0:	4909      	ldr	r1, [pc, #36]	; (80004d8 <HAL_ADC_ConfigChannel+0xe4>)
 80004b2:	400a      	ands	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	e7d0      	b.n	800045a <HAL_ADC_ConfigChannel+0x66>
 80004b8:	4908      	ldr	r1, [pc, #32]	; (80004dc <HAL_ADC_ConfigChannel+0xe8>)
 80004ba:	e7fa      	b.n	80004b2 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004bc:	2220      	movs	r2, #32
 80004be:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80004c0:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004c2:	430a      	orrs	r2, r1
 80004c4:	646a      	str	r2, [r5, #68]	; 0x44
 80004c6:	e7c9      	b.n	800045c <HAL_ADC_ConfigChannel+0x68>
 80004c8:	00001001 	.word	0x00001001
 80004cc:	40012708 	.word	0x40012708
 80004d0:	20000000 	.word	0x20000000
 80004d4:	000f4240 	.word	0x000f4240
 80004d8:	ffbfffff 	.word	0xffbfffff
 80004dc:	ff7fffff 	.word	0xff7fffff

080004e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004e4:	2800      	cmp	r0, #0
 80004e6:	da14      	bge.n	8000512 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	230f      	movs	r3, #15
 80004ea:	b2c0      	uxtb	r0, r0
 80004ec:	4003      	ands	r3, r0
 80004ee:	3b08      	subs	r3, #8
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <HAL_NVIC_SetPriority+0x58>)
 80004f2:	089b      	lsrs	r3, r3, #2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	189b      	adds	r3, r3, r2
 80004f8:	2203      	movs	r2, #3
 80004fa:	4010      	ands	r0, r2
 80004fc:	4090      	lsls	r0, r2
 80004fe:	32fc      	adds	r2, #252	; 0xfc
 8000500:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000502:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000504:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000506:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	69dc      	ldr	r4, [r3, #28]
 800050a:	43ac      	bics	r4, r5
 800050c:	4321      	orrs	r1, r4
 800050e:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000510:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000512:	2503      	movs	r5, #3
 8000514:	0883      	lsrs	r3, r0, #2
 8000516:	4028      	ands	r0, r5
 8000518:	40a8      	lsls	r0, r5
 800051a:	35fc      	adds	r5, #252	; 0xfc
 800051c:	002e      	movs	r6, r5
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_NVIC_SetPriority+0x5c>)
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	189b      	adds	r3, r3, r2
 8000524:	22c0      	movs	r2, #192	; 0xc0
 8000526:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000528:	4029      	ands	r1, r5
 800052a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	589c      	ldr	r4, [r3, r2]
 8000530:	43b4      	bics	r4, r6
 8000532:	4321      	orrs	r1, r4
 8000534:	5099      	str	r1, [r3, r2]
 8000536:	e7eb      	b.n	8000510 <HAL_NVIC_SetPriority+0x30>
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	e000e100 	.word	0xe000e100

08000540 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	231f      	movs	r3, #31
 8000542:	4018      	ands	r0, r3
 8000544:	3b1e      	subs	r3, #30
 8000546:	4083      	lsls	r3, r0
 8000548:	4a01      	ldr	r2, [pc, #4]	; (8000550 <HAL_NVIC_EnableIRQ+0x10>)
 800054a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800054c:	4770      	bx	lr
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	e000e100 	.word	0xe000e100

08000554 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <HAL_SYSTICK_Config+0x28>)
 8000556:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000558:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800055a:	4293      	cmp	r3, r2
 800055c:	d80d      	bhi.n	800057a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000564:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000566:	6a03      	ldr	r3, [r0, #32]
 8000568:	0609      	lsls	r1, r1, #24
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	430b      	orrs	r3, r1
 8000570:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000572:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000574:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000576:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000578:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800057a:	4770      	bx	lr
 800057c:	00ffffff 	.word	0x00ffffff
 8000580:	e000e010 	.word	0xe000e010
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 800058c:	2001      	movs	r0, #1
  if(NULL == hdma)
 800058e:	2c00      	cmp	r4, #0
 8000590:	d028      	beq.n	80005e4 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000592:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000594:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000596:	1ca5      	adds	r5, r4, #2
 8000598:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 800059a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800059e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005a0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80005a2:	6863      	ldr	r3, [r4, #4]
 80005a4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005a6:	68e1      	ldr	r1, [r4, #12]
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6921      	ldr	r1, [r4, #16]
 80005ac:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005ae:	6961      	ldr	r1, [r4, #20]
 80005b0:	430b      	orrs	r3, r1
 80005b2:	69a1      	ldr	r1, [r4, #24]
 80005b4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80005b6:	69e1      	ldr	r1, [r4, #28]
 80005b8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80005ba:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80005bc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_DMA_Init+0x64>)
 80005c0:	2114      	movs	r1, #20
 80005c2:	18c0      	adds	r0, r0, r3
 80005c4:	f7ff fdb4 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80005ca:	0080      	lsls	r0, r0, #2
 80005cc:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80005ce:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80005d0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80005d2:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 80005d4:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80005d6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80005d8:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80005da:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005dc:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80005de:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80005e0:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80005e2:	77e0      	strb	r0, [r4, #31]
}  
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	ffffc00f 	.word	0xffffc00f
 80005ec:	bffdfff8 	.word	0xbffdfff8
 80005f0:	40020000 	.word	0x40020000

080005f4 <HAL_DMA_Abort_IT>:
{  
 80005f4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005f6:	1c84      	adds	r4, r0, #2
 80005f8:	7fe3      	ldrb	r3, [r4, #31]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d004      	beq.n	8000608 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005fe:	2304      	movs	r3, #4
 8000600:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000602:	3b03      	subs	r3, #3
}
 8000604:	0018      	movs	r0, r3
 8000606:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000608:	210e      	movs	r1, #14
 800060a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800060c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	438a      	bics	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000614:	2201      	movs	r2, #1
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	4391      	bics	r1, r2
 800061a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800061c:	0011      	movs	r1, r2
 800061e:	40a9      	lsls	r1, r5
 8000620:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000622:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000624:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000626:	2400      	movs	r4, #0
 8000628:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800062a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800062c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800062e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000630:	42a2      	cmp	r2, r4
 8000632:	d0e7      	beq.n	8000604 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000634:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000636:	0023      	movs	r3, r4
 8000638:	e7e4      	b.n	8000604 <HAL_DMA_Abort_IT+0x10>

0800063a <HAL_DMA_IRQHandler>:
{
 800063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800063c:	2704      	movs	r7, #4
 800063e:	003e      	movs	r6, r7
 8000640:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000642:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000644:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000646:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800064c:	422e      	tst	r6, r5
 800064e:	d00d      	beq.n	800066c <HAL_DMA_IRQHandler+0x32>
 8000650:	423c      	tst	r4, r7
 8000652:	d00b      	beq.n	800066c <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	0689      	lsls	r1, r1, #26
 8000658:	d402      	bmi.n	8000660 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	43b9      	bics	r1, r7
 800065e:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000660:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000662:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000664:	2b00      	cmp	r3, #0
 8000666:	d019      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000668:	4798      	blx	r3
}  
 800066a:	e017      	b.n	800069c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800066c:	2702      	movs	r7, #2
 800066e:	003e      	movs	r6, r7
 8000670:	408e      	lsls	r6, r1
 8000672:	422e      	tst	r6, r5
 8000674:	d013      	beq.n	800069e <HAL_DMA_IRQHandler+0x64>
 8000676:	423c      	tst	r4, r7
 8000678:	d011      	beq.n	800069e <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	0689      	lsls	r1, r1, #26
 800067e:	d406      	bmi.n	800068e <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000680:	240a      	movs	r4, #10
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	43a1      	bics	r1, r4
 8000686:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000688:	2101      	movs	r1, #1
 800068a:	19c3      	adds	r3, r0, r7
 800068c:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800068e:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000690:	2200      	movs	r2, #0
 8000692:	1c43      	adds	r3, r0, #1
 8000694:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000696:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000698:	4293      	cmp	r3, r2
 800069a:	d1e5      	bne.n	8000668 <HAL_DMA_IRQHandler+0x2e>
}  
 800069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800069e:	2608      	movs	r6, #8
 80006a0:	0037      	movs	r7, r6
 80006a2:	408f      	lsls	r7, r1
 80006a4:	423d      	tst	r5, r7
 80006a6:	d0f9      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
 80006a8:	4234      	tst	r4, r6
 80006aa:	d0f7      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006ac:	250e      	movs	r5, #14
 80006ae:	681c      	ldr	r4, [r3, #0]
 80006b0:	43ac      	bics	r4, r5
 80006b2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80006b4:	2301      	movs	r3, #1
 80006b6:	001c      	movs	r4, r3
 80006b8:	408c      	lsls	r4, r1
 80006ba:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80006bc:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006be:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80006c0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 80006c2:	2200      	movs	r2, #0
 80006c4:	18c3      	adds	r3, r0, r3
 80006c6:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 80006c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80006ca:	e7e5      	b.n	8000698 <HAL_DMA_IRQHandler+0x5e>

080006cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ce:	680b      	ldr	r3, [r1, #0]
{ 
 80006d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80006d4:	2300      	movs	r3, #0
{ 
 80006d6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d8:	9a02      	ldr	r2, [sp, #8]
 80006da:	40da      	lsrs	r2, r3
 80006dc:	d101      	bne.n	80006e2 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80006de:	b007      	add	sp, #28
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006e2:	2201      	movs	r2, #1
 80006e4:	409a      	lsls	r2, r3
 80006e6:	9203      	str	r2, [sp, #12]
 80006e8:	9903      	ldr	r1, [sp, #12]
 80006ea:	9a02      	ldr	r2, [sp, #8]
 80006ec:	400a      	ands	r2, r1
 80006ee:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80006f0:	d100      	bne.n	80006f4 <HAL_GPIO_Init+0x28>
 80006f2:	e08c      	b.n	800080e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006f4:	9a01      	ldr	r2, [sp, #4]
 80006f6:	2110      	movs	r1, #16
 80006f8:	6852      	ldr	r2, [r2, #4]
 80006fa:	0016      	movs	r6, r2
 80006fc:	438e      	bics	r6, r1
 80006fe:	2e02      	cmp	r6, #2
 8000700:	d10e      	bne.n	8000720 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000702:	2507      	movs	r5, #7
 8000704:	401d      	ands	r5, r3
 8000706:	00ad      	lsls	r5, r5, #2
 8000708:	3901      	subs	r1, #1
 800070a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800070c:	08dc      	lsrs	r4, r3, #3
 800070e:	00a4      	lsls	r4, r4, #2
 8000710:	1904      	adds	r4, r0, r4
 8000712:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000714:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	6909      	ldr	r1, [r1, #16]
 800071a:	40a9      	lsls	r1, r5
 800071c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800071e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000720:	2403      	movs	r4, #3
 8000722:	005f      	lsls	r7, r3, #1
 8000724:	40bc      	lsls	r4, r7
 8000726:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000728:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800072c:	4025      	ands	r5, r4
 800072e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000730:	2503      	movs	r5, #3
 8000732:	4015      	ands	r5, r2
 8000734:	40bd      	lsls	r5, r7
 8000736:	4661      	mov	r1, ip
 8000738:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800073a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073c:	2e01      	cmp	r6, #1
 800073e:	d80f      	bhi.n	8000760 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000740:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000742:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000744:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000746:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000748:	40bd      	lsls	r5, r7
 800074a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800074c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000750:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000752:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000754:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000756:	2101      	movs	r1, #1
 8000758:	400d      	ands	r5, r1
 800075a:	409d      	lsls	r5, r3
 800075c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800075e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000762:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000764:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000766:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000768:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800076a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800076c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800076e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000770:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000772:	420a      	tst	r2, r1
 8000774:	d04b      	beq.n	800080e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2101      	movs	r1, #1
 8000778:	4c26      	ldr	r4, [pc, #152]	; (8000814 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800077a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800077e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	430d      	orrs	r5, r1
 8000782:	61a5      	str	r5, [r4, #24]
 8000784:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000786:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	400c      	ands	r4, r1
 800078a:	9405      	str	r4, [sp, #20]
 800078c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800078e:	240f      	movs	r4, #15
 8000790:	4921      	ldr	r1, [pc, #132]	; (8000818 <HAL_GPIO_Init+0x14c>)
 8000792:	00ad      	lsls	r5, r5, #2
 8000794:	00b6      	lsls	r6, r6, #2
 8000796:	186d      	adds	r5, r5, r1
 8000798:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800079c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007a0:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	2400      	movs	r4, #0
 80007a4:	4288      	cmp	r0, r1
 80007a6:	d00c      	beq.n	80007c2 <HAL_GPIO_Init+0xf6>
 80007a8:	491c      	ldr	r1, [pc, #112]	; (800081c <HAL_GPIO_Init+0x150>)
 80007aa:	3401      	adds	r4, #1
 80007ac:	4288      	cmp	r0, r1
 80007ae:	d008      	beq.n	80007c2 <HAL_GPIO_Init+0xf6>
 80007b0:	491b      	ldr	r1, [pc, #108]	; (8000820 <HAL_GPIO_Init+0x154>)
 80007b2:	3401      	adds	r4, #1
 80007b4:	4288      	cmp	r0, r1
 80007b6:	d004      	beq.n	80007c2 <HAL_GPIO_Init+0xf6>
 80007b8:	491a      	ldr	r1, [pc, #104]	; (8000824 <HAL_GPIO_Init+0x158>)
 80007ba:	3403      	adds	r4, #3
 80007bc:	4288      	cmp	r0, r1
 80007be:	d100      	bne.n	80007c2 <HAL_GPIO_Init+0xf6>
 80007c0:	3c02      	subs	r4, #2
 80007c2:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007c4:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c6:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80007c8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80007ca:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80007cc:	4c16      	ldr	r4, [pc, #88]	; (8000828 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007ce:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80007d0:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80007d2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d4:	03d1      	lsls	r1, r2, #15
 80007d6:	d401      	bmi.n	80007dc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007d8:	003e      	movs	r6, r7
 80007da:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80007dc:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80007de:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80007e0:	9e00      	ldr	r6, [sp, #0]
 80007e2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e4:	0391      	lsls	r1, r2, #14
 80007e6:	d401      	bmi.n	80007ec <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80007e8:	003e      	movs	r6, r7
 80007ea:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80007ec:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80007ee:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80007f0:	9e00      	ldr	r6, [sp, #0]
 80007f2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f4:	02d1      	lsls	r1, r2, #11
 80007f6:	d401      	bmi.n	80007fc <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007f8:	003e      	movs	r6, r7
 80007fa:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80007fc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80007fe:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000800:	9f00      	ldr	r7, [sp, #0]
 8000802:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000804:	0292      	lsls	r2, r2, #10
 8000806:	d401      	bmi.n	800080c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000808:	402e      	ands	r6, r5
 800080a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800080c:	60e7      	str	r7, [r4, #12]
    position++;
 800080e:	3301      	adds	r3, #1
 8000810:	e762      	b.n	80006d8 <HAL_GPIO_Init+0xc>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000
 800081c:	48000400 	.word	0x48000400
 8000820:	48000800 	.word	0x48000800
 8000824:	48000c00 	.word	0x48000c00
 8000828:	40010400 	.word	0x40010400

0800082c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000832:	2c00      	cmp	r4, #0
 8000834:	d03f      	beq.n	80008b6 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000836:	0025      	movs	r5, r4
 8000838:	3541      	adds	r5, #65	; 0x41
 800083a:	782b      	ldrb	r3, [r5, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d105      	bne.n	800084e <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000842:	0022      	movs	r2, r4
 8000844:	3240      	adds	r2, #64	; 0x40
 8000846:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000848:	0020      	movs	r0, r4
 800084a:	f001 faf7 	bl	8001e3c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800084e:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000850:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000852:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000854:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000856:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	68a6      	ldr	r6, [r4, #8]
 800085c:	438a      	bics	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000860:	6861      	ldr	r1, [r4, #4]
 8000862:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <HAL_I2C_Init+0xa0>)
 8000864:	400a      	ands	r2, r1
 8000866:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000868:	6899      	ldr	r1, [r3, #8]
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_I2C_Init+0xa4>)
 800086c:	4011      	ands	r1, r2
 800086e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000870:	2801      	cmp	r0, #1
 8000872:	d121      	bne.n	80008b8 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0209      	lsls	r1, r1, #8
 8000878:	4331      	orrs	r1, r6
 800087a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800087c:	6858      	ldr	r0, [r3, #4]
 800087e:	4915      	ldr	r1, [pc, #84]	; (80008d4 <HAL_I2C_Init+0xa8>)
 8000880:	4301      	orrs	r1, r0
 8000882:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000884:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000886:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000888:	400a      	ands	r2, r1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800088c:	6961      	ldr	r1, [r4, #20]
 800088e:	6922      	ldr	r2, [r4, #16]
 8000890:	430a      	orrs	r2, r1
 8000892:	69a1      	ldr	r1, [r4, #24]
 8000894:	0209      	lsls	r1, r1, #8
 8000896:	430a      	orrs	r2, r1
 8000898:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800089a:	6a21      	ldr	r1, [r4, #32]
 800089c:	69e2      	ldr	r2, [r4, #28]
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80008a2:	2201      	movs	r2, #1
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80008aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b2:	3442      	adds	r4, #66	; 0x42
 80008b4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008b8:	2184      	movs	r1, #132	; 0x84
 80008ba:	0209      	lsls	r1, r1, #8
 80008bc:	4331      	orrs	r1, r6
 80008be:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008c0:	2802      	cmp	r0, #2
 80008c2:	d1db      	bne.n	800087c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0109      	lsls	r1, r1, #4
 80008c8:	6059      	str	r1, [r3, #4]
 80008ca:	e7d7      	b.n	800087c <HAL_I2C_Init+0x50>
 80008cc:	f0ffffff 	.word	0xf0ffffff
 80008d0:	ffff7fff 	.word	0xffff7fff
 80008d4:	02008000 	.word	0x02008000

080008d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008da:	0004      	movs	r4, r0
 80008dc:	3441      	adds	r4, #65	; 0x41
 80008de:	7822      	ldrb	r2, [r4, #0]
{
 80008e0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008e2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80008e4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008e6:	2a20      	cmp	r2, #32
 80008e8:	d118      	bne.n	800091c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80008ea:	001d      	movs	r5, r3
 80008ec:	3540      	adds	r5, #64	; 0x40
 80008ee:	782e      	ldrb	r6, [r5, #0]
 80008f0:	2e01      	cmp	r6, #1
 80008f2:	d013      	beq.n	800091c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80008f4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80008f6:	3022      	adds	r0, #34	; 0x22
 80008f8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80008fa:	681e      	ldr	r6, [r3, #0]
 80008fc:	3823      	subs	r0, #35	; 0x23
 80008fe:	4386      	bics	r6, r0
 8000900:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000902:	681e      	ldr	r6, [r3, #0]
 8000904:	4f06      	ldr	r7, [pc, #24]	; (8000920 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000906:	403e      	ands	r6, r7
 8000908:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800090a:	681e      	ldr	r6, [r3, #0]
 800090c:	4331      	orrs	r1, r6
 800090e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	4308      	orrs	r0, r1
 8000914:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000916:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000918:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800091a:	7028      	strb	r0, [r5, #0]
  }
}
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	ffffefff 	.word	0xffffefff

08000924 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000926:	0005      	movs	r5, r0
 8000928:	3541      	adds	r5, #65	; 0x41
 800092a:	782a      	ldrb	r2, [r5, #0]
{
 800092c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800092e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000930:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000932:	2a20      	cmp	r2, #32
 8000934:	d117      	bne.n	8000966 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000936:	001c      	movs	r4, r3
 8000938:	3440      	adds	r4, #64	; 0x40
 800093a:	7826      	ldrb	r6, [r4, #0]
 800093c:	2e01      	cmp	r6, #1
 800093e:	d012      	beq.n	8000966 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000940:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000942:	3022      	adds	r0, #34	; 0x22
 8000944:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000946:	681e      	ldr	r6, [r3, #0]
 8000948:	3823      	subs	r0, #35	; 0x23
 800094a:	4386      	bics	r6, r0
 800094c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800094e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000950:	4f05      	ldr	r7, [pc, #20]	; (8000968 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000952:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000954:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000956:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000958:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	4308      	orrs	r0, r1
 800095e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000960:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000962:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000964:	7020      	strb	r0, [r4, #0]
  }
}
 8000966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000968:	fffff0ff 	.word	0xfffff0ff

0800096c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800096e:	6803      	ldr	r3, [r0, #0]
{
 8000970:	b085      	sub	sp, #20
 8000972:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000974:	07db      	lsls	r3, r3, #31
 8000976:	d42f      	bmi.n	80009d8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	079b      	lsls	r3, r3, #30
 800097c:	d500      	bpl.n	8000980 <HAL_RCC_OscConfig+0x14>
 800097e:	e081      	b.n	8000a84 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	071b      	lsls	r3, r3, #28
 8000984:	d500      	bpl.n	8000988 <HAL_RCC_OscConfig+0x1c>
 8000986:	e0bc      	b.n	8000b02 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	075b      	lsls	r3, r3, #29
 800098c:	d500      	bpl.n	8000990 <HAL_RCC_OscConfig+0x24>
 800098e:	e0df      	b.n	8000b50 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	06db      	lsls	r3, r3, #27
 8000994:	d51a      	bpl.n	80009cc <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000996:	696a      	ldr	r2, [r5, #20]
 8000998:	4cb5      	ldr	r4, [pc, #724]	; (8000c70 <HAL_RCC_OscConfig+0x304>)
 800099a:	2304      	movs	r3, #4
 800099c:	2a01      	cmp	r2, #1
 800099e:	d000      	beq.n	80009a2 <HAL_RCC_OscConfig+0x36>
 80009a0:	e14b      	b.n	8000c3a <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80009a2:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80009a4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80009aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009ac:	431a      	orrs	r2, r3
 80009ae:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009b0:	f7ff fc74 	bl	800029c <HAL_GetTick>
 80009b4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80009b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009b8:	4233      	tst	r3, r6
 80009ba:	d100      	bne.n	80009be <HAL_RCC_OscConfig+0x52>
 80009bc:	e136      	b.n	8000c2c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009be:	21f8      	movs	r1, #248	; 0xf8
 80009c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80009c2:	69ab      	ldr	r3, [r5, #24]
 80009c4:	438a      	bics	r2, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009cc:	6a29      	ldr	r1, [r5, #32]
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d000      	beq.n	80009d4 <HAL_RCC_OscConfig+0x68>
 80009d2:	e159      	b.n	8000c88 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
 80009d6:	e013      	b.n	8000a00 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009d8:	210c      	movs	r1, #12
 80009da:	4ca5      	ldr	r4, [pc, #660]	; (8000c70 <HAL_RCC_OscConfig+0x304>)
 80009dc:	6862      	ldr	r2, [r4, #4]
 80009de:	400a      	ands	r2, r1
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d006      	beq.n	80009f2 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	400b      	ands	r3, r1
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d10b      	bne.n	8000a04 <HAL_RCC_OscConfig+0x98>
 80009ec:	6863      	ldr	r3, [r4, #4]
 80009ee:	03db      	lsls	r3, r3, #15
 80009f0:	d508      	bpl.n	8000a04 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	039b      	lsls	r3, r3, #14
 80009f6:	d5bf      	bpl.n	8000978 <HAL_RCC_OscConfig+0xc>
 80009f8:	686b      	ldr	r3, [r5, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1bc      	bne.n	8000978 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009fe:	2001      	movs	r0, #1
}
 8000a00:	b005      	add	sp, #20
 8000a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	686b      	ldr	r3, [r5, #4]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d113      	bne.n	8000a32 <HAL_RCC_OscConfig+0xc6>
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	025b      	lsls	r3, r3, #9
 8000a10:	4313      	orrs	r3, r2
 8000a12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fc42 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a18:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a1a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a1c:	02b6      	lsls	r6, r6, #10
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	4233      	tst	r3, r6
 8000a22:	d1a9      	bne.n	8000978 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a24:	f7ff fc3a 	bl	800029c <HAL_GetTick>
 8000a28:	1bc0      	subs	r0, r0, r7
 8000a2a:	2864      	cmp	r0, #100	; 0x64
 8000a2c:	d9f7      	bls.n	8000a1e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000a2e:	2003      	movs	r0, #3
 8000a30:	e7e6      	b.n	8000a00 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d116      	bne.n	8000a64 <HAL_RCC_OscConfig+0xf8>
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	4a8e      	ldr	r2, [pc, #568]	; (8000c74 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a3a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	6023      	str	r3, [r4, #0]
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	4a8d      	ldr	r2, [pc, #564]	; (8000c78 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a44:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a46:	4013      	ands	r3, r2
 8000a48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fc27 	bl	800029c <HAL_GetTick>
 8000a4e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4233      	tst	r3, r6
 8000a54:	d100      	bne.n	8000a58 <HAL_RCC_OscConfig+0xec>
 8000a56:	e78f      	b.n	8000978 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a58:	f7ff fc20 	bl	800029c <HAL_GetTick>
 8000a5c:	1bc0      	subs	r0, r0, r7
 8000a5e:	2864      	cmp	r0, #100	; 0x64
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0xe4>
 8000a62:	e7e4      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d105      	bne.n	8000a74 <HAL_RCC_OscConfig+0x108>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	6822      	ldr	r2, [r4, #0]
 8000a6c:	02db      	lsls	r3, r3, #11
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	e7ca      	b.n	8000a0a <HAL_RCC_OscConfig+0x9e>
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	4a7f      	ldr	r2, [pc, #508]	; (8000c74 <HAL_RCC_OscConfig+0x308>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	4a7e      	ldr	r2, [pc, #504]	; (8000c78 <HAL_RCC_OscConfig+0x30c>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	e7c6      	b.n	8000a12 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a84:	220c      	movs	r2, #12
 8000a86:	4c7a      	ldr	r4, [pc, #488]	; (8000c70 <HAL_RCC_OscConfig+0x304>)
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	4213      	tst	r3, r2
 8000a8c:	d006      	beq.n	8000a9c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a8e:	6863      	ldr	r3, [r4, #4]
 8000a90:	4013      	ands	r3, r2
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d110      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x14c>
 8000a96:	6863      	ldr	r3, [r4, #4]
 8000a98:	03db      	lsls	r3, r3, #15
 8000a9a:	d40d      	bmi.n	8000ab8 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	079b      	lsls	r3, r3, #30
 8000aa0:	d502      	bpl.n	8000aa8 <HAL_RCC_OscConfig+0x13c>
 8000aa2:	68eb      	ldr	r3, [r5, #12]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d1aa      	bne.n	80009fe <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa8:	21f8      	movs	r1, #248	; 0xf8
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	692b      	ldr	r3, [r5, #16]
 8000aae:	438a      	bics	r2, r1
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	e763      	b.n	8000980 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ab8:	68ea      	ldr	r2, [r5, #12]
 8000aba:	2301      	movs	r3, #1
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d00f      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000ac0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fbe8 	bl	800029c <HAL_GetTick>
 8000acc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	4233      	tst	r3, r6
 8000ad2:	d1e9      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ad4:	f7ff fbe2 	bl	800029c <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9f7      	bls.n	8000ace <HAL_RCC_OscConfig+0x162>
 8000ade:	e7a6      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ae0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ae4:	439a      	bics	r2, r3
 8000ae6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fbd8 	bl	800029c <HAL_GetTick>
 8000aec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4233      	tst	r3, r6
 8000af2:	d100      	bne.n	8000af6 <HAL_RCC_OscConfig+0x18a>
 8000af4:	e744      	b.n	8000980 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000af6:	f7ff fbd1 	bl	800029c <HAL_GetTick>
 8000afa:	1bc0      	subs	r0, r0, r7
 8000afc:	2802      	cmp	r0, #2
 8000afe:	d9f6      	bls.n	8000aee <HAL_RCC_OscConfig+0x182>
 8000b00:	e795      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b02:	69ea      	ldr	r2, [r5, #28]
 8000b04:	2301      	movs	r3, #1
 8000b06:	4c5a      	ldr	r4, [pc, #360]	; (8000c70 <HAL_RCC_OscConfig+0x304>)
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d010      	beq.n	8000b2e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000b10:	4313      	orrs	r3, r2
 8000b12:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b14:	f7ff fbc2 	bl	800029c <HAL_GetTick>
 8000b18:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b1c:	4233      	tst	r3, r6
 8000b1e:	d000      	beq.n	8000b22 <HAL_RCC_OscConfig+0x1b6>
 8000b20:	e732      	b.n	8000988 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b22:	f7ff fbbb 	bl	800029c <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	2802      	cmp	r0, #2
 8000b2a:	d9f6      	bls.n	8000b1a <HAL_RCC_OscConfig+0x1ae>
 8000b2c:	e77f      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000b2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b30:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000b32:	439a      	bics	r2, r3
 8000b34:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b36:	f7ff fbb1 	bl	800029c <HAL_GetTick>
 8000b3a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b3e:	4233      	tst	r3, r6
 8000b40:	d100      	bne.n	8000b44 <HAL_RCC_OscConfig+0x1d8>
 8000b42:	e721      	b.n	8000988 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b44:	f7ff fbaa 	bl	800029c <HAL_GetTick>
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9f6      	bls.n	8000b3c <HAL_RCC_OscConfig+0x1d0>
 8000b4e:	e76e      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b50:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b52:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b54:	4c46      	ldr	r4, [pc, #280]	; (8000c70 <HAL_RCC_OscConfig+0x304>)
 8000b56:	0552      	lsls	r2, r2, #21
 8000b58:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b5a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b5c:	4213      	tst	r3, r2
 8000b5e:	d108      	bne.n	8000b72 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	69e3      	ldr	r3, [r4, #28]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61e3      	str	r3, [r4, #28]
 8000b66:	69e3      	ldr	r3, [r4, #28]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	9303      	str	r3, [sp, #12]
 8000b6c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b72:	2780      	movs	r7, #128	; 0x80
 8000b74:	4e41      	ldr	r6, [pc, #260]	; (8000c7c <HAL_RCC_OscConfig+0x310>)
 8000b76:	007f      	lsls	r7, r7, #1
 8000b78:	6833      	ldr	r3, [r6, #0]
 8000b7a:	423b      	tst	r3, r7
 8000b7c:	d006      	beq.n	8000b8c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7e:	68ab      	ldr	r3, [r5, #8]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d113      	bne.n	8000bac <HAL_RCC_OscConfig+0x240>
 8000b84:	6a22      	ldr	r2, [r4, #32]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	6223      	str	r3, [r4, #32]
 8000b8a:	e030      	b.n	8000bee <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b8c:	6833      	ldr	r3, [r6, #0]
 8000b8e:	433b      	orrs	r3, r7
 8000b90:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b92:	f7ff fb83 	bl	800029c <HAL_GetTick>
 8000b96:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b98:	6833      	ldr	r3, [r6, #0]
 8000b9a:	423b      	tst	r3, r7
 8000b9c:	d1ef      	bne.n	8000b7e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b9e:	f7ff fb7d 	bl	800029c <HAL_GetTick>
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	1ac0      	subs	r0, r0, r3
 8000ba6:	2864      	cmp	r0, #100	; 0x64
 8000ba8:	d9f6      	bls.n	8000b98 <HAL_RCC_OscConfig+0x22c>
 8000baa:	e740      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
 8000bac:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d114      	bne.n	8000bdc <HAL_RCC_OscConfig+0x270>
 8000bb2:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb6:	4393      	bics	r3, r2
 8000bb8:	6223      	str	r3, [r4, #32]
 8000bba:	6a23      	ldr	r3, [r4, #32]
 8000bbc:	3203      	adds	r2, #3
 8000bbe:	4393      	bics	r3, r2
 8000bc0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bc2:	f7ff fb6b 	bl	800029c <HAL_GetTick>
 8000bc6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc8:	6a23      	ldr	r3, [r4, #32]
 8000bca:	423b      	tst	r3, r7
 8000bcc:	d025      	beq.n	8000c1a <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bce:	f7ff fb65 	bl	800029c <HAL_GetTick>
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <HAL_RCC_OscConfig+0x314>)
 8000bd4:	1b80      	subs	r0, r0, r6
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d9f6      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x25c>
 8000bda:	e728      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d10b      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x28c>
 8000be0:	6a21      	ldr	r1, [r4, #32]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6223      	str	r3, [r4, #32]
 8000be8:	6a23      	ldr	r3, [r4, #32]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000bee:	f7ff fb55 	bl	800029c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bf2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000bf4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bf6:	e00d      	b.n	8000c14 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf8:	6a23      	ldr	r3, [r4, #32]
 8000bfa:	4393      	bics	r3, r2
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	6223      	str	r3, [r4, #32]
 8000c00:	6a23      	ldr	r3, [r4, #32]
 8000c02:	4393      	bics	r3, r2
 8000c04:	e7c0      	b.n	8000b88 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c06:	f7ff fb49 	bl	800029c <HAL_GetTick>
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_RCC_OscConfig+0x314>)
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d900      	bls.n	8000c14 <HAL_RCC_OscConfig+0x2a8>
 8000c12:	e70c      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c14:	6a23      	ldr	r3, [r4, #32]
 8000c16:	423b      	tst	r3, r7
 8000c18:	d0f5      	beq.n	8000c06 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000c1a:	9b00      	ldr	r3, [sp, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d000      	beq.n	8000c22 <HAL_RCC_OscConfig+0x2b6>
 8000c20:	e6b6      	b.n	8000990 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c22:	69e3      	ldr	r3, [r4, #28]
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_RCC_OscConfig+0x318>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	61e3      	str	r3, [r4, #28]
 8000c2a:	e6b1      	b.n	8000990 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c2c:	f7ff fb36 	bl	800029c <HAL_GetTick>
 8000c30:	1bc0      	subs	r0, r0, r7
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d800      	bhi.n	8000c38 <HAL_RCC_OscConfig+0x2cc>
 8000c36:	e6be      	b.n	80009b6 <HAL_RCC_OscConfig+0x4a>
 8000c38:	e6f9      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c3a:	3205      	adds	r2, #5
 8000c3c:	d103      	bne.n	8000c46 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c40:	439a      	bics	r2, r3
 8000c42:	6362      	str	r2, [r4, #52]	; 0x34
 8000c44:	e6bb      	b.n	80009be <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c46:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c48:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c4a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000c4c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c4e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000c50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c52:	4393      	bics	r3, r2
 8000c54:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c56:	f7ff fb21 	bl	800029c <HAL_GetTick>
 8000c5a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c5e:	4233      	tst	r3, r6
 8000c60:	d100      	bne.n	8000c64 <HAL_RCC_OscConfig+0x2f8>
 8000c62:	e6b3      	b.n	80009cc <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c64:	f7ff fb1a 	bl	800029c <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9f6      	bls.n	8000c5c <HAL_RCC_OscConfig+0x2f0>
 8000c6e:	e6de      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
 8000c70:	40021000 	.word	0x40021000
 8000c74:	fffeffff 	.word	0xfffeffff
 8000c78:	fffbffff 	.word	0xfffbffff
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	00001388 	.word	0x00001388
 8000c84:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c88:	220c      	movs	r2, #12
 8000c8a:	4c26      	ldr	r4, [pc, #152]	; (8000d24 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c8e:	6863      	ldr	r3, [r4, #4]
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d100      	bne.n	8000c98 <HAL_RCC_OscConfig+0x32c>
 8000c96:	e6b3      	b.n	8000a00 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <HAL_RCC_OscConfig+0x3bc>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ca0:	2902      	cmp	r1, #2
 8000ca2:	d12f      	bne.n	8000d04 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fafa 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000caa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cac:	04b6      	lsls	r6, r6, #18
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	4233      	tst	r3, r6
 8000cb2:	d121      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cb8:	4393      	bics	r3, r2
 8000cba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cc0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000cc4:	6862      	ldr	r2, [r4, #4]
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	4918      	ldr	r1, [pc, #96]	; (8000d2c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cca:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ccc:	400a      	ands	r2, r1
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	6822      	ldr	r2, [r4, #0]
 8000cd6:	045b      	lsls	r3, r3, #17
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fade 	bl	800029c <HAL_GetTick>
 8000ce0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ce2:	04ad      	lsls	r5, r5, #18
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	422b      	tst	r3, r5
 8000ce8:	d000      	beq.n	8000cec <HAL_RCC_OscConfig+0x380>
 8000cea:	e673      	b.n	80009d4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cec:	f7ff fad6 	bl	800029c <HAL_GetTick>
 8000cf0:	1b80      	subs	r0, r0, r6
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d9f6      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x378>
 8000cf6:	e69a      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fad0 	bl	800029c <HAL_GetTick>
 8000cfc:	1bc0      	subs	r0, r0, r7
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9d5      	bls.n	8000cae <HAL_RCC_OscConfig+0x342>
 8000d02:	e694      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000d04:	f7ff faca 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d08:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d0c:	04ad      	lsls	r5, r5, #18
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	422b      	tst	r3, r5
 8000d12:	d100      	bne.n	8000d16 <HAL_RCC_OscConfig+0x3aa>
 8000d14:	e65e      	b.n	80009d4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d16:	f7ff fac1 	bl	800029c <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f6      	bls.n	8000d0e <HAL_RCC_OscConfig+0x3a2>
 8000d20:	e685      	b.n	8000a2e <HAL_RCC_OscConfig+0xc2>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000
 8000d28:	feffffff 	.word	0xfeffffff
 8000d2c:	ffc2ffff 	.word	0xffc2ffff

08000d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d30:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d32:	4c14      	ldr	r4, [pc, #80]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000d34:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d36:	2210      	movs	r2, #16
 8000d38:	0021      	movs	r1, r4
 8000d3a:	4668      	mov	r0, sp
 8000d3c:	f001 fc3c 	bl	80025b8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000d40:	0021      	movs	r1, r4
 8000d42:	ad04      	add	r5, sp, #16
 8000d44:	2210      	movs	r2, #16
 8000d46:	3110      	adds	r1, #16
 8000d48:	0028      	movs	r0, r5
 8000d4a:	f001 fc35 	bl	80025b8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d4e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000d50:	4e0d      	ldr	r6, [pc, #52]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d52:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d54:	401a      	ands	r2, r3
 8000d56:	2a08      	cmp	r2, #8
 8000d58:	d111      	bne.n	8000d7e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	466a      	mov	r2, sp
 8000d5e:	0c99      	lsrs	r1, r3, #18
 8000d60:	4001      	ands	r1, r0
 8000d62:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d64:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000d66:	4002      	ands	r2, r0
 8000d68:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000d6a:	03db      	lsls	r3, r3, #15
 8000d6c:	d505      	bpl.n	8000d7a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000d70:	f7ff f9de 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d74:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d76:	b008      	add	sp, #32
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d7c:	e7fa      	b.n	8000d74 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000d80:	e7f9      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x46>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	080025f4 	.word	0x080025f4
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	007a1200 	.word	0x007a1200
 8000d90:	003d0900 	.word	0x003d0900

08000d94 <HAL_RCC_ClockConfig>:
{
 8000d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d96:	2201      	movs	r2, #1
 8000d98:	4c43      	ldr	r4, [pc, #268]	; (8000ea8 <HAL_RCC_ClockConfig+0x114>)
{
 8000d9a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d9c:	6823      	ldr	r3, [r4, #0]
{
 8000d9e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000da0:	4013      	ands	r3, r2
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d31c      	bcc.n	8000de0 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000da6:	6832      	ldr	r2, [r6, #0]
 8000da8:	0793      	lsls	r3, r2, #30
 8000daa:	d423      	bmi.n	8000df4 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dac:	07d3      	lsls	r3, r2, #31
 8000dae:	d429      	bmi.n	8000e04 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000db0:	2301      	movs	r3, #1
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	401a      	ands	r2, r3
 8000db6:	4297      	cmp	r7, r2
 8000db8:	d367      	bcc.n	8000e8a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dba:	6833      	ldr	r3, [r6, #0]
 8000dbc:	4c3b      	ldr	r4, [pc, #236]	; (8000eac <HAL_RCC_ClockConfig+0x118>)
 8000dbe:	075b      	lsls	r3, r3, #29
 8000dc0:	d46a      	bmi.n	8000e98 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000dc2:	f7ff ffb5 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 8000dc6:	6863      	ldr	r3, [r4, #4]
 8000dc8:	4a39      	ldr	r2, [pc, #228]	; (8000eb0 <HAL_RCC_ClockConfig+0x11c>)
 8000dca:	061b      	lsls	r3, r3, #24
 8000dcc:	0f1b      	lsrs	r3, r3, #28
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	40d8      	lsrs	r0, r3
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_RCC_ClockConfig+0x120>)
 8000dd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fa36 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	4393      	bics	r3, r2
 8000de4:	430b      	orrs	r3, r1
 8000de6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	4013      	ands	r3, r2
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d0da      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
}
 8000df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df4:	20f0      	movs	r0, #240	; 0xf0
 8000df6:	492d      	ldr	r1, [pc, #180]	; (8000eac <HAL_RCC_ClockConfig+0x118>)
 8000df8:	684b      	ldr	r3, [r1, #4]
 8000dfa:	4383      	bics	r3, r0
 8000dfc:	68b0      	ldr	r0, [r6, #8]
 8000dfe:	4303      	orrs	r3, r0
 8000e00:	604b      	str	r3, [r1, #4]
 8000e02:	e7d3      	b.n	8000dac <HAL_RCC_ClockConfig+0x18>
 8000e04:	4d29      	ldr	r5, [pc, #164]	; (8000eac <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e06:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e08:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0a:	2a01      	cmp	r2, #1
 8000e0c:	d11a      	bne.n	8000e44 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	039b      	lsls	r3, r3, #14
 8000e10:	d5ee      	bpl.n	8000df0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e12:	2103      	movs	r1, #3
 8000e14:	686b      	ldr	r3, [r5, #4]
 8000e16:	438b      	bics	r3, r1
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000e1c:	f7ff fa3e 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e20:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e22:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d115      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e28:	220c      	movs	r2, #12
 8000e2a:	686b      	ldr	r3, [r5, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d0be      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e32:	f7ff fa33 	bl	800029c <HAL_GetTick>
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	1ac0      	subs	r0, r0, r3
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_RCC_ClockConfig+0x124>)
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d9f3      	bls.n	8000e28 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000e40:	2003      	movs	r0, #3
 8000e42:	e7d6      	b.n	8000df2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e44:	2a02      	cmp	r2, #2
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	d4e2      	bmi.n	8000e12 <HAL_RCC_ClockConfig+0x7e>
 8000e4c:	e7d0      	b.n	8000df0 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	079b      	lsls	r3, r3, #30
 8000e50:	d4df      	bmi.n	8000e12 <HAL_RCC_ClockConfig+0x7e>
 8000e52:	e7cd      	b.n	8000df0 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d012      	beq.n	8000e7e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e58:	220c      	movs	r2, #12
 8000e5a:	686b      	ldr	r3, [r5, #4]
 8000e5c:	4213      	tst	r3, r2
 8000e5e:	d0a7      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e60:	f7ff fa1c 	bl	800029c <HAL_GetTick>
 8000e64:	9b01      	ldr	r3, [sp, #4]
 8000e66:	1ac0      	subs	r0, r0, r3
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_RCC_ClockConfig+0x124>)
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d9f4      	bls.n	8000e58 <HAL_RCC_ClockConfig+0xc4>
 8000e6e:	e7e7      	b.n	8000e40 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e70:	f7ff fa14 	bl	800029c <HAL_GetTick>
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	1ac0      	subs	r0, r0, r3
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_RCC_ClockConfig+0x124>)
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d8e0      	bhi.n	8000e40 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	686b      	ldr	r3, [r5, #4]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d1f3      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xdc>
 8000e88:	e792      	b.n	8000db0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	439a      	bics	r2, r3
 8000e8e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	421a      	tst	r2, r3
 8000e94:	d1ac      	bne.n	8000df0 <HAL_RCC_ClockConfig+0x5c>
 8000e96:	e790      	b.n	8000dba <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_RCC_ClockConfig+0x128>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	68f2      	ldr	r2, [r6, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	6063      	str	r3, [r4, #4]
 8000ea4:	e78d      	b.n	8000dc2 <HAL_RCC_ClockConfig+0x2e>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	08002618 	.word	0x08002618
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	00001388 	.word	0x00001388
 8000ebc:	fffff8ff 	.word	0xfffff8ff

08000ec0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
}
 8000ec4:	4770      	bx	lr
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	055b      	lsls	r3, r3, #21
 8000ed4:	0f5b      	lsrs	r3, r3, #29
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	40d8      	lsrs	r0, r3
}    
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	08002628 	.word	0x08002628
 8000ee8:	20000000 	.word	0x20000000

08000eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000eee:	6803      	ldr	r3, [r0, #0]
{
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ef4:	03db      	lsls	r3, r3, #15
 8000ef6:	d528      	bpl.n	8000f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efc:	4c37      	ldr	r4, [pc, #220]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000efe:	0552      	lsls	r2, r2, #21
 8000f00:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f02:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f04:	4213      	tst	r3, r2
 8000f06:	d108      	bne.n	8000f1a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	69e3      	ldr	r3, [r4, #28]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61e3      	str	r3, [r4, #28]
 8000f0e:	69e3      	ldr	r3, [r4, #28]
 8000f10:	4013      	ands	r3, r2
 8000f12:	9303      	str	r3, [sp, #12]
 8000f14:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f16:	2301      	movs	r3, #1
 8000f18:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	2780      	movs	r7, #128	; 0x80
 8000f1c:	4e30      	ldr	r6, [pc, #192]	; (8000fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000f1e:	007f      	lsls	r7, r7, #1
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	423b      	tst	r3, r7
 8000f24:	d026      	beq.n	8000f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f26:	22c0      	movs	r2, #192	; 0xc0
 8000f28:	6a23      	ldr	r3, [r4, #32]
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	4e2d      	ldr	r6, [pc, #180]	; (8000fe4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f30:	d132      	bne.n	8000f98 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f32:	6a23      	ldr	r3, [r4, #32]
 8000f34:	401e      	ands	r6, r3
 8000f36:	686b      	ldr	r3, [r5, #4]
 8000f38:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f3a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f3c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d103      	bne.n	8000f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f42:	69e3      	ldr	r3, [r4, #28]
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f4a:	682a      	ldr	r2, [r5, #0]
 8000f4c:	07d3      	lsls	r3, r2, #31
 8000f4e:	d506      	bpl.n	8000f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f50:	2003      	movs	r0, #3
 8000f52:	4922      	ldr	r1, [pc, #136]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000f54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f56:	4383      	bics	r3, r0
 8000f58:	68a8      	ldr	r0, [r5, #8]
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000f5e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f60:	0693      	lsls	r3, r2, #26
 8000f62:	d517      	bpl.n	8000f94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f64:	2110      	movs	r1, #16
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f6a:	438b      	bics	r3, r1
 8000f6c:	68e9      	ldr	r1, [r5, #12]
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	e00f      	b.n	8000f94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f74:	6833      	ldr	r3, [r6, #0]
 8000f76:	433b      	orrs	r3, r7
 8000f78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f7a:	f7ff f98f 	bl	800029c <HAL_GetTick>
 8000f7e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	6833      	ldr	r3, [r6, #0]
 8000f82:	423b      	tst	r3, r7
 8000f84:	d1cf      	bne.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f86:	f7ff f989 	bl	800029c <HAL_GetTick>
 8000f8a:	9b01      	ldr	r3, [sp, #4]
 8000f8c:	1ac0      	subs	r0, r0, r3
 8000f8e:	2864      	cmp	r0, #100	; 0x64
 8000f90:	d9f6      	bls.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000f92:	2003      	movs	r0, #3
}
 8000f94:	b005      	add	sp, #20
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f98:	6869      	ldr	r1, [r5, #4]
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d0c8      	beq.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fa0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fa2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fa4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fa6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	4303      	orrs	r3, r0
 8000fac:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fae:	6a23      	ldr	r3, [r4, #32]
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fb2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fb4:	4003      	ands	r3, r0
 8000fb6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000fb8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000fba:	07d3      	lsls	r3, r2, #31
 8000fbc:	d5b9      	bpl.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000fbe:	f7ff f96d 	bl	800029c <HAL_GetTick>
 8000fc2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	6a23      	ldr	r3, [r4, #32]
 8000fc8:	4213      	tst	r3, r2
 8000fca:	d1b2      	bne.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff f966 	bl	800029c <HAL_GetTick>
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000fd2:	1bc0      	subs	r0, r0, r7
 8000fd4:	4298      	cmp	r0, r3
 8000fd6:	d9f5      	bls.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000fd8:	e7db      	b.n	8000f92 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	fffffcff 	.word	0xfffffcff
 8000fe8:	efffffff 	.word	0xefffffff
 8000fec:	fffeffff 	.word	0xfffeffff
 8000ff0:	00001388 	.word	0x00001388

08000ff4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6a03      	ldr	r3, [r0, #32]
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ffe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001000:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001002:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001004:	3272      	adds	r2, #114	; 0x72
 8001006:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001008:	680a      	ldr	r2, [r1, #0]
 800100a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800100c:	2202      	movs	r2, #2
 800100e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001010:	688a      	ldr	r2, [r1, #8]
 8001012:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <TIM_OC1_SetConfig+0x74>)
 8001016:	4290      	cmp	r0, r2
 8001018:	d008      	beq.n	800102c <TIM_OC1_SetConfig+0x38>
 800101a:	4e14      	ldr	r6, [pc, #80]	; (800106c <TIM_OC1_SetConfig+0x78>)
 800101c:	42b0      	cmp	r0, r6
 800101e:	d005      	beq.n	800102c <TIM_OC1_SetConfig+0x38>
 8001020:	4e13      	ldr	r6, [pc, #76]	; (8001070 <TIM_OC1_SetConfig+0x7c>)
 8001022:	42b0      	cmp	r0, r6
 8001024:	d002      	beq.n	800102c <TIM_OC1_SetConfig+0x38>
 8001026:	4e13      	ldr	r6, [pc, #76]	; (8001074 <TIM_OC1_SetConfig+0x80>)
 8001028:	42b0      	cmp	r0, r6
 800102a:	d116      	bne.n	800105a <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800102c:	2608      	movs	r6, #8
 800102e:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001030:	68ce      	ldr	r6, [r1, #12]
 8001032:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001034:	2604      	movs	r6, #4
 8001036:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001038:	4290      	cmp	r0, r2
 800103a:	d008      	beq.n	800104e <TIM_OC1_SetConfig+0x5a>
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <TIM_OC1_SetConfig+0x78>)
 800103e:	4290      	cmp	r0, r2
 8001040:	d005      	beq.n	800104e <TIM_OC1_SetConfig+0x5a>
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <TIM_OC1_SetConfig+0x7c>)
 8001044:	4290      	cmp	r0, r2
 8001046:	d002      	beq.n	800104e <TIM_OC1_SetConfig+0x5a>
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <TIM_OC1_SetConfig+0x80>)
 800104a:	4290      	cmp	r0, r2
 800104c:	d105      	bne.n	800105a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001050:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001052:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001054:	694c      	ldr	r4, [r1, #20]
 8001056:	4334      	orrs	r4, r6
 8001058:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800105a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800105c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800105e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001060:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001062:	6203      	str	r3, [r0, #32]
}
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40012c00 	.word	0x40012c00
 800106c:	40014000 	.word	0x40014000
 8001070:	40014400 	.word	0x40014400
 8001074:	40014800 	.word	0x40014800
 8001078:	fffffcff 	.word	0xfffffcff

0800107c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800107e:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001080:	6a03      	ldr	r3, [r0, #32]
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <TIM_OC3_SetConfig+0x64>)
 8001084:	4013      	ands	r3, r2
 8001086:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001088:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800108a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800108c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800108e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001090:	680d      	ldr	r5, [r1, #0]
 8001092:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001094:	4d13      	ldr	r5, [pc, #76]	; (80010e4 <TIM_OC3_SetConfig+0x68>)
 8001096:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001098:	688d      	ldr	r5, [r1, #8]
 800109a:	022d      	lsls	r5, r5, #8
 800109c:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800109e:	4d12      	ldr	r5, [pc, #72]	; (80010e8 <TIM_OC3_SetConfig+0x6c>)
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d10e      	bne.n	80010c2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80010a4:	4d11      	ldr	r5, [pc, #68]	; (80010ec <TIM_OC3_SetConfig+0x70>)
 80010a6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010a8:	68cb      	ldr	r3, [r1, #12]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80010ae:	4d10      	ldr	r5, [pc, #64]	; (80010f0 <TIM_OC3_SetConfig+0x74>)
 80010b0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80010b2:	4d10      	ldr	r5, [pc, #64]	; (80010f4 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010b4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80010b6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010b8:	698a      	ldr	r2, [r1, #24]
 80010ba:	4332      	orrs	r2, r6
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	432a      	orrs	r2, r5
 80010c0:	e008      	b.n	80010d4 <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010c2:	4d0d      	ldr	r5, [pc, #52]	; (80010f8 <TIM_OC3_SetConfig+0x7c>)
 80010c4:	42a8      	cmp	r0, r5
 80010c6:	d0f4      	beq.n	80010b2 <TIM_OC3_SetConfig+0x36>
 80010c8:	4d0c      	ldr	r5, [pc, #48]	; (80010fc <TIM_OC3_SetConfig+0x80>)
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d0f1      	beq.n	80010b2 <TIM_OC3_SetConfig+0x36>
 80010ce:	4d0c      	ldr	r5, [pc, #48]	; (8001100 <TIM_OC3_SetConfig+0x84>)
 80010d0:	42a8      	cmp	r0, r5
 80010d2:	d0ee      	beq.n	80010b2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010d4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80010d6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80010d8:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80010da:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010dc:	6203      	str	r3, [r0, #32]
}
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	fffffeff 	.word	0xfffffeff
 80010e4:	fffffdff 	.word	0xfffffdff
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	fffff7ff 	.word	0xfffff7ff
 80010f0:	fffffbff 	.word	0xfffffbff
 80010f4:	ffffcfff 	.word	0xffffcfff
 80010f8:	40014000 	.word	0x40014000
 80010fc:	40014400 	.word	0x40014400
 8001100:	40014800 	.word	0x40014800

08001104 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001104:	6a03      	ldr	r3, [r0, #32]
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <TIM_OC4_SetConfig+0x54>)
{
 8001108:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800110a:	4013      	ands	r3, r2
 800110c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800110e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001110:	4c12      	ldr	r4, [pc, #72]	; (800115c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8001112:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001114:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001116:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001118:	680c      	ldr	r4, [r1, #0]
 800111a:	0224      	lsls	r4, r4, #8
 800111c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800111e:	4c10      	ldr	r4, [pc, #64]	; (8001160 <TIM_OC4_SetConfig+0x5c>)
 8001120:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001122:	688c      	ldr	r4, [r1, #8]
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001128:	4c0e      	ldr	r4, [pc, #56]	; (8001164 <TIM_OC4_SetConfig+0x60>)
 800112a:	42a0      	cmp	r0, r4
 800112c:	d008      	beq.n	8001140 <TIM_OC4_SetConfig+0x3c>
 800112e:	4c0e      	ldr	r4, [pc, #56]	; (8001168 <TIM_OC4_SetConfig+0x64>)
 8001130:	42a0      	cmp	r0, r4
 8001132:	d005      	beq.n	8001140 <TIM_OC4_SetConfig+0x3c>
 8001134:	4c0d      	ldr	r4, [pc, #52]	; (800116c <TIM_OC4_SetConfig+0x68>)
 8001136:	42a0      	cmp	r0, r4
 8001138:	d002      	beq.n	8001140 <TIM_OC4_SetConfig+0x3c>
 800113a:	4c0d      	ldr	r4, [pc, #52]	; (8001170 <TIM_OC4_SetConfig+0x6c>)
 800113c:	42a0      	cmp	r0, r4
 800113e:	d104      	bne.n	800114a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001140:	4c0c      	ldr	r4, [pc, #48]	; (8001174 <TIM_OC4_SetConfig+0x70>)
 8001142:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001144:	694c      	ldr	r4, [r1, #20]
 8001146:	01a4      	lsls	r4, r4, #6
 8001148:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800114a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800114c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800114e:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001150:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001152:	6202      	str	r2, [r0, #32]
}
 8001154:	bd30      	pop	{r4, r5, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	ffffefff 	.word	0xffffefff
 800115c:	ffff8cff 	.word	0xffff8cff
 8001160:	ffffdfff 	.word	0xffffdfff
 8001164:	40012c00 	.word	0x40012c00
 8001168:	40014000 	.word	0x40014000
 800116c:	40014400 	.word	0x40014400
 8001170:	40014800 	.word	0x40014800
 8001174:	ffffbfff 	.word	0xffffbfff

08001178 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <TIM_Base_SetConfig+0x74>)
{
 800117a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800117c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800117e:	4290      	cmp	r0, r2
 8001180:	d002      	beq.n	8001188 <TIM_Base_SetConfig+0x10>
 8001182:	4c1b      	ldr	r4, [pc, #108]	; (80011f0 <TIM_Base_SetConfig+0x78>)
 8001184:	42a0      	cmp	r0, r4
 8001186:	d108      	bne.n	800119a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001188:	2470      	movs	r4, #112	; 0x70
 800118a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800118c:	684c      	ldr	r4, [r1, #4]
 800118e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001190:	4290      	cmp	r0, r2
 8001192:	d00e      	beq.n	80011b2 <TIM_Base_SetConfig+0x3a>
 8001194:	4c16      	ldr	r4, [pc, #88]	; (80011f0 <TIM_Base_SetConfig+0x78>)
 8001196:	42a0      	cmp	r0, r4
 8001198:	d00b      	beq.n	80011b2 <TIM_Base_SetConfig+0x3a>
 800119a:	4c16      	ldr	r4, [pc, #88]	; (80011f4 <TIM_Base_SetConfig+0x7c>)
 800119c:	42a0      	cmp	r0, r4
 800119e:	d008      	beq.n	80011b2 <TIM_Base_SetConfig+0x3a>
 80011a0:	4c15      	ldr	r4, [pc, #84]	; (80011f8 <TIM_Base_SetConfig+0x80>)
 80011a2:	42a0      	cmp	r0, r4
 80011a4:	d005      	beq.n	80011b2 <TIM_Base_SetConfig+0x3a>
 80011a6:	4c15      	ldr	r4, [pc, #84]	; (80011fc <TIM_Base_SetConfig+0x84>)
 80011a8:	42a0      	cmp	r0, r4
 80011aa:	d002      	beq.n	80011b2 <TIM_Base_SetConfig+0x3a>
 80011ac:	4c14      	ldr	r4, [pc, #80]	; (8001200 <TIM_Base_SetConfig+0x88>)
 80011ae:	42a0      	cmp	r0, r4
 80011b0:	d103      	bne.n	80011ba <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80011b2:	4c14      	ldr	r4, [pc, #80]	; (8001204 <TIM_Base_SetConfig+0x8c>)
 80011b4:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011b6:	68cc      	ldr	r4, [r1, #12]
 80011b8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ba:	2480      	movs	r4, #128	; 0x80
 80011bc:	43a3      	bics	r3, r4
 80011be:	694c      	ldr	r4, [r1, #20]
 80011c0:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80011c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011c4:	688b      	ldr	r3, [r1, #8]
 80011c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011c8:	680b      	ldr	r3, [r1, #0]
 80011ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011cc:	4290      	cmp	r0, r2
 80011ce:	d008      	beq.n	80011e2 <TIM_Base_SetConfig+0x6a>
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <TIM_Base_SetConfig+0x80>)
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d005      	beq.n	80011e2 <TIM_Base_SetConfig+0x6a>
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <TIM_Base_SetConfig+0x84>)
 80011d8:	4298      	cmp	r0, r3
 80011da:	d002      	beq.n	80011e2 <TIM_Base_SetConfig+0x6a>
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <TIM_Base_SetConfig+0x88>)
 80011de:	4298      	cmp	r0, r3
 80011e0:	d101      	bne.n	80011e6 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80011e2:	690b      	ldr	r3, [r1, #16]
 80011e4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011e6:	2301      	movs	r3, #1
 80011e8:	6143      	str	r3, [r0, #20]
}
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	40012c00 	.word	0x40012c00
 80011f0:	40000400 	.word	0x40000400
 80011f4:	40002000 	.word	0x40002000
 80011f8:	40014000 	.word	0x40014000
 80011fc:	40014400 	.word	0x40014400
 8001200:	40014800 	.word	0x40014800
 8001204:	fffffcff 	.word	0xfffffcff

08001208 <HAL_TIM_OC_Init>:
{
 8001208:	b570      	push	{r4, r5, r6, lr}
 800120a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
  if(htim == NULL)
 800120e:	2c00      	cmp	r4, #0
 8001210:	d014      	beq.n	800123c <HAL_TIM_OC_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001212:	0025      	movs	r5, r4
 8001214:	353d      	adds	r5, #61	; 0x3d
 8001216:	782b      	ldrb	r3, [r5, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800121e:	0022      	movs	r2, r4
 8001220:	323c      	adds	r2, #60	; 0x3c
 8001222:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8001224:	0020      	movs	r0, r4
 8001226:	f000 ffc1 	bl	80021ac <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800122a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800122c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800122e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001230:	1d21      	adds	r1, r4, #4
 8001232:	f7ff ffa1 	bl	8001178 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001236:	2301      	movs	r3, #1
  return HAL_OK;
 8001238:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800123a:	702b      	strb	r3, [r5, #0]
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}

0800123e <HAL_TIM_PWM_Init>:
{
 800123e:	b570      	push	{r4, r5, r6, lr}
 8001240:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
  if(htim == NULL)
 8001244:	2c00      	cmp	r4, #0
 8001246:	d014      	beq.n	8001272 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001248:	0025      	movs	r5, r4
 800124a:	353d      	adds	r5, #61	; 0x3d
 800124c:	782b      	ldrb	r3, [r5, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001254:	0022      	movs	r2, r4
 8001256:	323c      	adds	r2, #60	; 0x3c
 8001258:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 800125a:	0020      	movs	r0, r4
 800125c:	f000 ff82 	bl	8002164 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001260:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001262:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001264:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001266:	1d21      	adds	r1, r4, #4
 8001268:	f7ff ff86 	bl	8001178 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800126c:	2301      	movs	r3, #1
  return HAL_OK;
 800126e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001270:	702b      	strb	r3, [r5, #0]
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}

08001274 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001274:	2210      	movs	r2, #16
 8001276:	6a03      	ldr	r3, [r0, #32]
{
 8001278:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800127a:	4393      	bics	r3, r2
 800127c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800127e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001280:	4d16      	ldr	r5, [pc, #88]	; (80012dc <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8001282:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001284:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001286:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001288:	680d      	ldr	r5, [r1, #0]
 800128a:	022d      	lsls	r5, r5, #8
 800128c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800128e:	2520      	movs	r5, #32
 8001290:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001292:	688d      	ldr	r5, [r1, #8]
 8001294:	012d      	lsls	r5, r5, #4
 8001296:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001298:	4d11      	ldr	r5, [pc, #68]	; (80012e0 <TIM_OC2_SetConfig+0x6c>)
 800129a:	42a8      	cmp	r0, r5
 800129c:	d10f      	bne.n	80012be <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800129e:	2580      	movs	r5, #128	; 0x80
 80012a0:	43aa      	bics	r2, r5
 80012a2:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012a4:	68ca      	ldr	r2, [r1, #12]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80012aa:	2540      	movs	r5, #64	; 0x40
 80012ac:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012ae:	4d0d      	ldr	r5, [pc, #52]	; (80012e4 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012b0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012b2:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012b4:	698b      	ldr	r3, [r1, #24]
 80012b6:	4333      	orrs	r3, r6
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	432b      	orrs	r3, r5
 80012bc:	e008      	b.n	80012d0 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012be:	4d0a      	ldr	r5, [pc, #40]	; (80012e8 <TIM_OC2_SetConfig+0x74>)
 80012c0:	42a8      	cmp	r0, r5
 80012c2:	d0f4      	beq.n	80012ae <TIM_OC2_SetConfig+0x3a>
 80012c4:	4d09      	ldr	r5, [pc, #36]	; (80012ec <TIM_OC2_SetConfig+0x78>)
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d0f1      	beq.n	80012ae <TIM_OC2_SetConfig+0x3a>
 80012ca:	4d09      	ldr	r5, [pc, #36]	; (80012f0 <TIM_OC2_SetConfig+0x7c>)
 80012cc:	42a8      	cmp	r0, r5
 80012ce:	d0ee      	beq.n	80012ae <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80012d0:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80012d2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012d4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012d6:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012d8:	6202      	str	r2, [r0, #32]
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	ffff8cff 	.word	0xffff8cff
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	fffff3ff 	.word	0xfffff3ff
 80012e8:	40014000 	.word	0x40014000
 80012ec:	40014400 	.word	0x40014400
 80012f0:	40014800 	.word	0x40014800

080012f4 <HAL_TIM_OC_ConfigChannel>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012f6:	0004      	movs	r4, r0
 80012f8:	2602      	movs	r6, #2
 80012fa:	343c      	adds	r4, #60	; 0x3c
 80012fc:	7825      	ldrb	r5, [r4, #0]
{
 80012fe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001300:	0030      	movs	r0, r6
 8001302:	2d01      	cmp	r5, #1
 8001304:	d017      	beq.n	8001336 <HAL_TIM_OC_ConfigChannel+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001306:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8001308:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800130a:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 800130c:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800130e:	702e      	strb	r6, [r5, #0]
  switch (Channel)
 8001310:	2a0c      	cmp	r2, #12
 8001312:	d80c      	bhi.n	800132e <HAL_TIM_OC_ConfigChannel+0x3a>
 8001314:	0010      	movs	r0, r2
 8001316:	f7fe ff01 	bl	800011c <__gnu_thumb1_case_uqi>
 800131a:	0a07      	.short	0x0a07
 800131c:	0a0f0a0a 	.word	0x0a0f0a0a
 8001320:	0a130a0a 	.word	0x0a130a0a
 8001324:	0a0a      	.short	0x0a0a
 8001326:	17          	.byte	0x17
 8001327:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f7ff fe63 	bl	8000ff4 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800132e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001330:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001332:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001334:	7020      	strb	r0, [r4, #0]
}
 8001336:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	f7ff ff9b 	bl	8001274 <TIM_OC2_SetConfig>
    break;
 800133e:	e7f6      	b.n	800132e <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff fe9b 	bl	800107c <TIM_OC3_SetConfig>
    break;
 8001346:	e7f2      	b.n	800132e <HAL_TIM_OC_ConfigChannel+0x3a>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f7ff fedb 	bl	8001104 <TIM_OC4_SetConfig>
    break;
 800134e:	e7ee      	b.n	800132e <HAL_TIM_OC_ConfigChannel+0x3a>

08001350 <HAL_TIM_PWM_ConfigChannel>:
{
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001352:	0006      	movs	r6, r0
 8001354:	2302      	movs	r3, #2
 8001356:	363c      	adds	r6, #60	; 0x3c
{
 8001358:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800135a:	7831      	ldrb	r1, [r6, #0]
{
 800135c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800135e:	0018      	movs	r0, r3
 8001360:	2901      	cmp	r1, #1
 8001362:	d025      	beq.n	80013b0 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001364:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8001366:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001368:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800136a:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800136c:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 800136e:	2a0c      	cmp	r2, #12
 8001370:	d81a      	bhi.n	80013a8 <HAL_TIM_PWM_ConfigChannel+0x58>
 8001372:	0010      	movs	r0, r2
 8001374:	f7fe fed2 	bl	800011c <__gnu_thumb1_case_uqi>
 8001378:	18181807 	.word	0x18181807
 800137c:	1818181d 	.word	0x1818181d
 8001380:	1818182f 	.word	0x1818182f
 8001384:	41          	.byte	0x41
 8001385:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001386:	0029      	movs	r1, r5
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	f7ff fe33 	bl	8000ff4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800138e:	2208      	movs	r2, #8
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	6999      	ldr	r1, [r3, #24]
 8001394:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001396:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001398:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	438a      	bics	r2, r1
 800139e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013a4:	430a      	orrs	r2, r1
 80013a6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013ac:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 80013ae:	7030      	strb	r0, [r6, #0]
}
 80013b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013b2:	0029      	movs	r1, r5
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	f7ff ff5d 	bl	8001274 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	6999      	ldr	r1, [r3, #24]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	4915      	ldr	r1, [pc, #84]	; (8001420 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013ce:	692a      	ldr	r2, [r5, #16]
 80013d0:	6999      	ldr	r1, [r3, #24]
 80013d2:	0212      	lsls	r2, r2, #8
 80013d4:	e7e6      	b.n	80013a4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80013d6:	0029      	movs	r1, r5
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	f7ff fe4f 	bl	800107c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013de:	2208      	movs	r2, #8
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	69d9      	ldr	r1, [r3, #28]
 80013e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013e6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	438a      	bics	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013f0:	69da      	ldr	r2, [r3, #28]
 80013f2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013f4:	430a      	orrs	r2, r1
 80013f6:	61da      	str	r2, [r3, #28]
    break;
 80013f8:	e7d6      	b.n	80013a8 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013fa:	0029      	movs	r1, r5
 80013fc:	6820      	ldr	r0, [r4, #0]
 80013fe:	f7ff fe81 	bl	8001104 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	69d9      	ldr	r1, [r3, #28]
 800140a:	430a      	orrs	r2, r1
 800140c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001412:	400a      	ands	r2, r1
 8001414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001416:	692a      	ldr	r2, [r5, #16]
 8001418:	69d9      	ldr	r1, [r3, #28]
 800141a:	0212      	lsls	r2, r2, #8
 800141c:	e7ea      	b.n	80013f4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	fffffbff 	.word	0xfffffbff

08001424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001424:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001426:	2401      	movs	r4, #1
 8001428:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800142a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800142c:	6a03      	ldr	r3, [r0, #32]
 800142e:	43a3      	bics	r3, r4
 8001430:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001432:	6a03      	ldr	r3, [r0, #32]
 8001434:	431a      	orrs	r2, r3
 8001436:	6202      	str	r2, [r0, #32]
}
 8001438:	bd10      	pop	{r4, pc}
	...

0800143c <HAL_TIM_PWM_Start>:
{
 800143c:	b510      	push	{r4, lr}
 800143e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001440:	2201      	movs	r2, #1
 8001442:	6800      	ldr	r0, [r0, #0]
 8001444:	f7ff ffee 	bl	8001424 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_TIM_PWM_Start+0x3c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d008      	beq.n	8001462 <HAL_TIM_PWM_Start+0x26>
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_TIM_PWM_Start+0x40>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d005      	beq.n	8001462 <HAL_TIM_PWM_Start+0x26>
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_TIM_PWM_Start+0x44>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d002      	beq.n	8001462 <HAL_TIM_PWM_Start+0x26>
 800145c:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_TIM_PWM_Start+0x48>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d104      	bne.n	800146c <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	430a      	orrs	r2, r1
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800146c:	2201      	movs	r2, #1
 800146e:	6819      	ldr	r1, [r3, #0]
}
 8001470:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bd10      	pop	{r4, pc}
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40014000 	.word	0x40014000
 8001480:	40014400 	.word	0x40014400
 8001484:	40014800 	.word	0x40014800

08001488 <HAL_TIM_PWM_Start_IT>:
{
 8001488:	b510      	push	{r4, lr}
 800148a:	0004      	movs	r4, r0
  switch (Channel)
 800148c:	290c      	cmp	r1, #12
 800148e:	d80e      	bhi.n	80014ae <HAL_TIM_PWM_Start_IT+0x26>
 8001490:	0008      	movs	r0, r1
 8001492:	f7fe fe43 	bl	800011c <__gnu_thumb1_case_uqi>
 8001496:	0c07      	.short	0x0c07
 8001498:	0c280c0c 	.word	0x0c280c0c
 800149c:	0c2c0c0c 	.word	0x0c2c0c0c
 80014a0:	0c0c      	.short	0x0c0c
 80014a2:	30          	.byte	0x30
 80014a3:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80014a4:	2302      	movs	r3, #2
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80014aa:	4303      	orrs	r3, r0
 80014ac:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014ae:	2201      	movs	r2, #1
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	f7ff ffb7 	bl	8001424 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_TIM_PWM_Start_IT+0x78>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d008      	beq.n	80014d0 <HAL_TIM_PWM_Start_IT+0x48>
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_TIM_PWM_Start_IT+0x7c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d005      	beq.n	80014d0 <HAL_TIM_PWM_Start_IT+0x48>
 80014c4:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_TIM_PWM_Start_IT+0x80>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d002      	beq.n	80014d0 <HAL_TIM_PWM_Start_IT+0x48>
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_TIM_PWM_Start_IT+0x84>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d104      	bne.n	80014da <HAL_TIM_PWM_Start_IT+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014d4:	0212      	lsls	r2, r2, #8
 80014d6:	430a      	orrs	r2, r1
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80014da:	2201      	movs	r2, #1
 80014dc:	6819      	ldr	r1, [r3, #0]
}
 80014de:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80014e6:	6822      	ldr	r2, [r4, #0]
 80014e8:	2304      	movs	r3, #4
 80014ea:	68d0      	ldr	r0, [r2, #12]
 80014ec:	e7dd      	b.n	80014aa <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	2308      	movs	r3, #8
 80014f2:	68d0      	ldr	r0, [r2, #12]
 80014f4:	e7d9      	b.n	80014aa <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	2310      	movs	r3, #16
 80014fa:	68d0      	ldr	r0, [r2, #12]
 80014fc:	e7d5      	b.n	80014aa <HAL_TIM_PWM_Start_IT+0x22>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40014000 	.word	0x40014000
 8001508:	40014400 	.word	0x40014400
 800150c:	40014800 	.word	0x40014800

08001510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001510:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001512:	0004      	movs	r4, r0
 8001514:	343c      	adds	r4, #60	; 0x3c
 8001516:	7822      	ldrb	r2, [r4, #0]
{
 8001518:	0003      	movs	r3, r0
 800151a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800151c:	2a01      	cmp	r2, #1
 800151e:	d017      	beq.n	8001550 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001520:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001522:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	353d      	adds	r5, #61	; 0x3d
 8001526:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	306e      	adds	r0, #110	; 0x6e
 800152c:	4382      	bics	r2, r0
 800152e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001534:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001536:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001538:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800153a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	4382      	bics	r2, r0
 8001540:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001542:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001544:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800154a:	2301      	movs	r3, #1
 800154c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800154e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001550:	bd30      	pop	{r4, r5, pc}
	...

08001554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001554:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001556:	0004      	movs	r4, r0
 8001558:	343c      	adds	r4, #60	; 0x3c
 800155a:	7823      	ldrb	r3, [r4, #0]
{
 800155c:	0002      	movs	r2, r0
 800155e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001560:	2b01      	cmp	r3, #1
 8001562:	d024      	beq.n	80015ae <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8001564:	0015      	movs	r5, r2
 8001566:	353d      	adds	r5, #61	; 0x3d
 8001568:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800156c:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800156e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001570:	4003      	ands	r3, r0
 8001572:	6888      	ldr	r0, [r1, #8]
 8001574:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001578:	4003      	ands	r3, r0
 800157a:	6848      	ldr	r0, [r1, #4]
 800157c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8001580:	4003      	ands	r3, r0
 8001582:	6808      	ldr	r0, [r1, #0]
 8001584:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8001588:	4003      	ands	r3, r0
 800158a:	6908      	ldr	r0, [r1, #16]
 800158c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8001590:	4003      	ands	r3, r0
 8001592:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001594:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001596:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 800159a:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800159e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015a0:	4003      	ands	r3, r0
 80015a2:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80015a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015a8:	2301      	movs	r3, #1
 80015aa:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80015ac:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80015ae:	bd30      	pop	{r4, r5, pc}
 80015b0:	fffffcff 	.word	0xfffffcff
 80015b4:	fffffbff 	.word	0xfffffbff
 80015b8:	fffff7ff 	.word	0xfffff7ff
 80015bc:	ffffefff 	.word	0xffffefff
 80015c0:	ffffdfff 	.word	0xffffdfff
 80015c4:	ffffbfff 	.word	0xffffbfff
 80015c8:	ffff7fff 	.word	0xffff7fff

080015cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015cc:	6803      	ldr	r3, [r0, #0]
 80015ce:	4906      	ldr	r1, [pc, #24]	; (80015e8 <UART_EndRxTransfer+0x1c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015d2:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	3123      	adds	r1, #35	; 0x23
 80015dc:	31ff      	adds	r1, #255	; 0xff
 80015de:	438a      	bics	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80015e2:	2320      	movs	r3, #32
 80015e4:	7003      	strb	r3, [r0, #0]
}
 80015e6:	4770      	bx	lr
 80015e8:	fffffedf 	.word	0xfffffedf

080015ec <HAL_UART_TxCpltCallback>:
 80015ec:	4770      	bx	lr

080015ee <HAL_UART_RxCpltCallback>:
 80015ee:	4770      	bx	lr

080015f0 <HAL_UART_ErrorCallback>:
 80015f0:	4770      	bx	lr

080015f2 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80015f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	0002      	movs	r2, r0
{
 80015f8:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80015fa:	325a      	adds	r2, #90	; 0x5a
 80015fc:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80015fe:	3a08      	subs	r2, #8
 8001600:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8001602:	f7ff fff5 	bl	80015f0 <HAL_UART_ErrorCallback>
}
 8001606:	bd10      	pop	{r4, pc}

08001608 <UART_SetConfig>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800160c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800160e:	69c2      	ldr	r2, [r0, #28]
 8001610:	6883      	ldr	r3, [r0, #8]
 8001612:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001614:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001616:	4303      	orrs	r3, r0
 8001618:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800161a:	4e3f      	ldr	r6, [pc, #252]	; (8001718 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800161c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800161e:	483f      	ldr	r0, [pc, #252]	; (800171c <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001620:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001622:	4001      	ands	r1, r0
 8001624:	430b      	orrs	r3, r1
 8001626:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001628:	686b      	ldr	r3, [r5, #4]
 800162a:	493d      	ldr	r1, [pc, #244]	; (8001720 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800162c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800162e:	400b      	ands	r3, r1
 8001630:	68e1      	ldr	r1, [r4, #12]
 8001632:	430b      	orrs	r3, r1
 8001634:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001636:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001638:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800163a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800163c:	4839      	ldr	r0, [pc, #228]	; (8001724 <UART_SetConfig+0x11c>)
 800163e:	4001      	ands	r1, r0
 8001640:	430b      	orrs	r3, r1
 8001642:	60ab      	str	r3, [r5, #8]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001648:	42b5      	cmp	r5, r6
 800164a:	d110      	bne.n	800166e <UART_SetConfig+0x66>
 800164c:	2003      	movs	r0, #3
 800164e:	4936      	ldr	r1, [pc, #216]	; (8001728 <UART_SetConfig+0x120>)
 8001650:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001652:	4001      	ands	r1, r0
 8001654:	4835      	ldr	r0, [pc, #212]	; (800172c <UART_SetConfig+0x124>)
 8001656:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001658:	429a      	cmp	r2, r3
 800165a:	d013      	beq.n	8001684 <UART_SetConfig+0x7c>
    switch (clocksource)
 800165c:	2808      	cmp	r0, #8
 800165e:	d858      	bhi.n	8001712 <UART_SetConfig+0x10a>
 8001660:	f7fe fd5c 	bl	800011c <__gnu_thumb1_case_uqi>
 8001664:	57425737 	.word	0x57425737
 8001668:	5757574b 	.word	0x5757574b
 800166c:	50          	.byte	0x50
 800166d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800166e:	4930      	ldr	r1, [pc, #192]	; (8001730 <UART_SetConfig+0x128>)
 8001670:	428d      	cmp	r5, r1
 8001672:	d14c      	bne.n	800170e <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001674:	429a      	cmp	r2, r3
 8001676:	d12c      	bne.n	80016d2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001678:	f7ff fc28 	bl	8000ecc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	0040      	lsls	r0, r0, #1
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	e00b      	b.n	800169c <UART_SetConfig+0x94>
    switch (clocksource)
 8001684:	2808      	cmp	r0, #8
 8001686:	d821      	bhi.n	80016cc <UART_SetConfig+0xc4>
 8001688:	f7fe fd3e 	bl	8000108 <__gnu_thumb1_case_sqi>
 800168c:	200520f6 	.word	0x200520f6
 8001690:	20202018 	.word	0x20202018
 8001694:	1b          	.byte	0x1b
 8001695:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001696:	6863      	ldr	r3, [r4, #4]
 8001698:	0858      	lsrs	r0, r3, #1
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800169c:	18c0      	adds	r0, r0, r3
 800169e:	6861      	ldr	r1, [r4, #4]
 80016a0:	f7fe fd46 	bl	8000130 <__udivsi3>
 80016a4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80016a6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80016a8:	220f      	movs	r2, #15
 80016aa:	0019      	movs	r1, r3
 80016ac:	4391      	bics	r1, r2
 80016ae:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016b0:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80016b2:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016b4:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]
}
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016bc:	f7ff fb38 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 80016c0:	e7dc      	b.n	800167c <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	0858      	lsrs	r0, r3, #1
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	e7e7      	b.n	800169c <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e7ea      	b.n	80016a8 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016d2:	f7ff fbfb 	bl	8000ecc <HAL_RCC_GetPCLK1Freq>
 80016d6:	6861      	ldr	r1, [r4, #4]
 80016d8:	084b      	lsrs	r3, r1, #1
 80016da:	1818      	adds	r0, r3, r0
 80016dc:	f7fe fd28 	bl	8000130 <__udivsi3>
 80016e0:	b280      	uxth	r0, r0
 80016e2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80016e4:	2000      	movs	r0, #0
        break;
 80016e6:	e7e8      	b.n	80016ba <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016e8:	6861      	ldr	r1, [r4, #4]
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <UART_SetConfig+0x130>)
 80016ec:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016ee:	18c0      	adds	r0, r0, r3
 80016f0:	f7fe fd1e 	bl	8000130 <__udivsi3>
 80016f4:	b280      	uxth	r0, r0
 80016f6:	60f0      	str	r0, [r6, #12]
 80016f8:	e7f4      	b.n	80016e4 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016fa:	f7ff fb19 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 80016fe:	6861      	ldr	r1, [r4, #4]
 8001700:	084b      	lsrs	r3, r1, #1
 8001702:	e7f4      	b.n	80016ee <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	6861      	ldr	r1, [r4, #4]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	0848      	lsrs	r0, r1, #1
 800170c:	e7ef      	b.n	80016ee <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800170e:	429a      	cmp	r2, r3
 8001710:	d0dc      	beq.n	80016cc <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001712:	2001      	movs	r0, #1
  return ret;
 8001714:	e7d1      	b.n	80016ba <UART_SetConfig+0xb2>
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40013800 	.word	0x40013800
 800171c:	ffff69f3 	.word	0xffff69f3
 8001720:	ffffcfff 	.word	0xffffcfff
 8001724:	fffff4ff 	.word	0xfffff4ff
 8001728:	40021000 	.word	0x40021000
 800172c:	08002614 	.word	0x08002614
 8001730:	40004400 	.word	0x40004400
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200

0800173c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800173c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800173e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001740:	07da      	lsls	r2, r3, #31
 8001742:	d506      	bpl.n	8001752 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001744:	6801      	ldr	r1, [r0, #0]
 8001746:	4c28      	ldr	r4, [pc, #160]	; (80017e8 <UART_AdvFeatureConfig+0xac>)
 8001748:	684a      	ldr	r2, [r1, #4]
 800174a:	4022      	ands	r2, r4
 800174c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800174e:	4322      	orrs	r2, r4
 8001750:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001752:	079a      	lsls	r2, r3, #30
 8001754:	d506      	bpl.n	8001764 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001756:	6801      	ldr	r1, [r0, #0]
 8001758:	4c24      	ldr	r4, [pc, #144]	; (80017ec <UART_AdvFeatureConfig+0xb0>)
 800175a:	684a      	ldr	r2, [r1, #4]
 800175c:	4022      	ands	r2, r4
 800175e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001760:	4322      	orrs	r2, r4
 8001762:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001764:	075a      	lsls	r2, r3, #29
 8001766:	d506      	bpl.n	8001776 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001768:	6801      	ldr	r1, [r0, #0]
 800176a:	4c21      	ldr	r4, [pc, #132]	; (80017f0 <UART_AdvFeatureConfig+0xb4>)
 800176c:	684a      	ldr	r2, [r1, #4]
 800176e:	4022      	ands	r2, r4
 8001770:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001772:	4322      	orrs	r2, r4
 8001774:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001776:	071a      	lsls	r2, r3, #28
 8001778:	d506      	bpl.n	8001788 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800177a:	6801      	ldr	r1, [r0, #0]
 800177c:	4c1d      	ldr	r4, [pc, #116]	; (80017f4 <UART_AdvFeatureConfig+0xb8>)
 800177e:	684a      	ldr	r2, [r1, #4]
 8001780:	4022      	ands	r2, r4
 8001782:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001784:	4322      	orrs	r2, r4
 8001786:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001788:	06da      	lsls	r2, r3, #27
 800178a:	d506      	bpl.n	800179a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800178c:	6801      	ldr	r1, [r0, #0]
 800178e:	4c1a      	ldr	r4, [pc, #104]	; (80017f8 <UART_AdvFeatureConfig+0xbc>)
 8001790:	688a      	ldr	r2, [r1, #8]
 8001792:	4022      	ands	r2, r4
 8001794:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001796:	4322      	orrs	r2, r4
 8001798:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800179a:	069a      	lsls	r2, r3, #26
 800179c:	d506      	bpl.n	80017ac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800179e:	6801      	ldr	r1, [r0, #0]
 80017a0:	4c16      	ldr	r4, [pc, #88]	; (80017fc <UART_AdvFeatureConfig+0xc0>)
 80017a2:	688a      	ldr	r2, [r1, #8]
 80017a4:	4022      	ands	r2, r4
 80017a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80017a8:	4322      	orrs	r2, r4
 80017aa:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017ac:	065a      	lsls	r2, r3, #25
 80017ae:	d510      	bpl.n	80017d2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017b0:	6801      	ldr	r1, [r0, #0]
 80017b2:	4d13      	ldr	r5, [pc, #76]	; (8001800 <UART_AdvFeatureConfig+0xc4>)
 80017b4:	684a      	ldr	r2, [r1, #4]
 80017b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80017b8:	402a      	ands	r2, r5
 80017ba:	4322      	orrs	r2, r4
 80017bc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0352      	lsls	r2, r2, #13
 80017c2:	4294      	cmp	r4, r2
 80017c4:	d105      	bne.n	80017d2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017c6:	684a      	ldr	r2, [r1, #4]
 80017c8:	4c0e      	ldr	r4, [pc, #56]	; (8001804 <UART_AdvFeatureConfig+0xc8>)
 80017ca:	4022      	ands	r2, r4
 80017cc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017ce:	4322      	orrs	r2, r4
 80017d0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	d506      	bpl.n	80017e4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	490b      	ldr	r1, [pc, #44]	; (8001808 <UART_AdvFeatureConfig+0xcc>)
 80017da:	6853      	ldr	r3, [r2, #4]
 80017dc:	400b      	ands	r3, r1
 80017de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6053      	str	r3, [r2, #4]
}
 80017e4:	bd30      	pop	{r4, r5, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	fffdffff 	.word	0xfffdffff
 80017ec:	fffeffff 	.word	0xfffeffff
 80017f0:	fffbffff 	.word	0xfffbffff
 80017f4:	ffff7fff 	.word	0xffff7fff
 80017f8:	ffffefff 	.word	0xffffefff
 80017fc:	ffffdfff 	.word	0xffffdfff
 8001800:	ffefffff 	.word	0xffefffff
 8001804:	ff9fffff 	.word	0xff9fffff
 8001808:	fff7ffff 	.word	0xfff7ffff

0800180c <HAL_UART_Init>:
{
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001810:	d101      	bne.n	8001816 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
}
 8001814:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001816:	0005      	movs	r5, r0
 8001818:	3569      	adds	r5, #105	; 0x69
 800181a:	782b      	ldrb	r3, [r5, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d104      	bne.n	800182c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001822:	0002      	movs	r2, r0
 8001824:	3268      	adds	r2, #104	; 0x68
 8001826:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001828:	f000 fe3e 	bl	80024a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800182c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800182e:	2101      	movs	r1, #1
 8001830:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001832:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001834:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001836:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001838:	438b      	bics	r3, r1
 800183a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800183c:	f7ff fee4 	bl	8001608 <UART_SetConfig>
 8001840:	2801      	cmp	r0, #1
 8001842:	d0e6      	beq.n	8001812 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800184a:	0020      	movs	r0, r4
 800184c:	f7ff ff76 	bl	800173c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	490b      	ldr	r1, [pc, #44]	; (8001880 <HAL_UART_Init+0x74>)
 8001854:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001856:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001858:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800185a:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800185c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	438a      	bics	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001864:	2201      	movs	r2, #1
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800186c:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001870:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001872:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8001874:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001876:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001878:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800187a:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800187c:	e7ca      	b.n	8001814 <HAL_UART_Init+0x8>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	fffff7ff 	.word	0xfffff7ff

08001884 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001884:	0003      	movs	r3, r0
{
 8001886:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001888:	3369      	adds	r3, #105	; 0x69
 800188a:	781b      	ldrb	r3, [r3, #0]
{
 800188c:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800188e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001890:	2b21      	cmp	r3, #33	; 0x21
 8001892:	d10f      	bne.n	80018b4 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8001894:	0014      	movs	r4, r2
 8001896:	3452      	adds	r4, #82	; 0x52
 8001898:	8823      	ldrh	r3, [r4, #0]
 800189a:	6811      	ldr	r1, [r2, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80018a2:	680a      	ldr	r2, [r1, #0]
 80018a4:	307e      	adds	r0, #126	; 0x7e
 80018a6:	4382      	bics	r2, r0
 80018a8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	6808      	ldr	r0, [r1, #0]
 80018ae:	4302      	orrs	r2, r0
 80018b0:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 80018b2:	2000      	movs	r0, #0
  }
}
 80018b4:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018b6:	2080      	movs	r0, #128	; 0x80
 80018b8:	6895      	ldr	r5, [r2, #8]
 80018ba:	0140      	lsls	r0, r0, #5
 80018bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018be:	4285      	cmp	r5, r0
 80018c0:	d10d      	bne.n	80018de <UART_Transmit_IT+0x5a>
 80018c2:	6910      	ldr	r0, [r2, #16]
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d10a      	bne.n	80018de <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80018c8:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80018ca:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80018cc:	05c0      	lsls	r0, r0, #23
 80018ce:	0dc0      	lsrs	r0, r0, #23
 80018d0:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80018d2:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80018d4:	8823      	ldrh	r3, [r4, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29b      	uxth	r3, r3
 80018da:	8023      	strh	r3, [r4, #0]
 80018dc:	e7e9      	b.n	80018b2 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80018de:	1c58      	adds	r0, r3, #1
 80018e0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	850b      	strh	r3, [r1, #40]	; 0x28
 80018e6:	e7f5      	b.n	80018d4 <UART_Transmit_IT+0x50>

080018e8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018e8:	2140      	movs	r1, #64	; 0x40
 80018ea:	6802      	ldr	r2, [r0, #0]
{
 80018ec:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	438b      	bics	r3, r1
 80018f2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018f4:	0003      	movs	r3, r0
 80018f6:	2220      	movs	r2, #32
 80018f8:	3369      	adds	r3, #105	; 0x69
 80018fa:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80018fc:	f7ff fe76 	bl	80015ec <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001900:	2000      	movs	r0, #0
 8001902:	bd10      	pop	{r4, pc}

08001904 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001904:	0002      	movs	r2, r0
{
 8001906:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001908:	326a      	adds	r2, #106	; 0x6a
 800190a:	7811      	ldrb	r1, [r2, #0]
 800190c:	6803      	ldr	r3, [r0, #0]
 800190e:	2922      	cmp	r1, #34	; 0x22
 8001910:	d12d      	bne.n	800196e <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8001912:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001914:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8001916:	315c      	adds	r1, #92	; 0x5c
 8001918:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800191a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800191c:	0164      	lsls	r4, r4, #5
 800191e:	4029      	ands	r1, r5
 8001920:	6885      	ldr	r5, [r0, #8]
 8001922:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001924:	42a5      	cmp	r5, r4
 8001926:	d11e      	bne.n	8001966 <UART_Receive_IT+0x62>
 8001928:	6904      	ldr	r4, [r0, #16]
 800192a:	2c00      	cmp	r4, #0
 800192c:	d11b      	bne.n	8001966 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800192e:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8001930:	3302      	adds	r3, #2
 8001932:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001934:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8001936:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8001938:	315a      	adds	r1, #90	; 0x5a
 800193a:	880b      	ldrh	r3, [r1, #0]
 800193c:	3b01      	subs	r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	800b      	strh	r3, [r1, #0]
 8001942:	42a3      	cmp	r3, r4
 8001944:	d10d      	bne.n	8001962 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	4d0c      	ldr	r5, [pc, #48]	; (800197c <UART_Receive_IT+0x78>)
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	4029      	ands	r1, r5
 800194e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	3523      	adds	r5, #35	; 0x23
 8001954:	35ff      	adds	r5, #255	; 0xff
 8001956:	43a9      	bics	r1, r5
 8001958:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800195a:	2320      	movs	r3, #32
 800195c:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800195e:	f7ff fe46 	bl	80015ee <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001962:	0020      	movs	r0, r4
 8001964:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001966:	1c5c      	adds	r4, r3, #1
 8001968:	6544      	str	r4, [r0, #84]	; 0x54
 800196a:	7019      	strb	r1, [r3, #0]
 800196c:	e7e2      	b.n	8001934 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800196e:	2208      	movs	r2, #8
 8001970:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8001972:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001978:	e7f3      	b.n	8001962 <UART_Receive_IT+0x5e>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	fffffedf 	.word	0xfffffedf

08001980 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001980:	220f      	movs	r2, #15
{
 8001982:	b570      	push	{r4, r5, r6, lr}
 8001984:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001986:	6800      	ldr	r0, [r0, #0]
 8001988:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800198a:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800198c:	401a      	ands	r2, r3
  if (errorflags == RESET)
 800198e:	d108      	bne.n	80019a2 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001990:	2520      	movs	r5, #32
 8001992:	422b      	tst	r3, r5
 8001994:	d005      	beq.n	80019a2 <HAL_UART_IRQHandler+0x22>
 8001996:	4229      	tst	r1, r5
 8001998:	d003      	beq.n	80019a2 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800199a:	0020      	movs	r0, r4
 800199c:	f7ff ffb2 	bl	8001904 <UART_Receive_IT>
}
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80019a2:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d060      	beq.n	8001a6a <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80019a8:	2201      	movs	r2, #1
 80019aa:	4015      	ands	r5, r2
 80019ac:	d103      	bne.n	80019b6 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80019ae:	2690      	movs	r6, #144	; 0x90
 80019b0:	0076      	lsls	r6, r6, #1
 80019b2:	4231      	tst	r1, r6
 80019b4:	d059      	beq.n	8001a6a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019b6:	4213      	tst	r3, r2
 80019b8:	d005      	beq.n	80019c6 <HAL_UART_IRQHandler+0x46>
 80019ba:	05ce      	lsls	r6, r1, #23
 80019bc:	d503      	bpl.n	80019c6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80019be:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019c0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019c2:	4332      	orrs	r2, r6
 80019c4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019c6:	2202      	movs	r2, #2
 80019c8:	4213      	tst	r3, r2
 80019ca:	d006      	beq.n	80019da <HAL_UART_IRQHandler+0x5a>
 80019cc:	2d00      	cmp	r5, #0
 80019ce:	d004      	beq.n	80019da <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80019d0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019d2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019d4:	1892      	adds	r2, r2, r2
 80019d6:	4332      	orrs	r2, r6
 80019d8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019da:	2204      	movs	r2, #4
 80019dc:	4213      	tst	r3, r2
 80019de:	d006      	beq.n	80019ee <HAL_UART_IRQHandler+0x6e>
 80019e0:	2d00      	cmp	r5, #0
 80019e2:	d004      	beq.n	80019ee <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80019e4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019e6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019e8:	3a02      	subs	r2, #2
 80019ea:	4332      	orrs	r2, r6
 80019ec:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80019ee:	071a      	lsls	r2, r3, #28
 80019f0:	d508      	bpl.n	8001a04 <HAL_UART_IRQHandler+0x84>
 80019f2:	068a      	lsls	r2, r1, #26
 80019f4:	d401      	bmi.n	80019fa <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80019fa:	2208      	movs	r2, #8
 80019fc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001a00:	4302      	orrs	r2, r0
 8001a02:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a04:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d0ca      	beq.n	80019a0 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	4213      	tst	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_UART_IRQHandler+0x9a>
 8001a10:	4211      	tst	r1, r2
 8001a12:	d002      	beq.n	8001a1a <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8001a14:	0020      	movs	r0, r4
 8001a16:	f7ff ff75 	bl	8001904 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8001a1c:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a1e:	071b      	lsls	r3, r3, #28
 8001a20:	d404      	bmi.n	8001a2c <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	689d      	ldr	r5, [r3, #8]
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a2a:	d01a      	beq.n	8001a62 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8001a2c:	f7ff fdce 	bl	80015cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a30:	2140      	movs	r1, #64	; 0x40
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	420a      	tst	r2, r1
 8001a38:	d00f      	beq.n	8001a5a <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a3a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001a3c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a3e:	438a      	bics	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_UART_IRQHandler+0x114>)
 8001a48:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a4a:	f7fe fdd3 	bl	80005f4 <HAL_DMA_Abort_IT>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d0a6      	beq.n	80019a0 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a52:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001a54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a56:	4798      	blx	r3
 8001a58:	e7a2      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001a5a:	0020      	movs	r0, r4
 8001a5c:	f7ff fdc8 	bl	80015f0 <HAL_UART_ErrorCallback>
 8001a60:	e79e      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8001a62:	f7ff fdc5 	bl	80015f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a66:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001a68:	e79a      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	4213      	tst	r3, r2
 8001a6e:	d005      	beq.n	8001a7c <HAL_UART_IRQHandler+0xfc>
 8001a70:	4211      	tst	r1, r2
 8001a72:	d003      	beq.n	8001a7c <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8001a74:	0020      	movs	r0, r4
 8001a76:	f7ff ff05 	bl	8001884 <UART_Transmit_IT>
    return;
 8001a7a:	e791      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	4213      	tst	r3, r2
 8001a80:	d100      	bne.n	8001a84 <HAL_UART_IRQHandler+0x104>
 8001a82:	e78d      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
 8001a84:	4211      	tst	r1, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_UART_IRQHandler+0x10a>
 8001a88:	e78a      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7ff ff2c 	bl	80018e8 <UART_EndTransmit_IT>
    return;
 8001a90:	e786      	b.n	80019a0 <HAL_UART_IRQHandler+0x20>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	080015f3 	.word	0x080015f3

08001a98 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001a98:	b530      	push	{r4, r5, lr}
 8001a9a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	a801      	add	r0, sp, #4
 8001aa2:	f000 fd92 	bl	80025ca <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa6:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8001aa8:	4c34      	ldr	r4, [pc, #208]	; (8001b7c <MX_ADC_Init+0xe4>)
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <MX_ADC_Init+0xe8>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aac:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8001aae:	32fc      	adds	r2, #252	; 0xfc
 8001ab0:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ab2:	2280      	movs	r2, #128	; 0x80
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ab4:	2500      	movs	r5, #0
  hadc.Instance = ADC1;
 8001ab6:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ab8:	2301      	movs	r3, #1
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001aba:	00d2      	lsls	r2, r2, #3
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001abc:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001abe:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ac4:	6123      	str	r3, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001ac6:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001ac8:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001aca:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001acc:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ace:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ad0:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ad2:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ad4:	f7fe fbe8 	bl	80002a8 <HAL_ADC_Init>
 8001ad8:	42a8      	cmp	r0, r5
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC_Init+0x48>
  {
    Error_Handler();
 8001adc:	f000 fa74 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ae6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ae8:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aea:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aec:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001aee:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001af0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001af2:	f7fe fc7f 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC_Init+0x66>
  {
    Error_Handler();
 8001afa:	f000 fa65 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001afe:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b00:	a901      	add	r1, sp, #4
 8001b02:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001b04:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b06:	f7fe fc75 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8001b0e:	f000 fa5b 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b12:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b14:	a901      	add	r1, sp, #4
 8001b16:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001b18:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b1a:	f7fe fc6b 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d001      	beq.n	8001b26 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8001b22:	f000 fa51 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b26:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b28:	a901      	add	r1, sp, #4
 8001b2a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001b2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b2e:	f7fe fc61 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d001      	beq.n	8001b3a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001b36:	f000 fa47 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b3a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b3c:	a901      	add	r1, sp, #4
 8001b3e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001b40:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b42:	f7fe fc57 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001b4a:	f000 fa3d 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b4e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b50:	a901      	add	r1, sp, #4
 8001b52:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8001b54:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b56:	f7fe fc4d 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC_Init+0xca>
  {
    Error_Handler();
 8001b5e:	f000 fa33 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b62:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b64:	a901      	add	r1, sp, #4
 8001b66:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8001b68:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b6a:	f7fe fc43 	bl	80003f4 <HAL_ADC_ConfigChannel>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001b72:	f000 fa29 	bl	8001fc8 <Error_Handler>
  }

}
 8001b76:	b005      	add	sp, #20
 8001b78:	bd30      	pop	{r4, r5, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000088 	.word	0x20000088
 8001b80:	40012400 	.word	0x40012400

08001b84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b84:	b530      	push	{r4, r5, lr}
 8001b86:	0005      	movs	r5, r0
 8001b88:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	2214      	movs	r2, #20
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	a803      	add	r0, sp, #12
 8001b90:	f000 fd1b 	bl	80025ca <memset>
  if(adcHandle->Instance==ADC1)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_ADC_MspInit+0x88>)
 8001b96:	682a      	ldr	r2, [r5, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d135      	bne.n	8001c08 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b9c:	2080      	movs	r0, #128	; 0x80
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_ADC_MspInit+0x8c>)
 8001ba0:	0080      	lsls	r0, r0, #2
 8001ba2:	6999      	ldr	r1, [r3, #24]
 8001ba4:	4301      	orrs	r1, r0
 8001ba6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001baa:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bae:	4002      	ands	r2, r0
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	695a      	ldr	r2, [r3, #20]
    */
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
                          |CURRENT_PHASE_V_Pin|CURRENT_PHASE_W_Pin|THROTTLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 8001bc6:	237f      	movs	r3, #127	; 0x7f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 8001bca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bcc:	3b7c      	subs	r3, #124	; 0x7c
 8001bce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f7fe fd7c 	bl	80006cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001bd4:	4c0f      	ldr	r4, [pc, #60]	; (8001c14 <HAL_ADC_MspInit+0x90>)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001bd8:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8001bda:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bdc:	2300      	movs	r3, #0
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001bde:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001be0:	1892      	adds	r2, r2, r2
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be2:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001be6:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001be8:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bea:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001bec:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bee:	00d2      	lsls	r2, r2, #3
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf0:	019b      	lsls	r3, r3, #6
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001bf2:	0020      	movs	r0, r4
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf4:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001bf8:	f7fe fcc6 	bl	8000588 <HAL_DMA_Init>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001c00:	f000 f9e2 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001c04:	63ec      	str	r4, [r5, #60]	; 0x3c
 8001c06:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c08:	b009      	add	sp, #36	; 0x24
 8001c0a:	bd30      	pop	{r4, r5, pc}
 8001c0c:	40012400 	.word	0x40012400
 8001c10:	40021000 	.word	0x40021000
 8001c14:	20000040 	.word	0x20000040
 8001c18:	40020008 	.word	0x40020008

08001c1c <UpdateWaveform>:
  * @brief Function to update a specific phase waveform
  * @param phase to update
  * @retval none
  */
void UpdateWaveform(phase_t phase)
{
 8001c1c:	b530      	push	{r4, r5, lr}
	switch(phase)
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d002      	beq.n	8001c28 <UpdateWaveform+0xc>
 8001c22:	2801      	cmp	r0, #1
 8001c24:	d044      	beq.n	8001cb0 <UpdateWaveform+0x94>
	case phase_W:
		return;
	default:
		return;
	}
}
 8001c26:	bd30      	pop	{r4, r5, pc}
	    if(waveformU_state == waveform_running)
 8001c28:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <UpdateWaveform+0x10c>)
 8001c2a:	7813      	ldrb	r3, [r2, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d11f      	bne.n	8001c70 <UpdateWaveform+0x54>
	        waveformU_switchCount++;
 8001c30:	493e      	ldr	r1, [pc, #248]	; (8001d2c <UpdateWaveform+0x110>)
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8001c32:	4c3f      	ldr	r4, [pc, #252]	; (8001d30 <UpdateWaveform+0x114>)
	        waveformU_switchCount++;
 8001c34:	680b      	ldr	r3, [r1, #0]
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8001c36:	6824      	ldr	r4, [r4, #0]
	        waveformU_switchCount++;
 8001c38:	3301      	adds	r3, #1
 8001c3a:	600b      	str	r3, [r1, #0]
	        if(waveformU_switchCount >= waveform_maxSwitches)
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	d3f2      	bcc.n	8001c26 <UpdateWaveform+0xa>
	        	if(phaseU_low_state == switchOpen)
 8001c40:	4c3c      	ldr	r4, [pc, #240]	; (8001d34 <UpdateWaveform+0x118>)
 8001c42:	7823      	ldrb	r3, [r4, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <UpdateWaveform+0x42>
	        		phaseU_low_state = switchClosing;
 8001c48:	2002      	movs	r0, #2
 8001c4a:	7020      	strb	r0, [r4, #0]
	        		phaseU_high_state = switchOpen;
 8001c4c:	483a      	ldr	r0, [pc, #232]	; (8001d38 <UpdateWaveform+0x11c>)
 8001c4e:	7003      	strb	r3, [r0, #0]
	        		TIM1->CCR1 = 0;
 8001c50:	483a      	ldr	r0, [pc, #232]	; (8001d3c <UpdateWaveform+0x120>)
 8001c52:	6343      	str	r3, [r0, #52]	; 0x34
	        	waveformV_switchCount = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_deadTime;
 8001c58:	3302      	adds	r3, #2
	        	waveformV_state = waveform_running;
 8001c5a:	7013      	strb	r3, [r2, #0]
 8001c5c:	e7e3      	b.n	8001c26 <UpdateWaveform+0xa>
	        	else if(phaseU_low_state == switchClosed)
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d1f8      	bne.n	8001c54 <UpdateWaveform+0x38>
	        		TIM3->CCR1 = 0;
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <UpdateWaveform+0x124>)
	        		phaseU_low_state = switchOpen;
 8001c64:	7020      	strb	r0, [r4, #0]
	        		TIM3->CCR1 = 0;
 8001c66:	6358      	str	r0, [r3, #52]	; 0x34
	        		phaseU_high_state = switchClosing;
 8001c68:	2002      	movs	r0, #2
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <UpdateWaveform+0x11c>)
	        		phaseV_high_state = switchClosing;
 8001c6c:	7018      	strb	r0, [r3, #0]
 8001c6e:	e7f1      	b.n	8001c54 <UpdateWaveform+0x38>
	    else if(waveformU_state == waveform_deadTime)
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d1d8      	bne.n	8001c26 <UpdateWaveform+0xa>
	        waveformU_switchCount++;
 8001c74:	492d      	ldr	r1, [pc, #180]	; (8001d2c <UpdateWaveform+0x110>)
 8001c76:	680b      	ldr	r3, [r1, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	600b      	str	r3, [r1, #0]
	        if(waveformU_switchCount >= WAVEFORM_DEADTIME)
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d9d2      	bls.n	8001c26 <UpdateWaveform+0xa>
	        	if(phaseU_low_state == switchClosing)
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <UpdateWaveform+0x118>)
 8001c82:	7818      	ldrb	r0, [r3, #0]
 8001c84:	2802      	cmp	r0, #2
 8001c86:	d105      	bne.n	8001c94 <UpdateWaveform+0x78>
	        		TIM3->CCR1 = TIM_PERIOD;
 8001c88:	24c8      	movs	r4, #200	; 0xc8
 8001c8a:	482d      	ldr	r0, [pc, #180]	; (8001d40 <UpdateWaveform+0x124>)
 8001c8c:	00a4      	lsls	r4, r4, #2
 8001c8e:	6344      	str	r4, [r0, #52]	; 0x34
	        		phaseU_low_state = switchClosed;
 8001c90:	2001      	movs	r0, #1
 8001c92:	7018      	strb	r0, [r3, #0]
	        	if(phaseU_high_state == switchClosing)
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <UpdateWaveform+0x11c>)
 8001c96:	7818      	ldrb	r0, [r3, #0]
 8001c98:	2802      	cmp	r0, #2
 8001c9a:	d105      	bne.n	8001ca8 <UpdateWaveform+0x8c>
	        		TIM1->CCR1 = TIM_PERIOD / 2;
 8001c9c:	24c8      	movs	r4, #200	; 0xc8
 8001c9e:	4827      	ldr	r0, [pc, #156]	; (8001d3c <UpdateWaveform+0x120>)
 8001ca0:	0064      	lsls	r4, r4, #1
 8001ca2:	6344      	str	r4, [r0, #52]	; 0x34
	        		phaseV_high_state = switchClosed;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	7018      	strb	r0, [r3, #0]
	        	waveformV_switchCount = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	600b      	str	r3, [r1, #0]
	        	waveformV_state = waveform_running;
 8001cac:	3301      	adds	r3, #1
 8001cae:	e7d4      	b.n	8001c5a <UpdateWaveform+0x3e>
	    if(waveformV_state == waveform_running)
 8001cb0:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <UpdateWaveform+0x128>)
 8001cb2:	7813      	ldrb	r3, [r2, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11b      	bne.n	8001cf0 <UpdateWaveform+0xd4>
	        waveformV_switchCount++;
 8001cb8:	4923      	ldr	r1, [pc, #140]	; (8001d48 <UpdateWaveform+0x12c>)
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8001cba:	481d      	ldr	r0, [pc, #116]	; (8001d30 <UpdateWaveform+0x114>)
	        waveformV_switchCount++;
 8001cbc:	680b      	ldr	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8001cbe:	6800      	ldr	r0, [r0, #0]
	        waveformV_switchCount++;
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= waveform_maxSwitches)
 8001cc4:	4283      	cmp	r3, r0
 8001cc6:	d3ae      	bcc.n	8001c26 <UpdateWaveform+0xa>
	        	if(phaseV_low_state == switchOpen)
 8001cc8:	4820      	ldr	r0, [pc, #128]	; (8001d4c <UpdateWaveform+0x130>)
 8001cca:	7803      	ldrb	r3, [r0, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d106      	bne.n	8001cde <UpdateWaveform+0xc2>
	        		phaseV_low_state = switchClosing;
 8001cd0:	2402      	movs	r4, #2
 8001cd2:	7004      	strb	r4, [r0, #0]
	        		phaseV_high_state = switchOpen;
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <UpdateWaveform+0x134>)
 8001cd6:	7003      	strb	r3, [r0, #0]
	        		TIM1->CCR2 = 0;
 8001cd8:	4818      	ldr	r0, [pc, #96]	; (8001d3c <UpdateWaveform+0x120>)
 8001cda:	6383      	str	r3, [r0, #56]	; 0x38
 8001cdc:	e7ba      	b.n	8001c54 <UpdateWaveform+0x38>
	        	else if(phaseV_low_state == switchClosed)
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d1b8      	bne.n	8001c54 <UpdateWaveform+0x38>
	        		phaseV_low_state = switchOpen;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	7003      	strb	r3, [r0, #0]
	        		TIM3->CCR2 = 0;
 8001ce6:	4816      	ldr	r0, [pc, #88]	; (8001d40 <UpdateWaveform+0x124>)
 8001ce8:	6383      	str	r3, [r0, #56]	; 0x38
	        		phaseV_high_state = switchClosing;
 8001cea:	2002      	movs	r0, #2
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <UpdateWaveform+0x134>)
 8001cee:	e7bd      	b.n	8001c6c <UpdateWaveform+0x50>
	    else if(waveformV_state == waveform_deadTime)
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d198      	bne.n	8001c26 <UpdateWaveform+0xa>
	        waveformV_switchCount++;
 8001cf4:	4914      	ldr	r1, [pc, #80]	; (8001d48 <UpdateWaveform+0x12c>)
 8001cf6:	680b      	ldr	r3, [r1, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	600b      	str	r3, [r1, #0]
	        if(waveformV_switchCount >= WAVEFORM_DEADTIME)
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d800      	bhi.n	8001d02 <UpdateWaveform+0xe6>
 8001d00:	e791      	b.n	8001c26 <UpdateWaveform+0xa>
	        	if(phaseV_low_state == switchClosing)
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <UpdateWaveform+0x130>)
 8001d04:	781c      	ldrb	r4, [r3, #0]
 8001d06:	2c02      	cmp	r4, #2
 8001d08:	d104      	bne.n	8001d14 <UpdateWaveform+0xf8>
	        		TIM3->CCR2 = TIM_PERIOD;
 8001d0a:	25c8      	movs	r5, #200	; 0xc8
 8001d0c:	4c0c      	ldr	r4, [pc, #48]	; (8001d40 <UpdateWaveform+0x124>)
 8001d0e:	00ad      	lsls	r5, r5, #2
 8001d10:	63a5      	str	r5, [r4, #56]	; 0x38
	        		phaseV_low_state = switchClosed;
 8001d12:	7018      	strb	r0, [r3, #0]
	        	if(phaseV_high_state == switchClosing)
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <UpdateWaveform+0x134>)
 8001d16:	7818      	ldrb	r0, [r3, #0]
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	d1c5      	bne.n	8001ca8 <UpdateWaveform+0x8c>
	        		TIM1->CCR2 = TIM_PERIOD / 2;
 8001d1c:	24c8      	movs	r4, #200	; 0xc8
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <UpdateWaveform+0x120>)
 8001d20:	0064      	lsls	r4, r4, #1
 8001d22:	6384      	str	r4, [r0, #56]	; 0x38
 8001d24:	e7be      	b.n	8001ca4 <UpdateWaveform+0x88>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000031 	.word	0x20000031
 8001d2c:	20000034 	.word	0x20000034
 8001d30:	2000002c 	.word	0x2000002c
 8001d34:	20000024 	.word	0x20000024
 8001d38:	20000030 	.word	0x20000030
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40000400 	.word	0x40000400
 8001d44:	20000027 	.word	0x20000027
 8001d48:	20000038 	.word	0x20000038
 8001d4c:	20000032 	.word	0x20000032
 8001d50:	200000d4 	.word	0x200000d4

08001d54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001d54:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	2001      	movs	r0, #1
 8001d58:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <MX_DMA_Init+0x28>)
 8001d5a:	6951      	ldr	r1, [r2, #20]
 8001d5c:	4301      	orrs	r1, r0
 8001d5e:	6151      	str	r1, [r2, #20]
 8001d60:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d64:	4003      	ands	r3, r0
 8001d66:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d68:	0011      	movs	r1, r2
 8001d6a:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d6e:	f7fe fbb7 	bl	80004e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d72:	2009      	movs	r0, #9
 8001d74:	f7fe fbe4 	bl	8000540 <HAL_NVIC_EnableIRQ>

}
 8001d78:	bd07      	pop	{r0, r1, r2, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000

08001d80 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001d80:	b500      	push	{lr}
 8001d82:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	2214      	movs	r2, #20
 8001d86:	2100      	movs	r1, #0
 8001d88:	a803      	add	r0, sp, #12
 8001d8a:	f000 fc1e 	bl	80025ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2080      	movs	r0, #128	; 0x80
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_GPIO_Init+0x58>)
 8001d92:	0280      	lsls	r0, r0, #10
 8001d94:	6959      	ldr	r1, [r3, #20]
 8001d96:	4301      	orrs	r1, r0
 8001d98:	6159      	str	r1, [r3, #20]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	6959      	ldr	r1, [r3, #20]
 8001da6:	02c0      	lsls	r0, r0, #11
 8001da8:	4301      	orrs	r1, r0
 8001daa:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dac:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4002      	ands	r2, r0
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 8001dc8:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 8001dcc:	01db      	lsls	r3, r3, #7
 8001dce:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f7fe fc7c 	bl	80006cc <HAL_GPIO_Init>

}
 8001dd4:	b009      	add	sp, #36	; 0x24
 8001dd6:	bd00      	pop	{pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001de0:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001de4:	4c13      	ldr	r4, [pc, #76]	; (8001e34 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de6:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8001de8:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dec:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001dee:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001df0:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df2:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8001df4:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df6:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001df8:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dfa:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfc:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfe:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e00:	f7fe fd14 	bl	800082c <HAL_I2C_Init>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8001e08:	f000 f8de 	bl	8001fc8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	0020      	movs	r0, r4
 8001e10:	f7fe fd62 	bl	80008d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d001      	beq.n	8001e1c <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001e18:	f000 f8d6 	bl	8001fc8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	0020      	movs	r0, r4
 8001e20:	f7fe fd80 	bl	8000924 <HAL_I2CEx_ConfigDigitalFilter>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 f8ce 	bl	8001fc8 <Error_Handler>
  }

}
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40005400 	.word	0x40005400
 8001e34:	200000d8 	.word	0x200000d8
 8001e38:	2000090e 	.word	0x2000090e

08001e3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e3c:	b510      	push	{r4, lr}
 8001e3e:	0004      	movs	r4, r0
 8001e40:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	2214      	movs	r2, #20
 8001e44:	2100      	movs	r1, #0
 8001e46:	a803      	add	r0, sp, #12
 8001e48:	f000 fbbf 	bl	80025ca <memset>
  if(i2cHandle->Instance==I2C1)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_I2C_MspInit+0x60>)
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d120      	bne.n	8001e96 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	4c12      	ldr	r4, [pc, #72]	; (8001ea0 <HAL_I2C_MspInit+0x64>)
 8001e58:	02c9      	lsls	r1, r1, #11
 8001e5a:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	6162      	str	r2, [r4, #20]
 8001e62:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	400b      	ands	r3, r1
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e72:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	3b11      	subs	r3, #17
 8001e7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001e7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f7fe fc24 	bl	80006cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	69e2      	ldr	r2, [r4, #28]
 8001e88:	0389      	lsls	r1, r1, #14
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	61e2      	str	r2, [r4, #28]
 8001e8e:	69e3      	ldr	r3, [r4, #28]
 8001e90:	400b      	ands	r3, r1
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e96:	b008      	add	sp, #32
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eaa:	2410      	movs	r4, #16
{
 8001eac:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	2230      	movs	r2, #48	; 0x30
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	a808      	add	r0, sp, #32
 8001eb4:	f000 fb89 	bl	80025ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb8:	0022      	movs	r2, r4
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4668      	mov	r0, sp
 8001ebe:	f000 fb84 	bl	80025ca <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec2:	0022      	movs	r2, r4
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	a804      	add	r0, sp, #16
 8001ec8:	f000 fb7f 	bl	80025ca <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001ecc:	2312      	movs	r3, #18
 8001ece:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001ed0:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed2:	2501      	movs	r5, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed4:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001ed6:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001ed8:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	3c0e      	subs	r4, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001edc:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ede:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001ee0:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee2:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001ee4:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee6:	f7fe fd41 	bl	800096c <HAL_RCC_OscConfig>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d000      	beq.n	8001ef0 <SystemClock_Config+0x48>
 8001eee:	e7fe      	b.n	8001eee <SystemClock_Config+0x46>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef0:	2307      	movs	r3, #7
							  |RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef2:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef4:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ef6:	0029      	movs	r1, r5
 8001ef8:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efa:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efc:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efe:	f7fe ff49 	bl	8000d94 <HAL_RCC_ClockConfig>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d000      	beq.n	8001f08 <SystemClock_Config+0x60>
 8001f06:	e7fe      	b.n	8001f06 <SystemClock_Config+0x5e>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001f08:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f0a:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f0c:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0e:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001f10:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f12:	f7fe ffeb 	bl	8000eec <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d000      	beq.n	8001f1c <SystemClock_Config+0x74>
 8001f1a:	e7fe      	b.n	8001f1a <SystemClock_Config+0x72>
	{
		Error_Handler();
	}
}
 8001f1c:	b015      	add	sp, #84	; 0x54
 8001f1e:	bd30      	pop	{r4, r5, pc}

08001f20 <main>:
	waveform_frequency = 60;
 8001f20:	223c      	movs	r2, #60	; 0x3c
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <main+0x70>)
{
 8001f24:	b510      	push	{r4, lr}
	waveform_frequency = 60;
 8001f26:	801a      	strh	r2, [r3, #0]
	waveform_maxSwitches = 844;
 8001f28:	22d3      	movs	r2, #211	; 0xd3
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <main+0x74>)
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
	waveformU_switchCount = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <main+0x78>)
 8001f34:	6013      	str	r3, [r2, #0]
	waveformV_switchCount = 0;
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <main+0x7c>)
 8001f38:	6013      	str	r3, [r2, #0]
	waveformW_switchCount = 0;
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <main+0x80>)
 8001f3c:	6013      	str	r3, [r2, #0]
	phaseU_low_state = switchOpen;
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <main+0x84>)
 8001f40:	7013      	strb	r3, [r2, #0]
	phaseW_low_state = switchOpen;
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <main+0x88>)
 8001f44:	7013      	strb	r3, [r2, #0]
	phaseV_low_state = switchOpen;
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <main+0x8c>)
 8001f48:	7013      	strb	r3, [r2, #0]
	phaseU_high_state = switchOpen;
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <main+0x90>)
 8001f4c:	7013      	strb	r3, [r2, #0]
	phaseW_high_state = switchOpen;
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <main+0x94>)
 8001f50:	7013      	strb	r3, [r2, #0]
	phaseV_high_state = switchOpen;
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <main+0x98>)
 8001f54:	7013      	strb	r3, [r2, #0]
	waveformU_state = waveform_running;
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <main+0x9c>)
 8001f58:	3301      	adds	r3, #1
 8001f5a:	7013      	strb	r3, [r2, #0]
	waveformV_state = waveform_running;
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <main+0xa0>)
 8001f5e:	7013      	strb	r3, [r2, #0]
	waveformW_state = waveform_running;
 8001f60:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <main+0xa4>)
 8001f62:	7013      	strb	r3, [r2, #0]
	HAL_Init();
 8001f64:	f7fe f982 	bl	800026c <HAL_Init>
	SystemClock_Config();
 8001f68:	f7ff ff9e 	bl	8001ea8 <SystemClock_Config>
	MX_GPIO_Init();
 8001f6c:	f7ff ff08 	bl	8001d80 <MX_GPIO_Init>
	MX_DMA_Init();
 8001f70:	f7ff fef0 	bl	8001d54 <MX_DMA_Init>
	MX_ADC_Init();
 8001f74:	f7ff fd90 	bl	8001a98 <MX_ADC_Init>
	MX_I2C1_Init();
 8001f78:	f7ff ff32 	bl	8001de0 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001f7c:	f000 f982 	bl	8002284 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001f80:	f000 f9fa 	bl	8002378 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001f84:	f000 fa74 	bl	8002470 <MX_USART1_UART_Init>
	MX_TIM15_Init();
 8001f88:	f000 f896 	bl	80020b8 <MX_TIM15_Init>
 8001f8c:	e7fe      	b.n	8001f8c <main+0x6c>
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000028 	.word	0x20000028
 8001f94:	2000002c 	.word	0x2000002c
 8001f98:	20000034 	.word	0x20000034
 8001f9c:	20000038 	.word	0x20000038
 8001fa0:	20000084 	.word	0x20000084
 8001fa4:	20000024 	.word	0x20000024
 8001fa8:	20000025 	.word	0x20000025
 8001fac:	20000032 	.word	0x20000032
 8001fb0:	20000030 	.word	0x20000030
 8001fb4:	2000003c 	.word	0x2000003c
 8001fb8:	200000d4 	.word	0x200000d4
 8001fbc:	20000031 	.word	0x20000031
 8001fc0:	20000027 	.word	0x20000027
 8001fc4:	20000026 	.word	0x20000026

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler>
	...

08001fcc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fcc:	2001      	movs	r0, #1
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_MspInit+0x2c>)
{
 8001fd0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	6999      	ldr	r1, [r3, #24]
 8001fd4:	4301      	orrs	r1, r0
 8001fd6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4002      	ands	r2, r0
 8001fe0:	9200      	str	r2, [sp, #0]
 8001fe2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	61da      	str	r2, [r3, #28]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	400b      	ands	r3, r1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	b002      	add	sp, #8
 8001ff4:	4770      	bx	lr
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000

08001ffc <NMI_Handler>:
 8001ffc:	4770      	bx	lr

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler>

08002000 <SVC_Handler>:
 8002000:	4770      	bx	lr

08002002 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f7fe f941 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800200c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800200e:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA1_Channel1_IRQHandler+0xc>)
 8002010:	f7fe fb13 	bl	800063a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002014:	bd10      	pop	{r4, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000040 	.word	0x20000040

0800201c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800201c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART1_IRQHandler+0xc>)
 8002020:	f7ff fcae 	bl	8001980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002024:	bd10      	pop	{r4, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	200001e4 	.word	0x200001e4

0800202c <TIM3_IRQHandler>:
// Interrupt handler
void TIM3_IRQHandler(void)
{

	// Check for CC1 interrupt
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 800202c:	2202      	movs	r2, #2
{
 800202e:	b510      	push	{r4, lr}
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 8002030:	4c08      	ldr	r4, [pc, #32]	; (8002054 <TIM3_IRQHandler+0x28>)
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	4211      	tst	r1, r2
 8002038:	d00b      	beq.n	8002052 <TIM3_IRQHandler+0x26>
	{
		if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) !=RESET)
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	4211      	tst	r1, r2
 800203e:	d008      	beq.n	8002052 <TIM3_IRQHandler+0x26>
		{
			// Clear the interrupt
		    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 8002040:	3a05      	subs	r2, #5
 8002042:	611a      	str	r2, [r3, #16]
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002044:	2301      	movs	r3, #1

		    UpdateWaveform(phase_U);
 8002046:	2000      	movs	r0, #0
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002048:	7723      	strb	r3, [r4, #28]
		    UpdateWaveform(phase_U);
 800204a:	f7ff fde7 	bl	8001c1c <UpdateWaveform>

			htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	2300      	movs	r3, #0
 8002050:	7723      	strb	r3, [r4, #28]
		}
	}

}
 8002052:	bd10      	pop	{r4, pc}
 8002054:	20000164 	.word	0x20000164

08002058 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002058:	2101      	movs	r1, #1
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4002      	ands	r2, r0
 8002068:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	480e      	ldr	r0, [pc, #56]	; (80020a8 <SystemInit+0x50>)
 800206e:	4002      	ands	r2, r0
 8002070:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <SystemInit+0x54>)
 8002076:	4002      	ands	r2, r0
 8002078:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <SystemInit+0x58>)
 800207e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002080:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002082:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002086:	4382      	bics	r2, r0
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800208a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <SystemInit+0x5c>)
 800208e:	4002      	ands	r2, r0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002094:	438a      	bics	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]

}
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08ffb80c 	.word	0x08ffb80c
 80020a8:	fef6ffff 	.word	0xfef6ffff
 80020ac:	fffbffff 	.word	0xfffbffff
 80020b0:	ffc0ffff 	.word	0xffc0ffff
 80020b4:	fffffeec 	.word	0xfffffeec

080020b8 <MX_TIM15_Init>:
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	b091      	sub	sp, #68	; 0x44
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	2208      	movs	r2, #8
 80020be:	2100      	movs	r1, #0
 80020c0:	4668      	mov	r0, sp
 80020c2:	f000 fa82 	bl	80025ca <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020c6:	221c      	movs	r2, #28
 80020c8:	2100      	movs	r1, #0
 80020ca:	a802      	add	r0, sp, #8
 80020cc:	f000 fa7d 	bl	80025ca <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020d0:	221c      	movs	r2, #28
 80020d2:	2100      	movs	r1, #0
 80020d4:	a809      	add	r0, sp, #36	; 0x24
 80020d6:	f000 fa78 	bl	80025ca <memset>

	htim15.Instance = TIM15;
 80020da:	4d20      	ldr	r5, [pc, #128]	; (800215c <MX_TIM15_Init+0xa4>)
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <MX_TIM15_Init+0xa8>)
	htim15.Init.Prescaler = 0;
 80020de:	2400      	movs	r4, #0
	htim15.Instance = TIM15;
 80020e0:	602b      	str	r3, [r5, #0]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim15.Init.Period = 1000;
 80020e2:	23fa      	movs	r3, #250	; 0xfa
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim15.Init.RepetitionCounter = 0;
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80020e4:	0028      	movs	r0, r5
	htim15.Init.Period = 1000;
 80020e6:	009b      	lsls	r3, r3, #2
	htim15.Init.Prescaler = 0;
 80020e8:	606c      	str	r4, [r5, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	60ac      	str	r4, [r5, #8]
	htim15.Init.Period = 1000;
 80020ec:	60eb      	str	r3, [r5, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	612c      	str	r4, [r5, #16]
	htim15.Init.RepetitionCounter = 0;
 80020f0:	616c      	str	r4, [r5, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80020f4:	f7ff f888 	bl	8001208 <HAL_TIM_OC_Init>
 80020f8:	42a0      	cmp	r0, r4
 80020fa:	d001      	beq.n	8002100 <MX_TIM15_Init+0x48>
	{
		Error_Handler();
 80020fc:	f7ff ff64 	bl	8001fc8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002100:	4669      	mov	r1, sp
 8002102:	0028      	movs	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	9400      	str	r4, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	9401      	str	r4, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002108:	f7ff fa02 	bl	8001510 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	2800      	cmp	r0, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM15_Init+0x5c>
	{
		Error_Handler();
 8002110:	f7ff ff5a 	bl	8001fc8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002114:	2400      	movs	r4, #0
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002116:	a902      	add	r1, sp, #8
 8002118:	0022      	movs	r2, r4
 800211a:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800211c:	9402      	str	r4, [sp, #8]
	sConfigOC.Pulse = 0;
 800211e:	9403      	str	r4, [sp, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002120:	9404      	str	r4, [sp, #16]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002122:	9405      	str	r4, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002124:	9406      	str	r4, [sp, #24]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002126:	9407      	str	r4, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002128:	9408      	str	r4, [sp, #32]
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800212a:	f7ff f8e3 	bl	80012f4 <HAL_TIM_OC_ConfigChannel>
 800212e:	42a0      	cmp	r0, r4
 8002130:	d001      	beq.n	8002136 <MX_TIM15_Init+0x7e>
	{
		Error_Handler();
 8002132:	f7ff ff49 	bl	8001fc8 <Error_Handler>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002136:	2380      	movs	r3, #128	; 0x80
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002138:	a909      	add	r1, sp, #36	; 0x24
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213a:	019b      	lsls	r3, r3, #6
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800213c:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800213e:	9409      	str	r4, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002140:	940a      	str	r4, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002142:	940b      	str	r4, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.DeadTime = 0;
 8002144:	940c      	str	r4, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002146:	940d      	str	r4, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002148:	930e      	str	r3, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214a:	940f      	str	r4, [sp, #60]	; 0x3c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800214c:	f7ff fa02 	bl	8001554 <HAL_TIMEx_ConfigBreakDeadTime>
 8002150:	2800      	cmp	r0, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM15_Init+0xa0>
	{
		Error_Handler();
 8002154:	f7ff ff38 	bl	8001fc8 <Error_Handler>
	}

}
 8002158:	b011      	add	sp, #68	; 0x44
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	20000124 	.word	0x20000124
 8002160:	40014000 	.word	0x40014000

08002164 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8002164:	6803      	ldr	r3, [r0, #0]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_TIM_PWM_MspInit+0x3c>)
{
 8002168:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10b      	bne.n	8002186 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216e:	2080      	movs	r0, #128	; 0x80
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002172:	0100      	lsls	r0, r0, #4
 8002174:	6991      	ldr	r1, [r2, #24]
 8002176:	4301      	orrs	r1, r0
 8002178:	6191      	str	r1, [r2, #24]
 800217a:	6993      	ldr	r3, [r2, #24]
 800217c:	4003      	ands	r3, r0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002182:	b002      	add	sp, #8
 8002184:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_TIM_PWM_MspInit+0x44>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d1fa      	bne.n	8002182 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800218c:	2002      	movs	r0, #2
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002190:	69d1      	ldr	r1, [r2, #28]
 8002192:	4301      	orrs	r1, r0
 8002194:	61d1      	str	r1, [r2, #28]
 8002196:	69d3      	ldr	r3, [r2, #28]
 8002198:	4003      	ands	r3, r0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	9b01      	ldr	r3, [sp, #4]
}
 800219e:	e7f0      	b.n	8002182 <HAL_TIM_PWM_MspInit+0x1e>
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40000400 	.word	0x40000400

080021ac <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM15)
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_TIM_OC_MspInit+0x24>)
 80021ae:	6802      	ldr	r2, [r0, #0]
{
 80021b0:	b082      	sub	sp, #8
  if(tim_ocHandle->Instance==TIM15)
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d109      	bne.n	80021ca <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80021b6:	2080      	movs	r0, #128	; 0x80
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_TIM_OC_MspInit+0x28>)
 80021ba:	0240      	lsls	r0, r0, #9
 80021bc:	6991      	ldr	r1, [r2, #24]
 80021be:	4301      	orrs	r1, r0
 80021c0:	6191      	str	r1, [r2, #24]
 80021c2:	6993      	ldr	r3, [r2, #24]
 80021c4:	4003      	ands	r3, r0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80021ca:	b002      	add	sp, #8
 80021cc:	4770      	bx	lr
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	0004      	movs	r4, r0
 80021dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021de:	2214      	movs	r2, #20
 80021e0:	2100      	movs	r1, #0
 80021e2:	a803      	add	r0, sp, #12
 80021e4:	f000 f9f1 	bl	80025ca <memset>
  if(timHandle->Instance==TIM1)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_TIM_MspPostInit+0x98>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d116      	bne.n	800221e <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	2080      	movs	r0, #128	; 0x80
 80021f2:	4a20      	ldr	r2, [pc, #128]	; (8002274 <HAL_TIM_MspPostInit+0x9c>)
 80021f4:	0280      	lsls	r0, r0, #10
 80021f6:	6951      	ldr	r1, [r2, #20]
 80021f8:	4301      	orrs	r1, r0
 80021fa:	6151      	str	r1, [r2, #20]
 80021fc:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4003      	ands	r3, r0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
 8002206:	23e0      	movs	r3, #224	; 0xe0
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002214:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002216:	f7fe fa59 	bl	80006cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800221a:	b008      	add	sp, #32
 800221c:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 800221e:	4a16      	ldr	r2, [pc, #88]	; (8002278 <HAL_TIM_MspPostInit+0xa0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d1fa      	bne.n	800221a <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	2080      	movs	r0, #128	; 0x80
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_TIM_MspPostInit+0x9c>)
 8002228:	02c0      	lsls	r0, r0, #11
 800222a:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4301      	orrs	r1, r0
 8002230:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	0309      	lsls	r1, r1, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4002      	ands	r2, r0
 800223a:	9201      	str	r2, [sp, #4]
 800223c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8002240:	480e      	ldr	r0, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	430a      	orrs	r2, r1
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	400b      	ands	r3, r1
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8002250:	2301      	movs	r3, #1
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8002252:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8002254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002256:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8002258:	f7fe fa38 	bl	80006cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8002268:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	a903      	add	r1, sp, #12
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <HAL_TIM_MspPostInit+0xa8>)
 800226e:	e7d2      	b.n	8002216 <HAL_TIM_MspPostInit+0x3e>
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40000400 	.word	0x40000400
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800

08002284 <MX_TIM1_Init>:
{
 8002284:	b530      	push	{r4, r5, lr}
 8002286:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	2208      	movs	r2, #8
 800228a:	2100      	movs	r1, #0
 800228c:	a801      	add	r0, sp, #4
 800228e:	f000 f99c 	bl	80025ca <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002292:	221c      	movs	r2, #28
 8002294:	2100      	movs	r1, #0
 8002296:	a803      	add	r0, sp, #12
 8002298:	f000 f997 	bl	80025ca <memset>
	htim1.Instance = TIM1;
 800229c:	4c33      	ldr	r4, [pc, #204]	; (800236c <MX_TIM1_Init+0xe8>)
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <MX_TIM1_Init+0xec>)
	htim1.Init.Prescaler = 0;
 80022a0:	2500      	movs	r5, #0
	htim1.Instance = TIM1;
 80022a2:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = TIM_PERIOD;
 80022a4:	23c8      	movs	r3, #200	; 0xc8
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	60e3      	str	r3, [r4, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022aa:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ac:	0020      	movs	r0, r4
	htim1.Init.Prescaler = 0;
 80022ae:	6065      	str	r5, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	60a5      	str	r5, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80022b4:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022b6:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022b8:	f7fe ffc1 	bl	800123e <HAL_TIM_PWM_Init>
 80022bc:	42a8      	cmp	r0, r5
 80022be:	d001      	beq.n	80022c4 <MX_TIM1_Init+0x40>
		Error_Handler();
 80022c0:	f7ff fe82 	bl	8001fc8 <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c4:	a901      	add	r1, sp, #4
 80022c6:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022cc:	f7ff f920 	bl	8001510 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM1_Init+0x54>
		Error_Handler();
 80022d4:	f7ff fe78 	bl	8001fc8 <Error_Handler>
	sConfigOC.Pulse = 0;
 80022d8:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022dc:	a903      	add	r1, sp, #12
 80022de:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e0:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 80022e2:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e4:	9205      	str	r2, [sp, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e6:	9206      	str	r2, [sp, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e8:	9207      	str	r2, [sp, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ea:	9208      	str	r2, [sp, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ec:	9209      	str	r2, [sp, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ee:	f7ff f82f 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0x76>
		Error_Handler();
 80022f6:	f7ff fe67 	bl	8001fc8 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022fa:	2204      	movs	r2, #4
 80022fc:	a903      	add	r1, sp, #12
 80022fe:	0020      	movs	r0, r4
 8002300:	f7ff f826 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 8002304:	2800      	cmp	r0, #0
 8002306:	d001      	beq.n	800230c <MX_TIM1_Init+0x88>
		Error_Handler();
 8002308:	f7ff fe5e 	bl	8001fc8 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800230c:	2208      	movs	r2, #8
 800230e:	a903      	add	r1, sp, #12
 8002310:	0020      	movs	r0, r4
 8002312:	f7ff f81d 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 8002316:	2800      	cmp	r0, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0x9a>
		Error_Handler();
 800231a:	f7ff fe55 	bl	8001fc8 <Error_Handler>
	HAL_TIM_MspPostInit(&htim1);
 800231e:	0020      	movs	r0, r4
 8002320:	f7ff ff5a 	bl	80021d8 <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002324:	2080      	movs	r0, #128	; 0x80
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <MX_TIM1_Init+0xf0>)
 8002328:	0100      	lsls	r0, r0, #4
 800232a:	6991      	ldr	r1, [r2, #24]
 800232c:	4301      	orrs	r1, r0
 800232e:	6191      	str	r1, [r2, #24]
 8002330:	6993      	ldr	r3, [r2, #24]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002332:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002334:	4003      	ands	r3, r0
 8002336:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002338:	0020      	movs	r0, r4
	__HAL_RCC_TIM1_CLK_ENABLE();
 800233a:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800233c:	f7ff f87e 	bl	800143c <HAL_TIM_PWM_Start>
 8002340:	2800      	cmp	r0, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM1_Init+0xc4>
		Error_Handler();
 8002344:	f7ff fe40 	bl	8001fc8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8002348:	2104      	movs	r1, #4
 800234a:	0020      	movs	r0, r4
 800234c:	f7ff f876 	bl	800143c <HAL_TIM_PWM_Start>
 8002350:	2800      	cmp	r0, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM1_Init+0xd4>
		Error_Handler();
 8002354:	f7ff fe38 	bl	8001fc8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8002358:	2108      	movs	r1, #8
 800235a:	0020      	movs	r0, r4
 800235c:	f7ff f86e 	bl	800143c <HAL_TIM_PWM_Start>
 8002360:	2800      	cmp	r0, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0xe4>
		Error_Handler();
 8002364:	f7ff fe30 	bl	8001fc8 <Error_Handler>
}
 8002368:	b00b      	add	sp, #44	; 0x2c
 800236a:	bd30      	pop	{r4, r5, pc}
 800236c:	200001a4 	.word	0x200001a4
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40021000 	.word	0x40021000

08002378 <MX_TIM3_Init>:
{
 8002378:	b530      	push	{r4, r5, lr}
 800237a:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	2208      	movs	r2, #8
 800237e:	2100      	movs	r1, #0
 8002380:	a801      	add	r0, sp, #4
 8002382:	f000 f922 	bl	80025ca <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002386:	221c      	movs	r2, #28
 8002388:	2100      	movs	r1, #0
 800238a:	a803      	add	r0, sp, #12
 800238c:	f000 f91d 	bl	80025ca <memset>
	htim3.Instance = TIM3;
 8002390:	4c34      	ldr	r4, [pc, #208]	; (8002464 <MX_TIM3_Init+0xec>)
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <MX_TIM3_Init+0xf0>)
	htim3.Init.Prescaler = 0;
 8002394:	2500      	movs	r5, #0
	htim3.Instance = TIM3;
 8002396:	6023      	str	r3, [r4, #0]
	htim3.Init.Period = TIM_PERIOD;
 8002398:	23c8      	movs	r3, #200	; 0xc8
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800239a:	0020      	movs	r0, r4
	htim3.Init.Period = TIM_PERIOD;
 800239c:	009b      	lsls	r3, r3, #2
	htim3.Init.Prescaler = 0;
 800239e:	6065      	str	r5, [r4, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = TIM_PERIOD;
 80023a2:	60e3      	str	r3, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a4:	6125      	str	r5, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023a8:	f7fe ff49 	bl	800123e <HAL_TIM_PWM_Init>
 80023ac:	42a8      	cmp	r0, r5
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x3c>
		Error_Handler();
 80023b0:	f7ff fe0a 	bl	8001fc8 <Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023b4:	a901      	add	r1, sp, #4
 80023b6:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	9502      	str	r5, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023bc:	f7ff f8a8 	bl	8001510 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x50>
		Error_Handler();
 80023c4:	f7ff fe00 	bl	8001fc8 <Error_Handler>
	sConfigOC.Pulse = 0;
 80023c8:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023cc:	a903      	add	r1, sp, #12
 80023ce:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d0:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 80023d2:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d4:	9205      	str	r2, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	9207      	str	r2, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d8:	f7fe ffba 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	2800      	cmp	r0, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0x6c>
		Error_Handler();
 80023e0:	f7ff fdf2 	bl	8001fc8 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e4:	2204      	movs	r2, #4
 80023e6:	a903      	add	r1, sp, #12
 80023e8:	0020      	movs	r0, r4
 80023ea:	f7fe ffb1 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80023f2:	f7ff fde9 	bl	8001fc8 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023f6:	2208      	movs	r2, #8
 80023f8:	a903      	add	r1, sp, #12
 80023fa:	0020      	movs	r0, r4
 80023fc:	f7fe ffa8 	bl	8001350 <HAL_TIM_PWM_ConfigChannel>
 8002400:	2800      	cmp	r0, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0x90>
		Error_Handler();
 8002404:	f7ff fde0 	bl	8001fc8 <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8002408:	0020      	movs	r0, r4
 800240a:	f7ff fee5 	bl	80021d8 <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM3_CLK_ENABLE();
 800240e:	2002      	movs	r0, #2
 8002410:	4a16      	ldr	r2, [pc, #88]	; (800246c <MX_TIM3_Init+0xf4>)
 8002412:	69d1      	ldr	r1, [r2, #28]
 8002414:	4301      	orrs	r1, r0
 8002416:	61d1      	str	r1, [r2, #28]
 8002418:	69d3      	ldr	r3, [r2, #28]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800241a:	2100      	movs	r1, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 800241c:	4003      	ands	r3, r0
 800241e:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002420:	0020      	movs	r0, r4
	__HAL_RCC_TIM3_CLK_ENABLE();
 8002422:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002424:	f7ff f830 	bl	8001488 <HAL_TIM_PWM_Start_IT>
 8002428:	2800      	cmp	r0, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM3_Init+0xb8>
		Error_Handler();
 800242c:	f7ff fdcc 	bl	8001fc8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8002430:	2104      	movs	r1, #4
 8002432:	0020      	movs	r0, r4
 8002434:	f7ff f802 	bl	800143c <HAL_TIM_PWM_Start>
 8002438:	2800      	cmp	r0, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM3_Init+0xc8>
		Error_Handler();
 800243c:	f7ff fdc4 	bl	8001fc8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8002440:	2108      	movs	r1, #8
 8002442:	0020      	movs	r0, r4
 8002444:	f7fe fffa 	bl	800143c <HAL_TIM_PWM_Start>
 8002448:	2800      	cmp	r0, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM3_Init+0xd8>
		Error_Handler();
 800244c:	f7ff fdbc 	bl	8001fc8 <Error_Handler>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2010      	movs	r0, #16
 8002454:	0011      	movs	r1, r2
 8002456:	f7fe f843 	bl	80004e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800245a:	2010      	movs	r0, #16
 800245c:	f7fe f870 	bl	8000540 <HAL_NVIC_EnableIRQ>
}
 8002460:	b00b      	add	sp, #44	; 0x2c
 8002462:	bd30      	pop	{r4, r5, pc}
 8002464:	20000164 	.word	0x20000164
 8002468:	40000400 	.word	0x40000400
 800246c:	40021000 	.word	0x40021000

08002470 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002470:	480b      	ldr	r0, [pc, #44]	; (80024a0 <MX_USART1_UART_Init+0x30>)
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART1_UART_Init+0x34>)
{
 8002474:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002476:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8002478:	2396      	movs	r3, #150	; 0x96
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800247e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002480:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002482:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002484:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002486:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002488:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002490:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002492:	f7ff f9bb 	bl	800180c <HAL_UART_Init>
 8002496:	2800      	cmp	r0, #0
 8002498:	d001      	beq.n	800249e <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 800249a:	f7ff fd95 	bl	8001fc8 <Error_Handler>
  }

}
 800249e:	bd10      	pop	{r4, pc}
 80024a0:	200001e4 	.word	0x200001e4
 80024a4:	40013800 	.word	0x40013800

080024a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a8:	b510      	push	{r4, lr}
 80024aa:	0004      	movs	r4, r0
 80024ac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	2214      	movs	r2, #20
 80024b0:	2100      	movs	r1, #0
 80024b2:	a803      	add	r0, sp, #12
 80024b4:	f000 f889 	bl	80025ca <memset>
  if(uartHandle->Instance==USART1)
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x68>)
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d124      	bne.n	800250a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c0:	2080      	movs	r0, #128	; 0x80
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_UART_MspInit+0x6c>)
 80024c4:	01c0      	lsls	r0, r0, #7
 80024c6:	6999      	ldr	r1, [r3, #24]
 80024c8:	4301      	orrs	r1, r0
 80024ca:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ce:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d0:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d2:	4002      	ands	r2, r0
 80024d4:	9201      	str	r2, [sp, #4]
 80024d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	430a      	orrs	r2, r1
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	400b      	ands	r3, r1
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	3bbe      	subs	r3, #190	; 0xbe
 80024ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f2:	3301      	adds	r3, #1
 80024f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f7fe f8e9 	bl	80006cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	201b      	movs	r0, #27
 80024fe:	0011      	movs	r1, r2
 8002500:	f7fd ffee 	bl	80004e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002504:	201b      	movs	r0, #27
 8002506:	f7fe f81b 	bl	8000540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800250a:	b008      	add	sp, #32
 800250c:	bd10      	pop	{r4, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	40013800 	.word	0x40013800
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400

0800251c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800251e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LoopForever+0x6>)
  ldr r1, =_edata
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <LoopForever+0xe>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002538:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <LoopForever+0x16>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002546:	f7ff fd87 	bl	8002058 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800254a:	f000 f811 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254e:	f7ff fce7 	bl	8001f20 <main>

08002552 <LoopForever>:

LoopForever:
    b LoopForever
 8002552:	e7fe      	b.n	8002552 <LoopForever>
  ldr   r0, =_estack
 8002554:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002560:	08002638 	.word	0x08002638
  ldr r2, =_sbss
 8002564:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002568:	20000254 	.word	0x20000254

0800256c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC1_IRQHandler>
	...

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	2600      	movs	r6, #0
 8002574:	4d0c      	ldr	r5, [pc, #48]	; (80025a8 <__libc_init_array+0x38>)
 8002576:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002578:	1b64      	subs	r4, r4, r5
 800257a:	10a4      	asrs	r4, r4, #2
 800257c:	42a6      	cmp	r6, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	2600      	movs	r6, #0
 8002582:	f000 f82b 	bl	80025dc <_init>
 8002586:	4d0a      	ldr	r5, [pc, #40]	; (80025b0 <__libc_init_array+0x40>)
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <__libc_init_array+0x44>)
 800258a:	1b64      	subs	r4, r4, r5
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	42a6      	cmp	r6, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	00b3      	lsls	r3, r6, #2
 8002596:	58eb      	ldr	r3, [r5, r3]
 8002598:	4798      	blx	r3
 800259a:	3601      	adds	r6, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	00b3      	lsls	r3, r6, #2
 80025a0:	58eb      	ldr	r3, [r5, r3]
 80025a2:	4798      	blx	r3
 80025a4:	3601      	adds	r6, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	08002630 	.word	0x08002630
 80025ac:	08002630 	.word	0x08002630
 80025b0:	08002630 	.word	0x08002630
 80025b4:	08002634 	.word	0x08002634

080025b8 <memcpy>:
 80025b8:	2300      	movs	r3, #0
 80025ba:	b510      	push	{r4, lr}
 80025bc:	429a      	cmp	r2, r3
 80025be:	d100      	bne.n	80025c2 <memcpy+0xa>
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	5ccc      	ldrb	r4, [r1, r3]
 80025c4:	54c4      	strb	r4, [r0, r3]
 80025c6:	3301      	adds	r3, #1
 80025c8:	e7f8      	b.n	80025bc <memcpy+0x4>

080025ca <memset>:
 80025ca:	0003      	movs	r3, r0
 80025cc:	1882      	adds	r2, r0, r2
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d100      	bne.n	80025d4 <memset+0xa>
 80025d2:	4770      	bx	lr
 80025d4:	7019      	strb	r1, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	e7f9      	b.n	80025ce <memset+0x4>
	...

080025dc <_init>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr

080025e8 <_fini>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr
